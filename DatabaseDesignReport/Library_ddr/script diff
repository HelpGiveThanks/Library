Script Hierarchy
startclose

startDatabase
start
closeLibrary
moreInfo
libraryNewOrUpdate

switchTestList
update
createEmptyLibrary
copyPrimaryNodeID
sampleCopyForPasting
sampleCopyCopyText
import
changeLibraryOrLibraryName

changeSectionName
switchLibrary
sectionScripts

changeSectionGroupName
newSectionOnSectionLayout
deleteSection
testScreens

setup

gotoSetupTest
loadSetupTestRecord
newTestGroup
newTest
deleteTest
deleteTestItem
newTestItem
moveTestItemToNewTestGroupStep1
newTestItemGroup
testNameToRevertNamField
moveTestItemToNewTestGroupStep2
stuffCheckBox
test

(un)linkTestItemGroupToTestItemList
testInfoOpenTextNewWindow
testCheck
testSetLocationName
loadtestinfo
scroll test
loadTestRecord
newTestRecord
linkTestFocusOrUnlinkTestFocus
gotoTestItem
step2_OpenInspectionItemsTEST
loadItemRecord
step3_OpenOneItemJustLook
returnToStep3
done
delete_Evidence
OKonInpsection
OKonReport
inspectNextRecord
inspectPreviousRecord
itemNA
inspectAddProblemToFinding
returnToInspectionItems
CHUNK_countInspectedItems
exitAndStopclearCitationMatch
exitAndOrderEvidence
reportNewEvidence
reportDeleteEvidence
reportSelectLocation
probablyNotInUse

returnToStep1
returnToStep2
delete_Finding Copy
testReport

pagePulldown
nextPage
previousPage
showModifier1
showModifier2
newInspectionLocation
deleteInspectionLocation
probablyNotInUse

findInspectionItemValueList
evidenceSpacetime
evidenceDetailSpacetimeDELETE?????
evidenceDetailDELETE?????
deleteInspectionComplement
newAttribute
newEvidenceWindow
evidenceTag
deleteSetupItems
deleteInspectionSetupItem
editReport
CHUNK_gotoItemViaPulldown
zoomReport
unzoomReport
inUsePart1
inUsePart3
deleteRowOfPhotosFromReport
newRowOfPhotos
sortReport
editSectionFocuses
newFocus
deleteFocus
deleteAttribute
gotoDefaultsOrReport
previewReport
reportTagInfo
reportTagDiscovery
reportExitOnRecordLoad
reportPreviewClose
reportClearDiscoveryLink
setupUpdateReportNumber
openDetailWindow !!! FINISH LATER !!!
Print

printThingReport
TOC
CHUNK_insertPageNumbers
CHUNK_pagenumberTheme
CHUNK_pagenumberItem
CHUNK_insertPageNumbersbackOnePage
CHUNK_insertPageNumbersforwardOnePage
tagMenu

backFromTagMenus
unzoomSetup
zoomSetup
gotoSetupReport
returnToSetup
menuNode
menuKey
menuHealth
menuMedium
menuTest
menuTestItem
menuSample
menuCitation
menuReference
menuCopyist
menuPath
menuOrgan
newCitationMenuGroup
newCitationMenuItem
menuRefAddKeyWords
gotoMainFromTestTagMenus
loadItemRecordForTestTagMenu
addTagToTestSubject
loadItemRecordForTestSetupTagMenu
defaultTestLocationMenu
setOrderForSampleOrTest
testAddTestItemTextOrKey
moveTagToNewGroupStep1
moveTagToNewGroupStep1b
moveTagToNewGroupStep2
defaultNodeMenu
defaultHealthMenu
defaultSectionMenu
checkIfLockedOnLearnTagMenus
menuReferenceNodesOrEditors
loadItemRecordForSampleTagMenu
toggleTagMenuWindowView
TgotoCitationMenu
showTag
duplicateTheory
addTagToMainRecord
setDefaultSection
addBackSectionCreatorNode
loadTagRecord
addORremoveTagFromCitationStep1
addORremoveTagFromCitationStep2keyword
addORremoveTagFromCitationStep2node
changeSpellingOfCitationNodes
sortTags
addORremoveRefTagStep1
CHUNKaddMainSectionKeysToTagRecordKeychain_addMode
CHUNKaddMainSectionKeysToTagRecordKeychain
CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain
addORremoveCiteOrRefTLTag
changeSpellingOfKeywordOrNodeTag
changeSpellingOfTagCategory
changeSpellingOfDetailCategory
noCommasAllowed
deleteKeywordTag
deleteNodeTag
deleteMHOCSPtags
addTagSectionKeysToMainRecordKeychain
CHUNKaddLinkToTag
folderPathCheckForForwardSlash
gotoLessLayoutsTag
gotoLessLayoutsTL
gotoLessDetailLayout
gotoMoreDetailLayout
showCited
CHUNKHealthLockedFields
findMode
findModeCancel
findPrimaryTL
findKeyOtherTL
findPrimaryRef
findKeyOtherRef
CHUNKcheckForDragPasteChanges
lock
checkForDraggedPasteChangesIfLocked
insureEqualityOfSpellFields
lockNodesRecords
sampleExit
newTag
sortTLRecordsByOrderNumber
changeTLRecordsSort_Button
probablyNotInUse

loadItemRecordForLearnTagMenuDELETE!!!
menuFind

menuSampleFind
menuNodeFind
menuKeyFind
menuHealthFind
menuTestFind
menuMediumFind
menuCitationFind
menuReferenceFind
menuCopyistFind
menuPathFind
menuOrganFind
findReferernce
pictures

pictureInsert
pictureDelete
pictureExport
clearpicture1
inUsePart2picture1
inUsePart2picture2
clearpicture2
clearpicture3
clearpicture4
inUsePart2picture3
inUsePart2picture4
addLinksPicturesToTagsMode
CHUNKaddPictureToTag
addPicture1ToTag
addPicture2ToTag
addPicture3ToTag
showCitationPicture1inNewWindow
showCitationPicture2inNewWindow
showCitationPicture3inNewWindow
showReferencePicture1
showReferencePicture2
showReferencePicture3
probablyNotInUse

inUsePart2picture3 Copy
inUsePart2picture4 Copy
addPicture2ToTag Copy
learn

showFileInTagandLearnWindows
deleteLearnMainRecord
editLearn
editTestLearn
finishTestLearnEdit
duplicateLearnRecord
learnOpenTextNewWindow
gotoLearnWebsite
findLearnRecord
cancelLearnFind
newLearn
probablyNotInUse

findLearnRecord Copy
reference(citation)

newReference
editReference
CHUNKaddReferenceNodesAndKeywords
addORremoveCitationOrReferenceRefTag
deleteReference
showFileInReferenceWindow
showReference1
showReference2
showReference3
internalReferences
externalReferences
changeSpellingOfReferenceNodes
duplicateReferenceRecord
addModeReferenceLearnToggle
findReferenceRecord
sortReferences
extractCreateDateFromReferenceRecords
REFERENCE LOOP
finishReferenceEdit
editCitation
showLongCitation
showCitation
loadCitation
clearCitationMatch
copyrightHolder
copyrightHolderDeleteEditor
URLcheck
removeTextFormatting
removeTextFormattingAndCommas
formatTitle
showFile2
showFile3
addFileLink4ToTag
addFileLink5ToTag
addFileLink6ToTag
showFolder
openCitationURL
setCitationMatchForAuthors
publisherCheckboxRadioButtonActionPart1
insertTimeInRefTimeField
goToRefRecord
helpReferenceFields
probablyNotInUse

addReferenceNodesAndKeywords Copy
DELETE???loadRecordIDcitationlistlalyout
loadCitation OLD
findReferenceRecord Copy
sharedMainLayoutScripts

copyAndpastTags
backToLearnOrDefaultSetup
backFromSetup
toggleMainWindowView
returnToAddRecordPUTONHOLD!!!!
gotoTimeLogMainWindow
gotoTimeLogLogWindow
stopScriptOniPhone
closeWindow
closeWindowHaltScript
backtoSetup
learn
Exit
help

helpBack
help
libraryHelp

startclose
	Parent Folder: [startclose]	Next Script: [start]
Script Name	startDatabase
Run script with full access privileges	Off
Include In Menu	Yes
Layouts that use this script

Scripts that use this script

    startDatabase
    createEmptyLibrary

Script Definition
Script Steps

    #
    #Check if database is being started by new library script.
    Set Window Title [ Current Window; New Title: "Library Update" ]
    Go to Layout [ “backup” (backup) ]
    Delete All Records [ No dialog ]
    New Record/Request
    If [ backup::newLibrary = "234874920347574weidf792342f9823984" ]
    Show Custom Dialog [ Message: "Are you sure you want to delete the data in " & TEMP::fileName & " to make it a new empty one? If you are not sure, DO NOT CLICK any of the buttons. Instead, check the folder where this library is located and make sure this is a copy of the orignal and not the original. Next click either the stop or proceed button."; Buttons: “stop”, “proceed” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Field [ backup::newLibrary; "" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Exit Script [ ]
    End If
    Go to Layout [ “backup” (backup) ]
    Perform Script [ “createEmptyLibrary” ]
    Set Field [ backup::newLibrary; "" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Exit Script [ ]
    End If
    #
    If [ backup::newLibrary = "newLibrary" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show Custom Dialog [ Message: "1) Create a new, empty library." & ¶ & " 2) Import another library's records into version " & tempSetup::verionNumber & " of the library application."; Buttons: “new”, “import”, “cancel” ]
    If [ Get ( LastMessageChoice ) = 3 ]
    Close Window [ Current Window ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $$OldNodeID; Value:tempSetup::kdefaultNodePrimary ]
    If [ $$OldNodeID = "" ]
    Set Variable [ $$OldNodeID; Value:1 ]
    End If
    Go to Layout [ “backup” (backup) ]
    Perform Script [ “createEmptyLibrary” ]
    Set Field [ backup::newLibrary; "" ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Show Custom Dialog [ Message: "On some imports FileMaker crashes. Cancel this import and duplicate this Empty Library file if you do not have an extra in case this happens. If it does happen, delete the updated library, and try again."; Buttons: “OK”, “cancel” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Close Window [ Current Window ]
    Exit Script [ ]
    End If
    Perform Script [ “update” ]
    Perform Script [ “startDatabase” ]
    Exit Script [ ]
    End If
    End If
    #
    #Check if database is being started by update script.
    Paste [ backup::backup ] [ Select ]
    If [ backup::backup = "update439asdkc;liasdu;irejf.as.dkfupea;lksdfa,sm.eupqoiwendssasdeawsrre5o983498woeirf" ]
    Set Field [ backup::backup; "" ]
    Copy [ backup::filepath ] [ Select ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Close Window [ Current Window ]
    End If
    #
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show All Records
    Delete All Records [ No dialog ]
    New Record/Request
    Set Window Title [ Current Window; New Title: "Setup" ]
    If [ Get ( SystemPlatform ) = - 2 ]
    // New Window [ Name: "Day"; Height: Get (WindowDesktopHeight) - 21; Width: 344; Top: 0; Left: Get (ScreenWidth) - 688 ]
    Move/Resize Window [ Current Window; Height: Get (WindowDesktopHeight) - 21; Width: Get (ScreenWidth) / 2; Top: 0; Left: 0 ]
    Else
    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: 0 ]
    End If
    Go to Field [ ]
    #
    #goto Tag Menus window
    If [ Get ( SystemPlatform ) = - 2 ]
    New Window [ Name: "Tag Menus"; Height: Get (WindowDesktopHeight) - 21; Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 2 ]
    Else
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 2 ]
    End If
    Go to Layout [ “defaultHealth” (tagMenus) ]
    #
    #
    #
    #Show regular menus if Admin logs in only.
    Show/Hide Text Ruler [ Hide ]
    If [ Get ( AccountName ) = "Admin" ]
    Show/Hide Status Area [ Hide ]
    Else
    Show/Hide Status Area [ Lock; Hide ]
    End If
    #
    #
    Perform Script [ “defaultSectionMenu” ]
    Perform Script [ “setDefaultSection” ]
    Select Window [ Name: "Setup"; Current file ]
    #
    Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    Show All Records
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ Get ( FilePath ) = MemorySwitch::path ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ Get ( FilePath ) ≠ MemorySwitch::path ]
    New Record/Request
    Set Field [ MemorySwitch::path; TEMP::filePath ]
    Set Field [ MemorySwitch::name; TEMP::fileName ]
    End If
    Set Field [ MemorySwitch::currentLibraryPath; Get ( FilePath ) ]
    #
    #Report version number to Memory Switch Table.
    Set Field [ MemorySwitch::versionLibrary; tempSetup::verionNumber ]
    #
    Go to Layout [ “defaultSetup” (tempSetup) ]
    #
    #Show regular menus if Admin logs in only.
    Show/Hide Text Ruler [ Hide ]
    If [ Get ( AccountName ) = "Admin" ]
    Show/Hide Status Area [ Hide ]
    Install Menu Set [ “[Standard FileMaker Menus]” ]
    Else
    Show/Hide Status Area [ Lock; Hide ]
    Install Menu Set [ “HGT” ]
    End If
    #
    If [ $$import = 1 ]
    Set Variable [ $$import ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “defaultNodeMenu” ]
    Show Custom Dialog [ Message: "Import is almost complete! Now select yourself as the default node (the one creating new records). Last, select the default copyright and your import will be done!"; Buttons: “OK” ]
    #
    End If
    #

Fields used in this script

    backup::newLibrary
    TEMP::fileName
    tempSetup::verionNumber
    tempSetup::kdefaultNodePrimary
    backup::backup
    backup::filepath
    MemorySwitch::path
    TEMP::filePath
    MemorySwitch::name
    MemorySwitch::currentLibraryPath
    MemorySwitch::versionLibrary

Scripts used in this script

    createEmptyLibrary
    update
    startDatabase
    defaultSectionMenu
    setDefaultSection
    defaultNodeMenu

Layouts used in this script

    backup
    defaultSetup
    defaultHealth
    startMemorySwitch

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script

    [Standard FileMaker Menus]
    HGT


Previous Script: [startDatabase]	Parent Folder: [startclose]	Next Script: [closeLibrary]
Script Name	start
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Show/Hide Status Area [ Lock; Hide ]
    Show/Hide Text Ruler [ Hide ]
    #
    #capture filepath for use in importing this files data
    Go to Layout [ “tempStart” (TEMP) ]
    New Record/Request
    Paste [ TEMP::import ] [ Select ]
    Set Field [ TEMP::filePath; Get (FilePath) ]
    If [ TEMP::import = "adflki3ina;lkfjie8;la;lkdvnma;ldieiasoerueoilanldf83984798374iwuhelfkjdlsidufioawkel" ]
    Set Window Title [ Current Window; New Title: "import" ]
    End If
    Set Field [ TEMP::import; "" ]
    Copy [ TEMP::filePath ] [ Select ]
    Delete Record/Request [ No dialog ]
    Close Window [ Name: "import"; Current file ]
    Go to Layout [ original layout ]

Fields used in this script

    TEMP::import
    TEMP::filePath

Scripts used in this script

Layouts used in this script

    tempStart

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [start]	Parent Folder: [startclose]	Next Script: [moreInfo]
Script Name	closeLibrary
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    // Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    // Show All Records
    // Go to Record/Request/Page [ First ]
    // Loop
    // Exit Loop If [ tempSetup::filePath ≠ MemorySwitch::path ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // If [ tempSetup::filePath ≠ MemorySwitch::path ]
    // New Record/Request
    // Set Field [ MemorySwitch::path; TEMP::filePath ]
    // Set Field [ MemorySwitch::name; TEMP::fileName ]
    // End If
    Close Window [ Current Window ]
    Close Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    tempSetup::filePath
    MemorySwitch::path
    TEMP::filePath
    TEMP::fileName
    MemorySwitch::name

Scripts used in this script

Layouts used in this script

    startMemorySwitch

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [closeLibrary]	Parent Folder: [startclose]
Script Name	moreInfo
Run script with full access privileges	Off
Include In Menu	Yes
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    New Window [ Name: "More Info"; Left: Get ( WindowDesktopWidth ) - (Get ( WindowDesktopWidth ) / 2 ) ]
    Go to Layout [ “moreInfo” (tempSetup) ]
    Adjust Window [ Resize to Fit ]
    Pause/Resume Script [ Indefinitely ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    moreInfo

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


libraryNewOrUpdate
	Parent Folder: [libraryNewOrUpdate]	Next Script: [update]
Script Name	switchTestList
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If the user selected the list currently showing then
    #stop the script.
    If [ TEMP::ktestItemList = TEMP::ktestItemListOLD ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    #
    #switch to the selected test, which may or may
    #not have a test-item list.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::match; TEMP::ktestItemList ]
    Perform Find [ ]
    #
    #If there is no list, then inform the user of this fact
    #at the end of the script, after the name of the list
    #is updated. To do that capture the 401 error message.
    If [ Get (LastError) = 401 ]
    Set Variable [ $emptyList; Value:1 ]
    End If
    Set Variable [ $$stopLoadTagRecord ]
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::_Lgroup; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    #assign newly selected test item list to test
    Select Window [ Name: "Setup"; Current file ]
    Set Field [ test::ktestItemList; TEMP::ktestItemList ]
    #
    #get the switched-to-test's name.
    #
    #The reason for this whole section of the script
    #(getting a test name) is that there is no relationship
    #that can be made that would match the key of
    #of the named test to this test and thus unlock
    #and so allow the layout to show this test name.
    #This is because the key to unlock the display of
    #a test's name is in a keychain field where many
    #keys may exist in list. Filemaker cannot match
    #a lock in one table to list of keys in another table.
    #There must be only one key in a field in order
    #for Filemaker to know which key to use in a lock.
    #The database does not have the intellegence or
    #programming to search through a list of keys
    #to make a match to a lock field in another table.
    #Thus, in order to display the name of the test in use
    #we must have the system put that name in a temp
    #field with global storage, which then allows it
    #to be displayed on any layout where that temp
    #field is displayed. No relationship between the
    #the temp table and the layout's table is required
    #as long as the temp field is a global field, meaning
    #all data in the field is the same for every record
    #in the temp table.
    #
    #Get the ID of the current record so it can be
    #looped back to.
    Set Variable [ $currentTest; Value:test::_Ltest ]
    #
    #Turn of the record load triggered script to speed
    #up this loop search.
    Set Variable [ $$ID; Value:"ignore" ]
    #
    #Go to the first record and then test it and every
    #other record until the test in question is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ test::_Ltest = TEMP::ktestItemList ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Set a temp field with this test's name. This name
    #field will then be used to show this test's name on
    #the Tag Menus layout for setupTestItems.
    Set Field [ TEMP::ktestListtTestName; test::testName ]
    #
    #go back to current test.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ test::_Ltest = $currentTest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$ID; Value:$currentTest ]
    Refresh Window
    #
    #make new and old tag keys identical, so when
    #a switch is made this copy can be used as the old key
    #in the first part of this script. Switching automatically
    #replaces the current key with whatever is selected,
    #thus the need to preserve a copy now, before a switch is made.
    Set Field [ TEMP::ktestItemListOLD; TEMP::ktestItemList ]
    #
    #Update key used for the move pulldown to the new test.
    Set Field [ TEMP::mTag; TEMP::ktestItemList ]
    #
    #return to tag layout and show all selected items
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    Scroll Window [ Home ]
    Go to Field [ ]
    #
    #If list is empty, now tell the user this so they don't
    #think the system failed because nothing was found.
    If [ $emptyList = 1 ]
    Show Custom Dialog [ Message: "This test-item list contains no test items. You are welcome to create new ones."; Buttons: “OK” ]
    End If

Fields used in this script

    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    ruleTagMenuTestGroups::match
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::_Lgroup
    tagMenus::orderOrLock
    tagMenus::tag
    test::ktestItemList
    test::_Ltest
    test::testName
    TEMP::ktestListtTestName
    TEMP::mTag

Scripts used in this script

Layouts used in this script

    setupTestItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [switchTestList]	Parent Folder: [libraryNewOrUpdate]	Next Script: [createEmptyLibrary]
Script Name	update
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    startDatabase

Script Definition
Script Steps

    Go to Layout [ “backup” (backup) ]
    Delete All Records [ No dialog ]
    New Record/Request
    Set Field [ backup::backup; "update439asdkc;liasdu;irejf.as.dkfupea;lksdfa,sm.eupqoiwendssasdeawsrre5o983498woeirf" ]
    Cut [ backup::backup ] [ Select ]
    #2 open file and determine its location (path) then close it after its location has been pasted using that file's open script into the main data file
    #file is unknown so user is given the opportunity to point the database to the backup copy of their choice
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Open File [ <unknown> ]
    If [ Get (LastError) = 1 ]
    Close Window [ Current Window ]
    Exit Script [ ]
    End If
    #
    #Make sure the file has been opened by this script.
    Go to Layout [ “backup” (backup) ]
    Paste [ backup::backup ] [ Select; No style ]
    If [ "update439asdkc;liasdu;irejf.as.dkfupea;lksdfa,sm.eupqoiwendssasdeawsrre5o983498woeirf" = backup::backup ]
    Show Custom Dialog [ Message: "Close the selected library. Then click update again to add its records to this updated version of the library application."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $filepath; Value:backup::backup ]
    #
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “tagTestSubjectLocation”; Method: Add; Character Set: “Unicode”; Field Mapping: Source field 1 import to tagTestSubjectLocation::knode Source field 2 import to tagTestSubjectLocation::kfocus Source field 3 import to tagTestSubjectLocation::_LtestSubjectLocation Source field 4 import to tagTestSubjectLocation::kfocusAttribute1 Source field 5 import to tagTestSubjectLocation::focusName Source field 6 import to tagTestSubjectLocation::inUse Source field 7 import to tagTestSubjectLocation::order Source field 8 import to tagTestSubjectLocation::TimeStart Source field 9 import to tagTestSubjectLocation::TimeTotal Source field 10 import to tagTestSubjectLocation::_number Source field 11 import to tagTestSubjectLocation::kfocusAttribute2 Source field 12 import to tagTestSubjectLocation::ksection Source field 13 import to tagTestSubjectLocation::reportNumber Source field 14 import to tagTestSubjectLocation::kRecordCreatorNode ] [ No dialog ]
    #
    Go to Layout [ “tableTest” (test) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “test”; Method: Add; Character Set: “Unicode”; Field Mapping: Source field 1 import to test::_Ltest Source field 2 import to test::ktestGroup Source field 3 import to test::_number Source field 4 import to test::kcfocusALL Source field 5 import to test::testName Source field 6 import to test::order Source field 7 import to test::retire Source field 8 import to test::kgtester Source field 9 import to test::glocationNameGlobal Source field 10 import to test::gcontactNameGlobal Source field 11 import to test::kgaudienceLocation Source field 12 import to test::gprogressGlobal Source field 13 import to test::ksection Source field 14 import to test::kgreportNumber Source field 15 import to test::mtestGroup Source field 16 import to test::ktestItemList Source field 17 import to test::rule Source field 18 import to test::kRecordCreatorNode Source field 19 import to test::kRecordModifierNode Source field 20 import to test::RecordModifyDate Source field 21 import to test::testNameRevert ] [ No dialog ]
    #
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “testlearn”; Method: Add; Character Set: “Unicode”; Field Mapping: Source field 1 import to testlearn::_Ltestlearn Source field 2 import to testlearn::ktestSubject Source field 3 import to testlearn::_Number Source field 4 import to testlearn::ktest Source field 5 import to testlearn::Caption Source field 6 import to testlearn::Picture Source field 7 import to testlearn::Location Source field 8 import to testlearn::inUse Source field 9 import to testlearn::kaudienceLocation Source field 10 import to testlearn::InspectionItemCount Source field 11 import to testlearn::CheckboxCaption Source field 12 import to testlearn::recordnumberglobal Source field 13 import to testlearn::recordcountglobal Source field 14 import to testlearn::InspectionItemCountLocation Source field 15 import to testlearn::OK Source field 16 import to testlearn::kcsection Source field 17 import to testlearn::backupPhotoNumber Source field 18 import to testlearn::TimeStart Source field 19 import to testlearn::TimeStop Source field 20 import to testlearn::TimeTotal Source field 21 import to testlearn::kreportNumber Source field 22 import to testlearn::timestamp Source field 24 import to testlearn::orderDiscovery Source field 25 import to testlearn::kcKeywordOther Source field 26 import to testlearn::kNodeOther Source field 27 import to testlearn::kHealth Source field 28 import to testlearn::kNodePrimary Source field 29 import to testlearn::kmedium Source field 30 import to testlearn::kcitation Source field 31 import to testlearn::kfileLocation Source field 32 import to testlearn::kfolderPath Source field 33 import to testlearn::kKeywordPrimary Source field 34 import to testlearn::OtherKeyWords Source field 35 import to testlearn::NodeOthers Source field 36 import to testlearn::URL Source field 37 import to testlearn::filename Source field 38 import to testlearn::kcreference Source field 40 import to testlearn::filterFind Source field 41 import to testlearn::kRecordCreatorNode Source field 42 import to testlearn::kRecordModifierNode Source field 43 import to testlearn::RecordModifyDate Source field 44 import to testlearn::incomplete Source field 46 import to testlearn::copyrightYear Source field 47 import to testlearn::URLPubDate Source field 48 import to testlearn::kcsample Source field 49 import to testlearn::gkaudienceLocation Source field 50 import to testlearn::kctest Source field 51 import to testlearn::orderTest Source field 52 import to testlearn::title Source field 53 import to testlearn::kctestItem Source field 54 import to testlearn::organEmailRecipient Source field 55 import to testlearn::korgan Source field 56 import to testlearn::kcopyist Source field 57 import to testlearn::emailDate Source field 59 import to testlearn::sampleCasePoint ] [ No dialog ]
    #
    Go to Layout [ “tableTag” (tagTable) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “tagTable”; Method: Update matching; Add remaining; Character Set: “Unicode”; Field Mapping: Source field 1 import to tagTable::kGroupOrTest Source field 2 match with tagTable::_Ltag Source field 3 import to tagTable::tag Source field 4 import to tagTable::orderOrLock Source field 5 import to tagTable::ksection Source field 6 import to tagTable::_Number Source field 7 import to tagTable::match Source field 8 import to tagTable::tagSpelling Source field 9 import to tagTable::kcsection Source field 10 import to tagTable::Kpicture1 Source field 11 import to tagTable::notesOrHealth Source field 12 import to tagTable::Ktitle1 Source field 13 import to tagTable::kfile Source field 15 import to tagTable::Kpicture2 Source field 17 import to tagTable::Kpicture3 Source field 19 import to tagTable::Ktitle2 Source field 20 import to tagTable::Ktitle3 Source field 24 import to tagTable::kRecordCreatorNode Source field 25 import to tagTable::kRecordModifierNode ] [ No dialog ]
    #
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “groupTest”; Method: Update matching; Add remaining; Character Set: “Unicode”; Field Mapping: Source field 1 match with groupTest::_Lgroup Source field 2 import to groupTest::_Number Source field 3 import to groupTest::match Source field 4 import to groupTest::name Source field 5 import to groupTest::ksection Source field 6 import to groupTest::defaultSectionInfo Source field 7 import to groupTest::testReportPicture Source field 8 import to groupTest::CaptionORinuseCheck Source field 9 import to groupTest::URLORHealth Source field 10 import to groupTest::order Source field 11 import to groupTest::nameSpelling Source field 12 import to groupTest::kRecordCreatorNode Source field 13 import to groupTest::kSectionCreatorNodesCreator Source field 14 import to groupTest::aboutSection ] [ No dialog ]
    #
    Go to Layout [ “tableReference” (reference) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “reference”; Method: Update matching; Add remaining; Character Set: “Unicode”; Field Mapping: Source field 1 import to reference::_Number Source field 2 match with reference::_Lreference Source field 3 import to reference::ktestSubject Source field 4 import to reference::ktest Source field 5 import to reference::kcsection Source field 6 import to reference::knodePrimary Source field 7 import to reference::pubYear Source field 8 import to reference::URL Source field 9 import to reference::URLdate Source field 10 import to reference::Title Source field 11 import to reference::korgan Source field 12 import to reference::volumeNumber Source field 13 import to reference::PubDate Source field 14 import to reference::pageNumberRange Source field 15 import to reference::kcopyist Source field 16 import to reference::OrginalCitation Source field 17 import to reference::kcopyrightType Source field 18 import to reference::kHealth Source field 19 import to reference::kmedium Source field 20 import to reference::kkeywordOther Source field 21 import to reference::kkeywordPrimary Source field 22 import to reference::thoughtsNotesEtc Source field 23 import to reference::kfolderpath Source field 24 import to reference::fileName Source field 27 import to reference::referenceNodes Source field 28 import to reference::CopyrightYear Source field 29 import to reference::kcopyrightHolder Source field 30 import to reference::referenceDump Source field 31 import to reference::knodeOther Source field 32 import to reference::NodeOthers Source field 33 import to reference::OtherKeyWords Source field 34 import to reference::referenceNodesOLD Source field 35 import to reference::filterFind Source field 36 import to reference::picture Source field 37 import to reference::kfileLocation Source field 38 import to reference::rights Source field 39 import to reference::mFileLocation Source field 40 import to reference::kcitation Source field 41 import to reference::incomplete Source field 42 import to reference::lock Source field 44 import to reference::kcreatorNode Source field 45 import to reference::kmodifierNode Source field 46 import to reference::modifyDate Source field 48 import to reference::TimeRange Source field 51 import to reference::createDate Source field 52 import to reference::show Source field 53 import to reference::library only Source field 54 import to reference::URLdoi Source field 55 import to reference::issueNumber Source field 56 import to reference::publisherLocation Source field 57 import to reference::compilationTitle Source field 58 import to reference::compilationEditors Source field 59 import to reference::kmedia Source field 60 import to reference::kmediaType Source field 61 import to reference::compilationNumberOfEditors Source field 62 import to reference::pubYearMonthRange Source field 63 import to reference::ISBN Source field 64 import to reference::pubDateOther Source field 65 import to reference::bookChapter Source field 66 import to reference::letterDate Source field 67 import to reference::compilationAbbr Source field 68 import to reference::emailRecipient Source field 69 import to reference::conferenceIntroWords Source field 70 import to reference::conferenceTitle Source field 71 import to reference::conferenceSubTitle Source field 72 import to reference::conferenceLocation Source field 73 import to reference::conferenceDate Source field 74 import to reference::conferenceGroupName Source field 75 import to reference::TypeOfMediumOther Source field 76 import to reference::GovernmentDocInfo Source field 77 import to reference::governmentAuthor Source field 78 import to reference::ISSN Source field 79 import to reference::publisherTypeAlternative Source field 80 import to reference::copyrightOtherHolder Source field 81 import to reference::publisherTypeOther Source field 82 import to reference::pageNumberOther Source field 83 import to reference::dissertationThesisUniversity ] [ No dialog ]
    #
    Go to Layout [ “tableReport” (report) ]
    Show All Records
    Import Records [ Source: “$filepath”; Target: “report”; Method: Add; Character Set: “Unicode”; Field Mapping: Source field 1 import to report::_Lreport Source field 2 import to report::_Number Source field 3 import to report::ktestSubject Source field 4 import to report::_kfContactGeography Source field 5 import to report::general_info Source field 6 import to report::ktest Source field 7 import to report::krecommendation Source field 8 import to report::order Source field 9 import to report::Picture Source field 10 import to report::kthingRecommendationID Source field 11 import to report::kgeneralSpecificItemRecommendationID Source field 12 import to report::_kfPhoto Source field 13 import to report::_kfContactGeography2 Source field 14 import to report::_kfContactGeography3 Source field 15 import to report::_kfContactGeography4 Source field 16 import to report::_kfContactGeography5 Source field 17 import to report::PictureCaption Source field 18 import to report::textMain Source field 19 import to report::textPhotoRow1 Source field 20 import to report::pagenumberItem Source field 21 import to report::CurrentRecord Source field 22 import to report::_kfPhoto2 Source field 23 import to report::_kfPhoto3 Source field 24 import to report::_kfPhoto4 Source field 25 import to report::pagenumberTheme Source field 26 import to report::TOC Source field 27 import to report::TOCnumbers Source field 28 import to report::ReportCover Source field 29 import to report::ReportPDFtitle Source field 30 import to report::kreportNumber Source field 31 import to report::ksection Source field 32 import to report::kRecordCreatorNode Source field 33 import to report::kRecordModifierNode Source field 34 import to report::RecordModifyDate Source field 35 import to report::khealth Source field 36 import to report::textPhotoRow2 ] [ No dialog ]
    #
    Set Field [ backup::backup; "" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “defaultNode1” (tagMenus) ]
    // Perform Script [ “defaultNodeMenu” ]
    Select Window [ Name: "Setup"; Current file ]
    Go to Layout [ “backup” (backup) ]
    Set Field [ backup::newLibrary; "" ]
    Set Field [ backup::backup; "" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    #
    Set Variable [ $$import; Value:1 ]
    #

Fields used in this script

    backup::backup
    backup::newLibrary

Scripts used in this script

    defaultNodeMenu

Layouts used in this script

    backup
    defaultSetup
    tableTestSubjectFocus
    tableTest
    tableTestLearn
    tableTag
    tableGroupTag
    tableReference
    tableReport
    defaultNode1

Tables used in this script

Table occurrences used by this script

    tagTestSubjectLocation
    test
    testlearn
    tagTable
    groupTest
    reference
    report

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [update]	Parent Folder: [libraryNewOrUpdate]	Next Script: [copyPrimaryNodeID]
Script Name	createEmptyLibrary
Run script with full access privileges	Off
Include In Menu	Yes
Layouts that use this script

Scripts that use this script

    startDatabase

Script Definition
Script Steps

    #
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    If [ backup::newLibrary = "" ]
    Show Custom Dialog [ Message: "Create a new empty library?"; Buttons: “cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Exit Script [ ]
    End If
    End If
    #
    #If user decides to create a new library...
    If [ backup::newLibrary ≠ "234874920347574weidf792342f9823984" and backup::newLibrary ≠ "newLibrary" ]
    #
    #Go to the backup layout, insure there is a record, and
    #set with the code to create an empty library.
    Go to Layout [ “backup” (backup) ]
    Delete All Records [ No dialog ]
    New Record/Request
    Set Field [ backup::newLibrary; "234874920347574weidf792342f9823984" ]
    #
    #Ask user what to name this new library.
    Go to Layout [ original layout ]
    #
    #A copy not a clone must be created because some
    #records are neccessary to running the Library and
    #are removed when cloning the Library.
    Save a Copy as [ ] [ copy of current file ]
    #
    #If the user decides to cancel the script then stop the process.
    If [ Get (LastError) = 1 ]
    Go to Layout [ “backup” (backup) ]
    Set Field [ backup::newLibrary; "" ]
    Go to Layout [ original layout ]
    Exit Script [ ]
    End If
    #
    #Reset the new library code to blank and return to main screen.
    Go to Layout [ “backup” (backup) ]
    Set Field [ backup::newLibrary; "" ]
    Go to Layout [ original layout ]
    Show Custom Dialog [ Message: "Now open your new library. You will be asked if you want to delete the records in it. Make sure it is the copy of your current library file and then proceed with the delete."; Buttons: “OK” ]
    Exit Script [ ]
    #
    Else If [ backup::newLibrary = "234874920347574weidf792342f9823984" or backup::newLibrary = "newLibrary" ]
    Set Field [ backup::newLibrary; "" ]
    #
    Go to Layout [ “tableTemp” (TEMP) ]
    New Record/Request
    Go to Field [ TEMP::addTestItemGroup ]
    Loop
    Set Field [ "" ]
    Exit Loop If [ Get ( ActiveFieldName ) = "userLocationName" ]
    Go to Next Field
    End Loop
    #
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Show All Records
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableTest” (test) ]
    Show All Records
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Show All Records
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Perform Find [ Specified Find Requests: Omit Records; Criteria: groupTest::order: “*"lock"” ] [ Restore ]
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableTag” (tagTable) ]
    Perform Find [ Specified Find Requests: Omit Records; Criteria: tagTable::orderOrLock: “lock” ] [ Restore ]
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableReference” (reference) ]
    Enter Find Mode [ ]
    Set Field [ reference::lock; "lock" ]
    Perform Find [ ]
    Show Omitted Only
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableReport” (report) ]
    Show All Records
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “defaultSetup” (tempSetup) ]
    #
    Perform Script [ “startDatabase” ]
    Set Field [ tempSetup::fileName; Get ( FileName ) ]
    #
    #Create first section.
    Set Field [ TEMP::kdefaultNodePrimary; $$OldNodeID ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “defaultSections” (ruleSection) ]
    Perform Script [ “newSectionOnSectionLayout” ]
    Set Field [ ruleSection::name ]
    Set Field [ TEMP::kdefaultNodePrimary; "" ]
    If [ $$OldNodeID = 1 ]
    Set Variable [ $$OldNodeID ]
    End If
    #
    #Create first node.
    Set Variable [ $$stopAddBack; Value:1 ]
    Perform Script [ “defaultNodeMenu” ]
    Perform Script [ “newCitationMenuGroup” ]
    If [ $$OldNodeID ≠ "" ]
    Set Field [ tagMenus::_Ltag; $$OldNodeID ]
    End If
    Set Variable [ $$OldNodeID; Value:tagMenus::_Ltag ]
    Set Field [ ruleTagMenuGroups::kRecordCreatorNode; $$OldNodeID ]
    Set Field [ tagMenus::tag; "lastName, firstName" ]
    Perform Script [ “addTagToMainRecord” ]
    Set Variable [ $$stopAddBack ]
    #
    #Assign node to first created section as its creator.
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Perform Find [ Specified Find Requests: Find Records; Criteria: groupTest::kRecordCreatorNode: “1” ] [ Restore ]
    Sort Records [ Specified Sort Order: groupTest::match; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Set Field [ groupTest::kRecordCreatorNode; $$OldNodeID ]
    Set Field [ groupTest::kSectionCreatorNodesCreator; $$OldNodeID ]
    Set Field [ groupTest::aboutSection; "This library is for noting what we learn about _________________, collecting references to it, and testing or collecting samples of ___________________ to improve the quality of our thinking and doing or __________________ quality (if _________________ is a thing not a person)." ]
    #
    #Assign node to first created node group as its creator.
    Go to Record/Request/Page [ Next ]
    Set Field [ groupTest::kRecordCreatorNode; $$OldNodeID ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    #
    #Inform user of next steps.
    If [ $$OldNodeID ≠ "" ]
    Show Custom Dialog [ Message: "Change the name of the first node to your name since you will be the creator of new library records."; Buttons: “OK” ]
    Set Variable [ $$OldNodeID ]
    Else
    Show Custom Dialog [ Message: "Change the name of the first node to your name since you will be the creator of new library records."; Buttons: “OK” ]
    End If
    End If
    #

Fields used in this script

    backup::newLibrary
    TEMP::addTestItemGroup
    groupTest::order
    tagTable::orderOrLock
    reference::lock
    tempSetup::fileName
    TEMP::kdefaultNodePrimary
    ruleSection::name
    tagMenus::_Ltag
    ruleTagMenuGroups::kRecordCreatorNode
    tagMenus::tag
    groupTest::kRecordCreatorNode
    groupTest::match
    groupTest::kSectionCreatorNodesCreator
    groupTest::aboutSection

Scripts used in this script

    startDatabase
    newSectionOnSectionLayout
    defaultNodeMenu
    newCitationMenuGroup
    addTagToMainRecord

Layouts used in this script

    backup
    tableTemp
    tableTestSubjectFocus
    tableTest
    tableTestLearn
    tableGroupTag
    tableTag
    tableReference
    tableReport
    defaultSetup
    defaultSections

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [createEmptyLibrary]	Parent Folder: [libraryNewOrUpdate]	Next Script: [sampleCopyForPasting]
Script Name	copyPrimaryNodeID
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    Copy [ tempSetup::CopyNodeIDforNewDatabase ] [ Select ]
    Go to Field [ ]
    Show Custom Dialog [ Message: tempSetup::DEFAULTNodePrimaryName & "'s ID number " & tempSetup::kdefaultNodePrimary & " has been copied."; Buttons: “OK” ]
    #

Fields used in this script

    tempSetup::CopyNodeIDforNewDatabase
    tempSetup::DEFAULTNodePrimaryName
    tempSetup::kdefaultNodePrimary

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [copyPrimaryNodeID]	Parent Folder: [libraryNewOrUpdate]	Next Script: [sampleCopyCopyText]
Script Name	sampleCopyForPasting
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #I commonly click the share button when I do not mean
    #click it, so these next two question help the user
    #stop this process if it was not intential. They also
    #help the user understand that if they proceed how long
    #it is likely to take, so they don't become frustrated.
    If [ Get ( FoundCount ) > 999 and Get ( LayoutName ) ≠ "learn4EDIT" ]
    Show Custom Dialog [ Message: "FYI: There are more than 1000 records to process. This may take a few minutes. Continue?"; Buttons: “Yes”, “No” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Exit Script [ ]
    End If
    End If
    If [ Get ( FoundCount ) > 100 and Get ( LayoutName ) ≠ "learn4EDIT" ]
    Show Custom Dialog [ Message: "FYI: There are more than 100 and less than 1000 records to process. This may take a minute or more. Continue?"; Buttons: “Yes”, “No” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Exit Script [ ]
    End If
    End If
    #
    #Begin process of show user selected records and their references.
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $layoutName; Value:Get ( LayoutName ) ]
    Close Window [ Name: "Print/Copy"; Current file ]
    New Window [ Name: "Print/Copy" ]
    Go to Layout [ “learnMenuSample” (tagMenus) ]
    If [ $$citationMatch = "sample" ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $$tagsample ]
    Perform Find [ ]
    If [ tagMenus::notesOrHealth = "" ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Name: "Print/Copy"; Current file ]
    Show Custom Dialog [ Message: "Select a copyright from the pulldown menu for your theory in the Tag Menus window. If you are making a case, you probably need to select a no-remix copyright so all your points and evidence are kept together by anyone copying your work."; Buttons: “OK” ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    Else If [ Get (LastError) = 400 ]
    Go to Layout [ “learnPreviewLayout” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    End If
    End If
    Go to Layout [ “learnPreviewLayout” (testlearn) ]
    #
    #If user is in QV, then find any linked learn records.
    If [ $layoutName = "learn4EDIT" ]
    Set Variable [ $findLinkedLearnRecords; Value:testlearn::_Ltestlearn ]
    Loop
    Go to Object [ Object Name: "ref2" ]
    Exit Loop If [ Get (LastError) = 101 ]
    Set Variable [ $findLinkedLearnRecords; Value:refTestLearn::_Ltestlearn & ¶ & $findLinkedLearnRecords ]
    Go to Portal Row [ Select; Next; Exit after last ]
    End Loop
    #
    #Determine how many keys there are.
    Set Variable [ $numberOfKeys; Value:ValueCount ($findLinkedLearnRecords ) ]
    #
    #Find 1st record.
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; GetValue ( $findLinkedLearnRecords ; $numberOfKeys ) ]
    Perform Find [ ]
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    #
    If [ $numberOfKeys ≠ 0 ]
    Go to Layout [ “learn4EDIT” (testlearn) ]
    Show Custom Dialog [ Message: "The ideas expressed in this record are linked to ideas from previous records. Do you want to also see these?"; Buttons: “Yes”, “No” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Layout [ “learnPreviewLayout” (testlearn) ]
    #
    #Loop thru each key to expand found records until
    #all linked records have been found.
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeys = 0 ]
    #
    #Find record.
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; GetValue ( $findLinkedLearnRecords ; $numberOfKeys ) ]
    Extend Found Set [ ]
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    End Loop
    #
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Else
    Go to Layout [ “learnPreviewLayout” (testlearn) ]
    End If
    End If
    #
    End If
    #
    #Now gather up and add references linked to all records.
    Set Variable [ $point; Value:1 ]
    Set Variable [ $evidence; Value:1 ]
    Go to Record/Request/Page [ First ]
    #
    Loop
    Set Variable [ $copy; Value://previous records Case ( $copy = "" ; "" ; $copy & ¶ & ¶) & //text Case ( testlearn::sampleCasePoint = "" ; $point & "." & $evidence & //node TextColor ( Case ( testlearn::kcitation ≠ "" ; " Quote from cited work below." ; " [" & Case ( tagTLNodePrimary::tag = "" and testlearn::NodeOthers = "" ; TextStyleAdd ( "author not entered" ; Italic ) ; tagTLNodePrimary::tag ≠ "" ; tagTLNodePrimary::tag ) & Case ( testlearn::NodeOthers = "" ; "" ; "; " & testlearn::NodeOthers) & //timestamp " " & testlearn::timestamp & "]" ) ; RGB ( 119 ; 119 ; 119 ) ) & ¶ & //main text TextFont ( testlearn::Caption ; "Georgia" ) ; $point & TextFont ( testlearn::Caption ; "Georgia" ) ) & ¶ & //grey remain text TextColor ( //keyword Case ( testlearn::OtherKeyWords ≠ "" or testlearn::kKeywordPrimary ≠ "" ; ¶ & "keywords - " & //primary keyword tagTLKeywordPrimary::tag & Case ( testlearn::OtherKeyWords = "" ; "" ; //other keyword Case ( testlearn::kKeywordPrimary ≠ "" ; ", " & testlearn::OtherKeyWords ; testlearn::OtherKeyWords ) ) ) & //URL Case ( testlearn::URL ≠ "" ; ¶ & testlearn::URL & //URLdate Case ( testlearn::URLPubDate ≠ "" ; " (link validated " & testlearn::URLPubDate & ")" ; " (link validity unavailable)") ; "" ) //finsih text color ; RGB ( 119 ; 119 ; 119 ) ) ]
    #
    #Increase evidence number if point is the same.
    If [ testlearn::sampleCasePoint = "" ]
    Set Variable [ $evidence; Value:$evidence + 1 ]
    Else
    Set Variable [ $evidence; Value:1 ]
    End If
    If [ testlearn::kcreference ≠ "" ]
    Go to Object [ Object Name: "ref1" ]
    If [ refReference::referenceForReferenceWindow ≠ "" ]
    Set Variable [ $copy; Value:$copy & ¶ & //grey text TextColor ( //references Case ( testlearn::kcreference ≠ "" ; "References" ; "" ) //finsih text color ; RGB ( 119 ; 119 ; 119 ) ) ]
    Loop
    Go to Object [ Object Name: "ref1" ]
    Exit Loop If [ Get (LastError) = 101 ]
    Set Variable [ $copy; Value:Case ( Right ( $copy ; 10 ) = "References" ; $copy & ¶ & //grey text TextColor ( refReference::referenceForReferenceWindow ; RGB ( 119 ; 119 ; 119 ) ) ; $copy & ¶ & ¶ & //grey text TextColor ( refReference::referenceForReferenceWindow ; RGB ( 119 ; 119 ; 119 ) ) ) ]
    Go to Portal Row [ Select; Next; Exit after last ]
    End Loop
    End If
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    Set Variable [ $copy; Value:$copy & ¶ & //grey text TextColor ( "_______________________________________________" ; RGB ( 119 ; 119 ; 119 ) ) ]
    Exit Loop If [ ( FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 1 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 2 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 3 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 4 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 5 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 6 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 7 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 8 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 9 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 10 ) ; 4 ; 42 ) ; $$tagSample & "¶" ) = $$tagSample & ¶ ) ≠ 1 and $$tagSample ≠ "" ]
    #
    #Increase point number if point is different.
    If [ testlearn::sampleCasePoint ≠ "" ]
    Set Variable [ $point; Value:$point + 1 ]
    End If
    End Loop
    #
    #Now get sample title and previous dates of
    #publication for this sample if there are any.
    If [ $$citationMatch = "Sample" ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $sample; Value://Sample Title TextStyleAdd ( tagMenus::tag ; Titlecase ) & ¶ & Case ( learnSampleWebsite::URLPubDate = "" ; //author and copyright date TEMP::DEFAULTNodePrimaryName & " " & Month ( Get ( CurrentDate ) ) & "/" & Day ( Get ( CurrentDate ) ) & "/" & Year ( Get ( CurrentDate ) ) & " " ; //author and copyright nodeLockTagMenus::tag & " " & Month ( learnSampleWebsite::URLPubDate ) & "/" & Day ( learnSampleWebsite::URLPubDate ) & "/" & Year ( learnSampleWebsite::URLPubDate ) & " " ) & sampleCopyright::tag & " " & //title for history ¶ & "Publication History" & Case ( learnSampleWebsite::URL = "" ; ¶ & "(This posting is the first publication of this version of the theory and presentation of supporting evidence.)" ) ]
    // Set Variable [ $sample; Value://Sample Title $sample & ¶ & sampleCopyright::tag & " " & Month ( learnSampleWebsite::URLPubDate ) & "/" & Day ( learnSampleWebsite::URLPubDate ) & "/" & Year ( learnSampleWebsite::URLPubDate ) & " by " & nodeLockTagMenus::tag ]
    Loop
    Go to Object [ Object Name: "publication" ]
    Exit Loop If [ Get (LastError) = 101 ]
    Set Variable [ $sample; Value:$sample & ¶ & Case ( learnSampleWebsite::URLPubDate = "" ; learnSampleWebsite::URL ; learnSampleWebsite::URL & " " & Month ( learnSampleWebsite::URLPubDate ) & "/" & Day ( learnSampleWebsite::URLPubDate ) & "/" & Year ( learnSampleWebsite::URLPubDate ) ) ]
    Go to Portal Row [ Select; Next; Exit after last ]
    End Loop
    Go to Field [ ]
    Set Variable [ $copy; Value://Sample Title and History $sample & ¶ & ¶ & $copy ]
    #
    #Now create copy text and display it.
    Select Window [ Name: "Print/Copy"; Current file ]
    Else
    If [ $layoutName = "learn4EDIT" ]
    Set Variable [ $sample; Value://author and copyright date TEMP::DEFAULTNodePrimaryName & " " & Month ( Get ( CurrentDate ) ) & "/" & Day ( Get ( CurrentDate ) ) & "/" & Year ( Get ( CurrentDate ) ) & " " ]
    Else
    Set Variable [ $sample; Value://Sample Title "Unsaved group of records ordered by date and time of creation!!! This action is not advised for publishing purposes. Instead, use the theorize tag to create a saved set of records ordered by you to make the strongest case you can make for publishing sets of records." & ¶ & //author and copyright date TEMP::DEFAULTNodePrimaryName & " " & Month ( Get ( CurrentDate ) ) & "/" & Day ( Get ( CurrentDate ) ) & "/" & Year ( Get ( CurrentDate ) ) & " " ]
    End If
    Go to Layout [ “TEMP” (TEMP) ]
    Set Variable [ $sample; Value:$sample & //health/copyright defaultCopyrightName::tag ]
    Go to Layout [ “learnPreviewLayout” (testlearn) ]
    Set Variable [ $copy; Value://Sample Title and History $sample & ¶ & ¶ & $copy ]
    End If
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Set Field [ TEMP::paste; TextSize ( $copy ; 12 ) ]
    Go to Field [ ]
    Scroll Window [ Home ]

Fields used in this script

    tagMenus::_Ltag
    tagMenus::notesOrHealth
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::date
    testlearn::timestamp
    testlearn::_Ltestlearn
    refTestLearn::_Ltestlearn
    testlearn::sampleCasePoint
    testlearn::kcitation
    tagTLNodePrimary::tag
    testlearn::NodeOthers
    testlearn::Caption
    testlearn::OtherKeyWords
    testlearn::kKeywordPrimary
    tagTLKeywordPrimary::tag
    testlearn::URL
    testlearn::URLPubDate
    testlearn::kcreference
    refReference::referenceForReferenceWindow
    testlearn::kcsample
    tagMenus::tag
    learnSampleWebsite::URLPubDate
    TEMP::DEFAULTNodePrimaryName
    nodeLockTagMenus::tag
    sampleCopyright::tag
    learnSampleWebsite::URL
    defaultCopyrightName::tag
    TEMP::paste

Scripts used in this script

Layouts used in this script

    learnMenuSample
    learnPreviewLayout
    learn4EDIT
    TEMP

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sampleCopyForPasting]	Parent Folder: [libraryNewOrUpdate]	Next Script: [import]
Script Name	sampleCopyCopyText
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Copy [ TEMP::paste ] [ Select ]
    Go to Field [ ]
    Scroll Window [ Home ]

Fields used in this script

    TEMP::paste

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sampleCopyCopyText]	Parent Folder: [libraryNewOrUpdate]
Script Name	import
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #create unique ID for closing import file
    Go to Layout [ “tempStart” (TEMP) ]
    New Record/Request
    Set Field [ TEMP::import; "adflki3ina;lkfjie8;la;lkdvnma;ldieiasoerueoilanldf83984798374iwuhelfkjdlsidufioawkel" ]
    Copy [ TEMP::import ] [ Select ]
    Set Field [ TEMP::import; "" ]
    #open import file. Its startup script will ID it for close
    #and will copy its filepath for use in this script
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Open File [ <unknown> ] [ Open hidden ]
    If [ Get (LastError) = 1 ]
    Delete Record/Request [ No dialog ]
    Go to Layout [ original layout ]
    Exit Script [ ]
    End If
    // Close Window [ Name: "import" ]
    #set file path for import
    Paste [ TEMP::filePath ] [ Select; No style ]
    Set Variable [ $path; Value:TEMP::filePath ]
    Delete Record/Request [ No dialog ]
    Go to Layout [ original layout ]
    #
    #import node
    Show All Records
    Import Records [ Source: “$path”; Method: Add; Character Set: “Mac Roman” ] [ No dialog ]
    #
    #import item
    Go to Layout [ “tableTest” (test) ]
    Show All Records
    Import Records [ Source: “$path”; Target: “test”; Method: Add; Character Set: “Mac Roman”; Field Mapping: Source field 1 import to test::_Ltest Source field 2 import to test::ktestGroup Source field 3 import to test::_number Source field 4 import to test::kcfocusALL Source field 5 import to test::testName Source field 6 import to test::order Source field 7 import to test::retire Source field 9 import to test::kgtester Source field 12 import to test::glocationNameGlobal Source field 13 import to test::gcontactNameGlobal Source field 14 import to test::kgaudienceLocation Source field 15 import to test::gprogressGlobal Source field 16 import to test::ksection Source field 17 import to test::kgreportNumber Source field 21 import to test::mtestGroup Source field 22 import to test::ktestItemList Source field 23 import to test::rule Source field 24 import to test::kRecordCreatorNode Source field 25 import to test::kRecordModifierNode Source field 26 import to test::RecordModifyDate Source field 27 import to test::testNameRevert ] [ No dialog ]
    #
    #import evidence
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Show All Records
    Import Records [ Source: “$path”; Target: “testlearnReportTags”; Method: Add; Character Set: “Mac Roman”; Field Mapping: Source field 1 import to testlearnReportTags::_Ltestlearn Source field 2 import to testlearnReportTags::ktestSubject Source field 3 import to testlearnReportTags::_Number Source field 5 import to testlearnReportTags::ktest Source field 6 import to testlearnReportTags::Caption Source field 7 import to testlearnReportTags::Picture Source field 8 import to testlearnReportTags::Location Source field 9 import to testlearnReportTags::inUse Source field 10 import to testlearnReportTags::kaudienceLocation Source field 11 import to testlearnReportTags::InspectionItemCount Source field 12 import to testlearnReportTags::CheckboxCaption Source field 13 import to testlearnReportTags::recordnumberglobal Source field 14 import to testlearnReportTags::recordcountglobal Source field 15 import to testlearnReportTags::InspectionItemCountLocation Source field 16 import to testlearnReportTags::OK Source field 17 import to testlearnReportTags::kcsection Source field 18 import to testlearnReportTags::backupPhotoNumber Source field 19 import to testlearnReportTags::TimeStart Source field 20 import to testlearnReportTags::TimeStop Source field 21 import to testlearnReportTags::TimeTotal Source field 23 import to testlearnReportTags::kreportNumber Source field 24 import to testlearnReportTags::timestamp Source field 26 import to testlearnReportTags::orderDiscovery Source field 27 import to testlearnReportTags::kcKeywordOther Source field 28 import to testlearnReportTags::kNodeOther Source field 29 import to testlearnReportTags::kHealth Source field 30 import to testlearnReportTags::kNodePrimary Source field 31 import to testlearnReportTags::kmedium Source field 32 import to testlearnReportTags::kcitation Source field 33 import to testlearnReportTags::kfileLocation Source field 34 import to testlearnReportTags::kfolderPath Source field 35 import to testlearnReportTags::kKeywordPrimary Source field 36 import to testlearnReportTags::OtherKeyWords Source field 37 import to testlearnReportTags::NodeOthers Source field 38 import to testlearnReportTags::URL Source field 39 import to testlearnReportTags::filename Source field 40 import to testlearnReportTags::kcreference Source field 42 import to testlearnReportTags::filterFind Source field 43 import to testlearnReportTags::kRecordCreatorNode Source field 44 import to testlearnReportTags::kRecordModifierNode Source field 45 import to testlearnReportTags::RecordModifyDate Source field 46 import to testlearnReportTags::incomplete Source field 48 import to testlearnReportTags::copyrightYear Source field 49 import to testlearnReportTags::URLPubDate Source field 50 import to testlearnReportTags::kcsample Source field 51 import to testlearnReportTags::gkaudienceLocation Source field 52 import to testlearnReportTags::kctest Source field 53 import to testlearnReportTags::orderTest Source field 54 import to testlearnReportTags::title Source field 55 import to testlearnReportTags::kctestItem Source field 56 import to testlearnReportTags::organEmailRecipient Source field 57 import to testlearnReportTags::korgan Source field 58 import to testlearnReportTags::kcopyist Source field 59 import to testlearnReportTags::emailDate Source field 61 import to testlearnReportTags::sampleCasePoint ] [ No dialog ]
    #
    #import locationdetail
    Go to Layout [ “tableTag” (tagTable) ]
    Show All Records
    Import Records [ Source: “$path”; Target: “tagTable”; Method: Add; Character Set: “Mac Roman”; Field Mapping: Source field 1 import to tagTable::kGroupOrTest Source field 2 import to tagTable::_Ltag Source field 3 import to tagTable::tag Source field 4 import to tagTable::orderOrLock Source field 5 import to tagTable::ksection Source field 6 import to tagTable::_Number Source field 7 import to tagTable::match Source field 8 import to tagTable::tagSpelling Source field 9 import to tagTable::kcsection Source field 10 import to tagTable::Kpicture1 Source field 11 import to tagTable::notesOrHealth Source field 12 import to tagTable::Ktitle1 Source field 13 import to tagTable::kfile Source field 15 import to tagTable::Kpicture2 Source field 17 import to tagTable::Kpicture3 Source field 19 import to tagTable::Ktitle2 Source field 20 import to tagTable::Ktitle3 Source field 24 import to tagTable::kRecordCreatorNode Source field 25 import to tagTable::kRecordModifierNode ] [ No dialog ]
    #
    #import text
    Go to Layout [ <unknown> ]
    Show All Records
    Import Records [ Source: “$path”; Method: Add; Character Set: “Mac Roman” ] [ No dialog ]
    #
    #import nodeLocation
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Show All Records
    Import Records [ Source: “$path”; Target: “tagTestSubjectLocation”; Method: Add; Character Set: “Mac Roman”; Field Mapping: Source field 1 import to tagTestSubjectLocation::knode Source field 2 import to tagTestSubjectLocation::kfocus Source field 3 import to tagTestSubjectLocation::_LtestSubjectLocation Source field 4 import to tagTestSubjectLocation::kfocusAttribute1 Source field 5 import to tagTestSubjectLocation::focusName Source field 6 import to tagTestSubjectLocation::inUse Source field 7 import to tagTestSubjectLocation::order Source field 8 import to tagTestSubjectLocation::TimeStart Source field 9 import to tagTestSubjectLocation::TimeTotal Source field 10 import to tagTestSubjectLocation::_number Source field 11 import to tagTestSubjectLocation::kfocusAttribute2 Source field 12 import to tagTestSubjectLocation::ksection Source field 13 import to tagTestSubjectLocation::reportNumber Source field 14 import to tagTestSubjectLocation::kRecordCreatorNode ] [ No dialog ]
    #
    #import sectionkind
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Show All Records
    Import Records [ Source: “$path”; Target: “groupTest”; Method: Add; Character Set: “Mac Roman”; Field Mapping: Source field 1 import to groupTest::_Lgroup Source field 2 import to groupTest::_Number Source field 4 import to groupTest::match Source field 5 import to groupTest::name Source field 6 import to groupTest::ksection Source field 7 import to groupTest::defaultSectionInfo Source field 8 import to groupTest::testReportPicture Source field 9 import to groupTest::CaptionORinuseCheck Source field 10 import to groupTest::URLORHealth Source field 11 import to groupTest::order Source field 12 import to groupTest::nameSpelling Source field 13 import to groupTest::kRecordCreatorNode Source field 14 import to groupTest::kSectionCreatorNodesCreator Source field 15 import to groupTest::aboutSection ] [ No dialog ]
    #
    #import report
    Go to Layout [ “PrintReportEdit” (report) ]
    Show All Records
    Import Records [ Source: “$path”; Target: “report”; Method: Add; Character Set: “Mac Roman”; Field Mapping: Source field 1 import to report::_Lreport Source field 2 import to report::_Number Source field 3 import to report::ktestSubject Source field 4 import to report::_kfContactGeography Source field 5 import to report::general_info Source field 6 import to report::ktest Source field 7 import to report::krecommendation Source field 8 import to report::order Source field 9 import to report::Picture Source field 10 import to report::kthingRecommendationID Source field 11 import to report::kgeneralSpecificItemRecommendationID Source field 12 import to report::_kfPhoto Source field 13 import to report::_kfContactGeography2 Source field 14 import to report::_kfContactGeography3 Source field 15 import to report::_kfContactGeography4 Source field 16 import to report::_kfContactGeography5 Source field 17 import to report::PictureCaption Source field 18 import to report::textMain Source field 19 import to report::textPhotoRow1 Source field 20 import to report::pagenumberItem Source field 21 import to report::CurrentRecord Source field 22 import to report::_kfPhoto2 Source field 23 import to report::_kfPhoto3 Source field 24 import to report::_kfPhoto4 Source field 25 import to report::pagenumberTheme Source field 26 import to report::TOC Source field 27 import to report::TOCnumbers Source field 28 import to report::ReportCover Source field 29 import to report::ReportPDFtitle Source field 30 import to report::kreportNumber Source field 31 import to report::ksection Source field 32 import to report::kRecordCreatorNode Source field 33 import to report::kRecordModifierNode Source field 34 import to report::RecordModifyDate Source field 35 import to report::khealth Source field 36 import to report::textPhotoRow2 ] [ No dialog ]
    #
    #go to main screen
    Go to Layout [ <unknown> ]

Fields used in this script

    TEMP::import
    TEMP::filePath

Scripts used in this script

Layouts used in this script

    tempStart
    tableTest
    reportTagDiscovery
    tableTag
    <Missing Layout>
    tableTestSubjectFocus
    tableGroupTag
    PrintReportEdit
    <Missing Layout>

Tables used in this script

Table occurrences used by this script

    <Missing Table Occurrence>
    test
    testlearnReportTags
    tagTable
    <Missing Table Occurrence>
    tagTestSubjectLocation
    groupTest
    report

Custom Functions used by this script

Custom menu set used by this script


changeLibraryOrLibraryName
	Parent Folder: [changeLibraryOrLibraryName]	Next Script: [switchLibrary]
Script Name	changeSectionName
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$stopChangeSectionName ≠ 1 ]
    Commit Records/Requests
    Set Variable [ $name; Value:ruleSection::name ]
    New Window [ ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    #
    Enter Find Mode [ ]
    Set Field [ groupTest::match; "section" ]
    Set Field [ groupTest::name; "==" & $name ]
    Perform Find [ ]
    Set Variable [ $count; Value:Get (FoundCount) ]
    Close Window [ Current Window ]
    If [ $count ≠ 1 ]
    Show Custom Dialog [ Title: "!"; Message: "Each section must have a unique name."; Buttons: “OK” ]
    Set Field [ ruleSection::name; $name & " " & ruleSection::_Lgroup ]
    Set Field [ ruleSection::nameSpelling; $name & " " & ruleSection::_Lgroup ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    End If

Fields used in this script

    ruleSection::name
    groupTest::match
    groupTest::name
    ruleSection::_Lgroup
    ruleSection::nameSpelling

Scripts used in this script

Layouts used in this script

    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSectionName]	Parent Folder: [changeLibraryOrLibraryName]
Script Name	switchLibrary
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If on mobile device, stop the script.
    If [ Filter ( Get ( ApplicationVersion ) ; "go" ) = "go" ]
    Exit Script [ ]
    End If
    #
    #If library selected is the one open then exit the script.
    Set Variable [ $library; Value:tempSetup::filePathLibraryToSwitchTo ]
    If [ $library = Get (FilePath) ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    #
    #If library path is blank (which should only happen if
    #admin adds library manually with path), then delete
    #this library name from the list.
    If [ $library = "" ]
    Select Window [ Name: "Setup"; Current file ]
    #
    Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    Show All Records
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $library = MemorySwitch::path ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    If [ $library = MemorySwitch::path ]
    Set Variable [ $name; Value:MemorySwitch::name ]
    Delete Record/Request [ No dialog ]
    End If
    Go to Layout [ “defaultSetup” (tempSetup) ]
    #
    #Reset pulldown menu to select the current file's
    #name record, so that it will show up as selected when
    #the user clicks on the pulldown list again.
    Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    Enter Find Mode [ ]
    Set Field [ MemorySwitch::name; tempSetup::fileName ]
    Perform Find [ ]
    Set Field [ TEMP::filePathLibraryToSwitchTo; MemorySwitch::path ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show Custom Dialog [ Message: $name & " cannot be found. It has been moved, deleted, or its name has been changed. Its name has been removed from the switch libraries list. Find and click on it to put it back on the list."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Open the selected library.
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; $library ; Substitute ( $library ; "file:/" ; "file://" ) ) ; " " ; "%20" ) ] [ No dialog ]
    #
    #If the path stored for the selected library failed to open
    #the library, then that library is no longer there or its
    #name has been changed, so delete it from the
    #library list.
    If [ Get (LastError) = 5 ]
    #
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; $library ; Substitute ( $library ; "file:/" ; "file:///volumes/" ) ) ; " " ; "%20" ) ] [ No dialog ]
    #
    If [ Get (LastError) = 5 ]
    Select Window [ Name: "Setup"; Current file ]
    #
    Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    Enter Find Mode [ ]
    Set Field [ MemorySwitch::path; $library ]
    Perform Find [ ]
    #
    If [ $library = MemorySwitch::path ]
    Set Variable [ $libraryName; Value:MemorySwitch::name ]
    Delete Record/Request [ No dialog ]
    End If
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show Custom Dialog [ Message: $libraryName & " cannot be found. It has been moved, deleted, or its name has been changed. Its name has been removed from the switch libraries list. Find and click on it to put it back on the list."; Buttons: “OK” ]
    #
    #Reset pulldown menu to select the current file's
    #name record, so that it will show up as selected when
    #the user clicks on the pulldown list again.
    Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    Enter Find Mode [ ]
    Set Field [ MemorySwitch::name; tempSetup::fileName ]
    Perform Find [ ]
    Set Field [ TEMP::filePathLibraryToSwitchTo; MemorySwitch::path ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Exit Script [ ]
    End If
    End If
    #
    #Reset pulldown menu to select the current file's
    #name record, so that it will show up as selected when
    #the user clicks on the pulldown list again.
    Go to Layout [ “startMemorySwitch” (MemorySwitch) ]
    Enter Find Mode [ ]
    Set Field [ MemorySwitch::name; tempSetup::fileName ]
    Perform Find [ ]
    Set Field [ TEMP::filePathLibraryToSwitchTo; MemorySwitch::path ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Close Window [ Current Window ]
    Close Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    tempSetup::filePathLibraryToSwitchTo
    MemorySwitch::path
    MemorySwitch::name
    tempSetup::fileName
    TEMP::filePathLibraryToSwitchTo

Scripts used in this script

Layouts used in this script

    startMemorySwitch
    defaultSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


sectionScripts
	Parent Folder: [sectionScripts]	Next Script: [newSectionOnSectionLayout]
Script Name	changeSectionGroupName
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    If [ $$stopChangeName = 1 ]
    Set Variable [ $$stopChangeName ]
    Exit Script [ ]
    End If
    #
    Set Variable [ $$ID; Value:"ignore" ]
    Set Variable [ $$IDrecord; Value:test::_Ltest ]
    Set Variable [ $$stopTest; Value:1 ]
    Commit Records/Requests
    Set Variable [ $name; Value:groupTest::name ]
    Set Field [ groupTest::name; $name ]
    Set Variable [ $section; Value:groupTest::ksection ]
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    #
    Enter Find Mode [ ]
    Set Field [ groupTest::match; "testGroup" ]
    Set Field [ groupTest::name; "==" & $name ]
    Set Field [ groupTest::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $count; Value:Get (FoundCount) ]
    Close Window [ Current Window ]
    Set Variable [ $$ID; Value:$$IDrecord ]
    If [ $count ≠ 1 ]
    Show Custom Dialog [ Title: "!"; Message: "Each section group must have a unique name."; Buttons: “OK” ]
    Set Field [ groupTest::name; $name & " " & groupTest::_Lgroup ]
    Set Field [ groupTest::nameSpelling; $name & " " & groupTest::_Lgroup ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Set Field [ groupTest::nameSpelling; $name ]
    Go to Field [ ]
    Set Variable [ $$stopTest ]

Fields used in this script

    test::_Ltest
    groupTest::name
    groupTest::ksection
    groupTest::match
    groupTest::_Lgroup
    groupTest::nameSpelling

Scripts used in this script

Layouts used in this script

    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSectionGroupName]	Parent Folder: [sectionScripts]	Next Script: [deleteSection]
Script Name	newSectionOnSectionLayout
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    createEmptyLibrary

Script Definition
Script Steps

    #
    If [ tempSetup::kdefaultNodePrimary = "" ]
    #
    #When running the create new library script, this script
    #is the last script to be called. The two steps disabled
    #below used to halt the process and then I would
    #manually have to go the backup layout and type in
    #the word newLibrary to create the trigger for the start
    #added below, the script now does that for me.
    // Show Custom Dialog [ Message: "Select yourself (the node responsible) from Tag Menus window."; Buttons: “OK” ]
    // Halt Script
    Go to Layout [ “backup” (backup) ]
    Set Field [ backup::newLibrary; "newLibrary" ]
    Show Custom Dialog [ Message: "This library is now ready for use. It will close. When users next open it they will be asked if they want to use it as a new empty library or import records from an old Library version into it."; Buttons: “OK” ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Close Window [ Name: "Setup"; Current file ]
    Exit Script [ ]
    End If
    #
    #Create new section record.
    New Record/Request
    Set Field [ ruleSection::ksection; ruleSection::_Lgroup ]
    Set Field [ ruleSection::match; "section" ]
    Set Field [ ruleSection::aboutSection; "This library is for noting what we learn about _________________, collecting references to it, and testing or collecting samples of ___________________ to improve the quality of our thinking and doing or __________________ quality (if _________________ is a thing not a person)." ]
    Set Field [ ruleSection::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    #Capture the name in case the node is deleted, and
    #and the section is not requiring the system to replace
    #the current sections creator node, name and all.
    Set Field [ ruleSection::CaptionORinuseCheck; TEMP::DEFAULTNodePrimaryName ]
    #Capture the creator of the node that created the node
    #that created this record. Wow! OK, why? Because
    #If we need to recreate this section's creator node
    #we will need to know who created its creator node.
    Set Field [ ruleSection::kSectionCreatorNodesCreator; nodeLockSection::kRecordCreatorNode ]
    Set Field [ ruleSection::name; "Empty Library" ]
    Set Field [ ruleSection::nameSpelling; "Empty Library" ]
    Go to Field [ ruleSection::name ]
    #
    #Assign section as default section.
    Perform Script [ “setDefaultSection” ]
    #

Fields used in this script

    tempSetup::kdefaultNodePrimary
    backup::newLibrary
    ruleSection::_Lgroup
    ruleSection::ksection
    ruleSection::match
    ruleSection::aboutSection
    TEMP::kdefaultNodePrimary
    ruleSection::kRecordCreatorNode
    TEMP::DEFAULTNodePrimaryName
    ruleSection::CaptionORinuseCheck
    nodeLockSection::kRecordCreatorNode
    ruleSection::kSectionCreatorNodesCreator
    ruleSection::name
    ruleSection::nameSpelling

Scripts used in this script

    setDefaultSection

Layouts used in this script

    backup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newSectionOnSectionLayout]	Parent Folder: [sectionScripts]
Script Name	deleteSection
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ nodeLockSection::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "This record is currently locked. Select the node that created it and enter the password to unlock it, then you will able to start the delete process."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Set variables to conditionally format section to
    #be deleted, and its record number so if the
    #user cancels the delete, the system can return
    #to this record.
    Set Variable [ $delete; Value:ruleSection::_Lgroup ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $$addTagToCitation; Value:1 ]
    Set Variable [ $$stopTest; Value:1 ]
    #
    #Because there may be no records found, stop
    #the system from informing the user of this.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #See if section has any learn records tagged
    #with it, and if so set the learnInUse variable to 1.
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Go to Layout [ “learn1” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; $delete ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Set Variable [ $learnInUse; Value:1 ]
    End If
    #
    #See if section has any reference records tagged
    #with it, and if so set the refInUse variable to 1.
    Go to Layout [ “Reference” (reference) ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; $delete ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Set Variable [ $referenceInUse; Value:1 ]
    End If
    Set Variable [ $$stopLoadCitation ]
    #
    #See if section has any tag records tagged
    #with it, and if so set the refInUse variable to 1.
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ ruleLibrary 2::ksection; $delete ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Set Variable [ $TagInUse; Value:1 ]
    End If
    #
    #See if tags in question are only node tags.
    Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: tagTable::match: “node” ] [ Restore ]
    If [ Get (FoundCount) = 0 ]
    Set Variable [ $OnlyNodes; Value:1 ]
    End If
    #
    #See if section has any test records tagged
    #with it, and if so set the testInUse variable to 1.
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Layout [ “testSetup” (test) ]
    Enter Find Mode [ ]
    Set Field [ test::ksection; $delete ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Set Variable [ $testInUse; Value:1 ]
    End If
    Set Variable [ $$ID ]
    Set Variable [ $$stopTest ]
    #
    Perform Script [ “defaultSectionMenu” ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    If [ $learnInUse = 1 or $testInUse = 1 or $referenceInUse = 1 or $TagInUse = 1 ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Refresh Window
    Show Custom Dialog [ Message: Case ( $tagInUse = 1 and $OnlyNodes = 1 and $referenceInUse + $learnInUse + $testInUse = "" ; "Remove this section's node tags." ; $tagInUse = 1 and $OnlyNodes ≠ 1 and $referenceInUse + $learnInUse + $testInUse = "" ; "Navigate to all the tag sections in the learn and reference modules and delete their tags before deleting their section." ; $tagInUse = 1 and $OnlyNodes = 1 and $referenceInUse + $learnInUse + $testInUse = "" ; "Remove this section's node tags." ; If ( $referenceInUse + $learnInUse + $testInUse > 1 ; "The following modules contain records and/or tags for this section: " ; "The following module contains records and/or tags for this section: " ) & If ($testInUse = 1 ; "test" ; "" ) & Case ( $learnInUse = 1 and $testInUse = 1; ", learn" ; $learnInUse = 1 and $testInUse ≠ 1; "learn" ; "" ) & Case ( $referenceInUse = 1 and $learnInUse = 1; ", reference" ; $referenceInUse = 1 and $testInUse = 1; ", reference" ; $referenceInUse = 1 and $learnInUse ≠ 1 and $testInUse ≠ 1; " reference" ; "" ) & If ( $referenceInUse + $learnInUse + $testInUse > 1 ; ". These records must be deleted before this section can be deleted." ; ". These records must be deleted before this section can be deleted." ) ); Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Set Variable [ $$addTagToCitation ]
    #
    #If the section being deleted has no records
    #then make sure the user really wants to delete it.
    Show Custom Dialog [ Message: "Delete " & ruleSection::name & "?"; Buttons: “cancel”, “delete” ]
    #
    #If the user cancels, stop the delete.
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Set Variable [ $delete ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #If the user confirms, then delete the section.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    If [ TEMP::ksection = $delete ]
    Set Field [ TEMP::ksection; "" ]
    Set Field [ TEMP::sectionName; "" ]
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    End If
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    End If
    #

Fields used in this script

    nodeLockSection::orderOrLock
    ruleSection::_Lgroup
    testlearn::kcsection
    testlearn::filterFind
    reference::kcsection
    ruleLibrary 2::ksection
    tagTable::match
    test::ksection
    ruleSection::name
    TEMP::ksection
    TEMP::sectionName

Scripts used in this script

    defaultSectionMenu

Layouts used in this script

    learn1
    Reference
    tableTag
    testSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


testScreens

setup
	Parent Folder: [setup]	Next Script: [loadSetupTestRecord]
Script Name	gotoSetupTest
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Capture record ID so system can return user
    #after editing is complete.
    Set Variable [ $$recordNumber; Value:Get (RecordNumber) ]
    #
    #Capture test and test item IDs so system can
    #reset them. During edit user may go to a
    #different test record, thus changing these temp IDs.
    Set Variable [ $$itemID; Value:TEMP::ktest ]
    Set Variable [ $$detailID; Value:TEMP::ktestItemList ]
    #
    #Capture layoutname so system can return user
    #after editing is complete.
    Set Variable [ $$module; Value:Get (LayoutName) ]
    #
    #Go to detail tag menu so load item record script
    #below will work properly.
    Go to Layout [ “setupTestItem” (tagMenus) ]
    #
    #Set the citation match variable to detail as that
    #is the layout the system goes to and that variable
    #is needed by the add script if the user should
    #click on the add button.
    Set Variable [ $$citationMatch; Value:"testItem" ]
    #
    #Capture record ID so system can return user
    #after editing is complete.
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Test"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Report"; Current file ]
    End If
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$LearnEdit; Value:testlearn::_Ltestlearn ]
    End If
    #
    #Take user to test setup layout and find all
    #test items. If coming from Library Setup window.
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Layout [ “testSetup” (test) ]
    Sort Records [ Specified Sort Order: groupTest::order; based on value list: “order” groupTest::name; ascending test::order; based on value list: “order” test::testName; ascending ] [ Restore; No dialog ]
    Set Window Title [ Current Window; New Title: "Setup" ]
    If [ $$module ≠ "testMenuTestItem" // and $$module ≠ "reportTagItem" ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ test::ksection; TEMP::ksection ]
    Perform Find [ ]
    #
    #If not test exist, then make sure Tag Menus
    #also shows no items.
    If [ Get (LastError) = 401 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Find [ Specified Find Requests: Find Records; Criteria: tagMenus::_Ltag: “"findNOrecords"” ] [ Restore ]
    Select Window [ Name: "Setup"; Current file ]
    Exit Script [ ]
    End If
    Sort Records [ Specified Sort Order: groupTest::order; based on value list: “order” groupTest::name; ascending test::order; based on value list: “order” test::testName; ascending ] [ Restore; No dialog ]
    #
    #Take user to item user clicked on to edit.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ TEMP::ktest = test::_Ltest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ TEMP::ktest ≠ test::_Ltest ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #Conditionally format item and its tags.
    Set Variable [ $$ID ]
    Perform Script [ “loadSetupTestRecord” ]
    Scroll Window [ Home ]
    End If
    #
    #If coming from the test or report module show
    #user the Tag Menus window as they probably
    #want to add a new tag.
    If [ $$module = "testMenuTestItem" or $$module = "reportTagItem" ]
    // If [ $$module = "reportTagItem" ]
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$item = test::_Ltest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$ID ]
    Perform Script [ “loadSetupTestRecord” ]
    // End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Record/Request/Page [ $$recordNumber ] [ No dialog ]
    End If

Fields used in this script

    TEMP::ktest
    TEMP::ktestItemList
    testlearn::_Ltestlearn
    groupTest::order
    groupTest::name
    test::order
    test::testName
    TEMP::ksection
    test::ksection
    tagMenus::_Ltag
    test::_Ltest

Scripts used in this script

    loadSetupTestRecord

Layouts used in this script

    setupTestItem
    testSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoSetupTest]	Parent Folder: [setup]	Next Script: [newTestGroup]
Script Name	loadSetupTestRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    gotoSetupTest
    deleteTest
    pagePulldown
    nextPage
    previousPage
    insureEqualityOfSpellFields

Script Definition
Script Steps

    #
    #Stop script if needed to speed up other scripts.
    If [ $$ID = test::_Ltest or $$ID = "ignore" ]
    Exit Script [ ]
    End If
    #
    #Set all variables needed for performing various
    #scripts while in test setup mode.
    Go to Field [ ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    #The test item list temp fields allow users to switch
    #from their current list to another list.
    Set Field [ TEMP::ktestItemList; test::ktestItemList ]
    Set Field [ TEMP::ktestItemListOLD; test::ktestItemList ]
    #
    Set Field [ TEMP::ktest; test::_Ltest ]
    Set Field [ TEMP::mTag; TEMP::ktest ]
    #
    #Used on Tag Menus window item layout for switch.
    Set Field [ TEMP::testName; test::testName ]
    Set Variable [ $$focuses; Value:test::kcfocusALL ]
    #
    #
    #
    #Get the name of the test for the test item list
    #name temp field.
    #
    #The reason for this whole section of the script
    #(getting a test name) is that there is no relationship
    #that can be made that would match the key of
    #of the named test to this test and thus unlock
    #and so allow the layout to show this test's name.
    #This is because the key to unlock the display of
    #a test's name is in a keychain field where many
    #keys may exist in a list. Filemaker cannot match
    #a lock in one table to list of keys in another table.
    #There must be only one key in a field in order
    #for Filemaker to know which key to use in a lock.
    #The database does not have the intellegence or
    #programming to search through a list of keys
    #to make a match to a lock field in another table.
    #Thus, in order to display the name of the test in use
    #we must have the system put that name in a temp
    #field with global storage, which then allows it
    #to be displayed on any layout where that temp
    #field is displayed. No relationship between the
    #the temp table and the layout's table is required
    #as long as the temp field is a global field, meaning
    #all data in the field is the same for every record
    #in the temp table.
    #
    #If the test list belongs (has the key that fits the
    #test's lock) the set the temp field with this test's name.
    If [ test::_Ltest = test::ktestItemList ]
    #
    #Set a temp field with this test's name. This name
    #field will then be used to show this test's name on
    #the Tag Menus layout for setupTestItems.
    Set Field [ TEMP::ktestListtTestName; test::testName ]
    #
    #If the test list does not belong to this test
    #(has the key that fits A DIFFERENT test's lock)
    #then set the temp field with this other test's name.
    Else If [ test::_Ltest ≠ test::ktestItemList ]
    #
    #Get the ID of the current record so it can be
    #looped back to.
    Set Variable [ $currentTest; Value:test::_Ltest ]
    #
    #Turn of the record load triggered script to speed
    #up this loop search.
    Set Variable [ $$ID; Value:"ignore" ]
    #
    #Go to the first record and then test it and every
    #other record until the test in question is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ test::_Ltest = TEMP::ktestItemList ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Set a temp field with this test's name. This name
    #field will then be used to show this test's name on
    #the Tag Menus layout for setupTestItems.
    Set Field [ TEMP::ktestListtTestName; test::testName ]
    #
    #Update key used for the move pulldown.
    Set Field [ TEMP::mTag; TEMP::ktestItemList ]
    #
    #go back to current test.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ test::_Ltest = $currentTest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$ID; Value:$currentTest ]
    Refresh Window
    End If
    #
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Left: Get (ScreenWidth) / 2 ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    End If
    #
    #Find test items for test if user is currently looking
    #at test items on the Tag Menus window.
    If [ Get (LayoutName) = "setupTestItem" ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::match; TEMP::ktestItemList & ¶ ]
    Perform Find [ ]
    #
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::name; ascending ruleTagMenuTestGroups::_Lgroup; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #Refresh window in case user was on focus layout.
    Refresh Window
    #
    #Return to setup window and refresh it to highlight
    #current record.
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window

Fields used in this script

    test::_Ltest
    test::ktestItemList
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    TEMP::ktest
    TEMP::mTag
    test::testName
    TEMP::testName
    test::kcfocusALL
    TEMP::ktestListtTestName
    ruleTagMenuTestGroups::match
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::name
    ruleTagMenuTestGroups::_Lgroup
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    setupTestFocus
    setupTestItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadSetupTestRecord]	Parent Folder: [setup]	Next Script: [newTest]
Script Name	newTestGroup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    newTest

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "The default record creation node -- " & TEMP::DEFAULTNodePrimaryName & " -- is locked. Select this node in the setuptag window and enter the password to unlock it so that you can create new records attributed to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Stop spell check script.
    Set Variable [ $$stopTest; Value:1 ]
    #
    #Create new test group.
    Go to Layout [ “tableGroupTag” (groupTest) ]
    New Record/Request
    Set Field [ groupTest::ksection; TEMP::ksection ]
    Set Field [ groupTest::match; "testGroup" ]
    Set Field [ groupTest::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    #
    #Each test group must have a unique name and
    #the nameSpelling field is used when the user
    #changes the name to a name already in use at
    #which point the nameSpelling name can revert
    #the user back to the former name (as the name
    #field contains the duplicate name which is not
    #allowed).
    Set Field [ groupTest::name; "test group " & groupTest::_Lgroup ]
    Set Field [ groupTest::nameSpelling; "test group " & groupTest::_Lgroup ]
    Set Variable [ $group; Value:groupTest::_Lgroup ]
    #
    #Create new test for this group.
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Layout [ “testSetup” (test) ]
    New Record/Request
    Set Variable [ $loopToNewRecord; Value:test::_Ltest ]
    Set Field [ test::ksection; TEMP::ksection ]
    #( a test group field is neccessary because a section
    # may have more than one test group, and so trying
    # to find a test group using the section key and
    # the testGroup match field would find all groups
    # when we need the system to find one group. )
    Set Field [ test::ktestGroup; $group ]
    #
    #A new test-item list is created with each new test.
    #This key field can be changed so that the test-item
    #list for another test can be used.
    Set Field [ test::ktestItemList; test::_Ltest ]
    #
    #Tests do not need unique names. Unlike other
    #names, the names of tests if named the same
    #will not confuse the system. I don't think it will
    #confuse the user either, but I am including steps to
    #require a unique name so when locked name can
    #be revereted back to orignal name.
    Set Field [ test::testName; "test" ]
    Set Field [ test::testNameRevert; "test" ]
    Set Field [ test::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    #
    #
    #
    #Set temp variables for next part of script.
    #
    #The test item list temp fields allow users to switch
    #from their current list to another list.
    Set Field [ TEMP::ktestItemList; test::ktestItemList ]
    Set Field [ TEMP::ktestItemListOLD; test::ktestItemList ]
    #
    #Used on tag menus to unlock buttons and link
    #new records to test.
    Set Field [ TEMP::ktest; test::_Ltest ]
    #
    #Used on Tag Menus window item layout for switch.
    Set Field [ TEMP::testName; test::testName ]
    #
    #Used on Tag Menus window focus layout for conditional
    #formatting.
    Set Variable [ $$focuses; Value:test::kcfocusALL ]
    #
    #
    #Go to the tag menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Left: Get (ScreenWidth) / 2 ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    End If
    #
    #Remember layout user is currently seeing in
    #the tag menu window, so user can be returned
    #to it at the end of the script.
    Set Variable [ $layout; Value:Get (LayoutName) ]
    #
    #Assign focus to test item as each test must have
    #at least one focus.
    Perform Script [ “editSectionFocuses” ]
    If [ Get (FoundCount) = 0 ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    New Record/Request
    Set Field [ tagLocation::ksection; TEMP::ksection ]
    Set Field [ tagLocation::match; "focus" ]
    Set Field [ tagLocation::tag; "test focus" ]
    Perform Script [ “editSectionFocuses” ]
    End If
    Go to Record/Request/Page [ First ]
    Perform Script [ “linkTestFocusOrUnlinkTestFocus” ]
    #
    // #Create test item as each test must have at least
    // #one test item.
    // Set Variable [ $$stopLoadTagRecord; Value:1 ]
    // Perform Script [ “menuTestItem” ]
    // Perform Script [ “newTestItemGroup” ]
    // Set Field [ tagMenus::tag; "test item" ]
    // Go to Field [ ]
    #
    #Go to selected tag menu window layout.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$stopLoadTagRecord ]
    Go to Layout [ $layout ]
    #
    #Set variables for new record.
    Select Window [ Name: "setup"; Current file ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    #Sort records.
    Sort Records [ Specified Sort Order: ruleSection::name; ascending groupTest::order; based on value list: “order” groupTest::name; ascending test::order; based on value list: “order” test::testName; ascending ] [ Restore; No dialog ]
    Go to Field [ test::testName ] [ Select/perform ]
    #
    #Start spell check script.
    Set Variable [ $$stopTest ]

Fields used in this script

    TEMP::nodeLock
    TEMP::DEFAULTNodePrimaryName
    TEMP::ksection
    groupTest::ksection
    groupTest::match
    TEMP::kdefaultNodePrimary
    groupTest::kRecordCreatorNode
    groupTest::_Lgroup
    groupTest::name
    groupTest::nameSpelling
    test::_Ltest
    test::ksection
    test::ktestGroup
    test::ktestItemList
    test::testName
    test::testNameRevert
    test::kRecordCreatorNode
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    TEMP::ktest
    TEMP::testName
    test::kcfocusALL
    tagLocation::ksection
    tagLocation::match
    tagLocation::tag
    tagMenus::tag
    ruleSection::name
    groupTest::order
    test::order

Scripts used in this script

    editSectionFocuses
    linkTestFocusOrUnlinkTestFocus
    menuTestItem
    newTestItemGroup

Layouts used in this script

    tableGroupTag
    testSetup
    setupTestFocus
    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newTestGroup]	Parent Folder: [setup]	Next Script: [deleteTest]
Script Name	newTest
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default record creation node -- " & TEMP::DEFAULTNodePrimaryName & " -- is locked. Select this node in the setuptag window and enter the password to unlock it so that you can create new records attributed to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Stop spell check script.
    Set Variable [ $$stopTest; Value:1 ]
    #
    #If there are no tests, then create a new test
    #group first and then a test for that group.
    #All tests belong to a test groups.
    If [ Get (FoundCount) = 0 ]
    Perform Script [ “newTestGroup” ]
    Exit Script [ ]
    End If
    #
    #Set variables needed to create new item.
    Set Variable [ $$ID; Value:"ignore" ]
    Set Variable [ $group; Value:test::ktestGroup ]
    #
    #new test
    New Record/Request
    Set Field [ test::ksection; TEMP::ksection ]
    #( a test group field is neccessary because a section
    # may have more than one test group, and so trying
    # to find a test group using the section key and
    # the testGroup match field would find all groups
    # when we need the system to find one group. )
    Set Field [ test::ktestGroup; $group ]
    #
    #A new test-item list is created with each new test.
    #This key field can be changed so that the test-item
    #list for another test can be used.
    Set Field [ test::ktestItemList; test::_Ltest ]
    #
    #Tests do not need unique names. Unlike other
    #names, the names of tests if named the same
    #will not confuse the system. I don't think it will
    #confuse the user either, but I am including steps to
    #require a unique name so when locked name can
    #be revereted back to orignal name.
    Set Field [ test::testName; "test" ]
    Set Field [ test::testNameRevert; "test" ]
    Set Field [ test::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    #
    #
    #
    #Set temp variables for next part of script.
    #
    #The test item list temp fields allow users to switch
    #from their current list to another list.
    Set Field [ TEMP::ktestItemList; test::ktestItemList ]
    Set Field [ TEMP::ktestItemListOLD; test::ktestItemList ]
    #
    #Used on tag menus to unlock buttons and link
    #new records to test.
    Set Field [ TEMP::ktest; test::_Ltest ]
    #
    #Used on Tag Menus window item layout for switch.
    Set Field [ TEMP::testName; test::testName ]
    #
    #Used on Tag Menus window focus layout for conditional
    #formatting.
    Set Variable [ $$focuses; Value:test::kcfocusALL ]
    #
    #
    #Go to the tag menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Left: Get (ScreenWidth) / 2 ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    End If
    #
    #Remember layout user is currently seeing in
    #the tag menu window, so user can be returned
    #to it at the end of the script.
    Set Variable [ $layout; Value:Get (LayoutName) ]
    #
    #Assign focus to test item as each test must have
    #at least one focus.
    Perform Script [ “editSectionFocuses” ]
    Go to Record/Request/Page [ First ]
    Perform Script [ “linkTestFocusOrUnlinkTestFocus” ]
    #
    // #Create test item as each test must have at least
    // #one test item.
    // Set Variable [ $$stopLoadTagRecord; Value:1 ]
    // Perform Script [ “menuTestItem” ]
    // Perform Script [ “newTestItemGroup” ]
    // Set Field [ tagMenus::tag; "test item" ]
    // Go to Field [ ]
    #
    #Go to selected tag menu window layout.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$stopLoadTagRecord ]
    Go to Layout [ $layout ]
    #
    #Set variables for new record.
    Select Window [ Name: "setup"; Current file ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    #Sort records.
    Sort Records [ Specified Sort Order: ruleSection::name; ascending groupTest::order; based on value list: “order” groupTest::name; ascending test::order; based on value list: “order” test::testName; ascending ] [ Restore; No dialog ]
    Go to Field [ test::testName ] [ Select/perform ]
    #
    #Start spell check script.
    Set Variable [ $$stopTest ]

Fields used in this script

    TEMP::nodeLock
    TEMP::DEFAULTNodePrimaryName
    test::ktestGroup
    TEMP::ksection
    test::ksection
    test::_Ltest
    test::ktestItemList
    test::testName
    test::testNameRevert
    TEMP::kdefaultNodePrimary
    test::kRecordCreatorNode
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    TEMP::ktest
    TEMP::testName
    test::kcfocusALL
    tagMenus::tag
    ruleSection::name
    groupTest::order
    groupTest::name
    test::order

Scripts used in this script

    newTestGroup
    editSectionFocuses
    linkTestFocusOrUnlinkTestFocus
    menuTestItem
    newTestItemGroup

Layouts used in this script

    setupTestFocus
    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newTest]	Parent Folder: [setup]	Next Script: [deleteTestItem]
Script Name	deleteTest
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ nodeLockTest::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTest::tag & " -- in the setup tag window and enter the password to unlock it so that you can delete it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Set variables to conditionally format record to
    #to be deleted and to supply name for warning
    #messages, and to speed up script.
    Set Variable [ $delete; Value:test::_Ltest ]
    Set Variable [ $$tagTest; Value:test::_Ltest ]
    Set Variable [ $$ID; Value:"ignore" ]
    If [ test::testName = "" ]
    Set Field [ test::testName; test::_Ltest ]
    End If
    Go to Field [ ]
    #
    #Check if item is in use as test tag on any Report
    #records, and if so stop the script.
    #
    New Window [ Name: "Report: Discovery Records"; Height: 4; Width: 4 ]
    #
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Enter Find Mode [ ]
    Set Field [ testlearnReportTags::ktest; $delete ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Perform Find [ ]
    #
    #If records are found using test, then stop script.
    If [ Get (FoundCount) ≠ 0 ]
    Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 333; Top: 0 ]
    Show Custom Dialog [ Title: "!"; Message: "Discoveries where made for this test (shown). Delete all these discovery records and then this test can be deleted."; Buttons: “OK” ]
    #
    Close Window [ Current Window ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    Exit Script [ ]
    End If
    #
    #Check if item is in use as test tag on any Learn
    #records, and if so stop the script.
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Go to Layout [ “learn1” (testlearn) ]
    #
    Set Window Title [ Current Window; New Title: "Learn" ]
    #
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" ]
    Set Field [ testlearn::kctest; "###" & $$tagTest ]
    Perform Find [ ]
    Set Variable [ $$stopLoadCitation ]
    #
    #If records are found using test, then stop script.
    If [ Get (FoundCount) ≠ 0 ]
    Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 333; Top: 0 ]
    Show Custom Dialog [ Title: "!"; Message: "This test is linked to at least one Learn record. You can delete this test after removing these links (created in the Learn module)."; Buttons: “OK” ]
    #
    Close Window [ Current Window ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    Exit Script [ ]
    End If
    #
    Close Window [ Current Window ]
    #
    #If no records were found using this test, then
    #user may delete it. First the record is highlighted
    #in red and the user is asked if they really intend
    #to delete this record.
    Refresh Window
    Go to Field [ test::testName ] [ Select/perform ]
    Scroll Window [ To Selection ]
    Go to Field [ ]
    Show Custom Dialog [ Title: "!"; Message: "Delete " & test::testName & "?"; Buttons: “Cancel”, “Delete” ]
    #
    #If the user cancels the delete, then everything
    #goes back to the way it was before the delete
    #was started.
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $delete ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    #If the user presses 'delete' the system will now
    #check if this test is the last test in its test group.
    If [ Get ( LastMessageChoice ) = 2 ]
    #
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    Set Variable [ $section; Value:test::ksection ]
    #( a test group field is neccessary because a section
    # may have more than one test group, and so trying
    # to find a test group using the section key and
    # the testGroup match field would find all groups
    # when we need the system to find one group. )
    Set Variable [ $group; Value:test::ktestGroup ]
    Set Variable [ $test; Value:test::_Ltest ]
    #
    #Find all tests in this test group.
    Go to Layout [ “tableTest” (test) ]
    Enter Find Mode [ ]
    Set Field [ test::ktestGroup; $group ]
    Perform Find [ ]
    #
    #If the test is the last test, the user is informed
    #of this and asked if knowing this they want to
    #delete both the test and the test group, since
    #a test group cannot exist without at least one test
    #in it.
    If [ Get (FoundCount) = 1 ]
    #
    Close Window [ Current Window ]
    #
    Set Variable [ $deleteGroup; Value:$delete ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "If you delete this group's last test, it will also be deleted."; Buttons: “Cancel”, “Delete” ]
    #
    #If the user cancels the delete, then everything
    #goes back to the way it was before the delete
    #was started.
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $delete ]
    Set Variable [ $deleteGroup ]
    Refresh Window
    Set Variable [ $$ID; Value:test::_Ltest ]
    Exit Script [ ]
    End If
    #
    #If the user pressed delete then first the
    #test group is deleted.
    #
    New Window [ ]
    #
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $group ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    End If
    #
    End If
    #
    #Remove test's key from test-item groups that
    #have it plus other keys.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::match; $test & ¶ ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Loop
    If [ ValueCount (ruleTagMenuTestGroups::match) > 1 ]
    Set Variable [ $match; Value:ruleTagMenuTestGroups::match ]
    Set Field [ ruleTagMenuTestGroups::match; Substitute ( $match ; $test & "¶" ; "" ) ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Delete the test's test items that are only linked
    #to this one test.
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::match; $test & ¶ ]
    Perform Find [ ]
    Delete All Records [ No dialog ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Finally, the test itself is deleted.
    Go to Layout [ “tableTest” (test) ]
    Enter Find Mode [ ]
    Set Field [ test::_Ltest; $test ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    Close Window [ Current Window ]
    #
    #If this was the last test and there are no more
    #tests, then the test focuses and attributes for
    #this test section will also be deleted (as
    #without any tests there is no need for a test
    #focus or attribute).
    If [ Get (FoundCount) = 0 ]
    #
    Set Field [ TEMP::ktestListtTestName; "" ]
    Set Field [ TEMP::ktestItemListOLD; "" ]
    Set Field [ TEMP::ktestItemList; "" ]
    Set Field [ TEMP::kcfocuses; "" ]
    Set Field [ TEMP::kfocus; "" ]
    Set Field [ TEMP::ktest; "" ]
    #
    New Window [ ]
    #
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagLocation::ksection; TEMP::ksection ]
    Set Field [ tagLocation::match; "focus" ]
    Perform Find [ ]
    Delete All Records [ No dialog ]
    #
    Enter Find Mode [ ]
    Set Field [ tagLocation::ksection; TEMP::ksection ]
    Set Field [ tagLocation::match; "attribute" ]
    Perform Find [ ]
    Delete All Records
    #
    Close Window [ Current Window ]
    End If
    #
    #Load current test's information.
    Set Variable [ $$ID ]
    Perform Script [ “loadSetupTestRecord” ]

Fields used in this script

    nodeLockTest::orderOrLock
    nodeLockTest::tag
    test::_Ltest
    test::testName
    testlearnReportTags::ktest
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kctest
    test::ksection
    test::ktestGroup
    groupTest::_Lgroup
    ruleTagMenuTestGroups::match
    TEMP::ktestListtTestName
    TEMP::ktestItemListOLD
    TEMP::ktestItemList
    TEMP::kcfocuses
    TEMP::kfocus
    TEMP::ktest
    tagLocation::ksection
    tagLocation::match

Scripts used in this script

    loadSetupTestRecord

Layouts used in this script

    reportTagDiscovery
    learn1
    tableTest
    tableGroupTag
    setupTestItem
    setupTestFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteTest]	Parent Folder: [setup]	Next Script: [newTestItem]
Script Name	deleteTestItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If there are no tests, then stop this script as there
    #are no test to create things for.
    If [ TEMP::ktest = "" ]
    Show Custom Dialog [ Message: "There are no tests."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ nodeLockTagMenus::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTagMenus::tag & " -- in the setup tag window and enter the password to unlock it so that you can delete it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ Get (FoundCount) = 0 ]
    Exit Script [ ]
    End If
    #
    #Get variables needed for delete and delete messages.
    Set Variable [ $delete; Value:tagMenus::_Ltag ]
    Set Variable [ $group; Value:ruleTagMenuTestGroups::_Lgroup ]
    Set Variable [ $groupName; Value:If ( Char ( ruleTagMenuTestGroups::name ) ≤ 20 ; ruleTagMenuTestGroups::name ; Left ( ruleTagMenuTestGroups::name ; 20 ) & "..." ) ]
    Set Variable [ $testItemName; Value:If ( Char ( tagMenus::tag ) ≤ 20 ; tagMenus::tag ; Left ( tagMenus::tag ; 20 ) & "..." ) ]
    #
    #find and show all test records that might be using
    #this item.
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    Set Variable [ $$stopLoadTestRecord; Value:1 ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    #
    #Check if test item is in use by any discovery records.
    Loop
    Set Variable [ $number; Value:1 ]
    Loop
    If [ FilterValues ( GetValue ( testlearn::kctestItem ; $number ) ; $delete & "¶" ) = $delete & ¶ ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:1 + $addToInUse ]
    Set Variable [ $number; Value:"exit" ]
    End If
    #
    #If number was set to exit or if no keys exist, then
    #exit loop.
    Exit Loop If [ GetValue ( testlearn::kctestItem ; $number ) = "" ]
    #
    #If variable looked at did not match then raise the number
    #to view the next variable.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stopLoadTestRecord ]
    Close Window [ Current Window ]
    #
    #If in use the stop script.
    If [ $inUse ≠ "" ]
    Show Custom Dialog [ Message: If ( $inUse = 1 ; "Current test item use = " & $inUse & ". Uncheck this item in test module from the " & $inUse & " item using it and you will then be able to delete it." ; "Current test item use = " & $inUse & ". Uncheck this item in test module from the " & $inUse & " items using it and you will then be able to delete it." ); Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Exit any fields and then contionally format field
    #to be deleted by this script.
    Go to Field [ ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete " & $testItemName & "?"; Buttons: “Cancel”, “Delete” ]
    Refresh Window
    #
    #If the user says yes, first make sure the record
    #is not the last record in its group. If it is and
    #the system deleted the record without deleting
    #the group too, this group would become
    #an orphan as only groups that have records
    #attached to them show up for the user to add
    #more records to them. So the group
    #record must also be deleted if this is the last
    #test item under it.
    If [ Get ( LastMessageChoice ) = 2 ]
    New Window [ Name: "delete tag"; Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::kGroupOrTest; $group ]
    Perform Find [ ]
    #
    #If there are more records under this cateogry
    #then the system deletes the current record without
    #any more user input.
    If [ Get (FoundCount) ≠ 1 ]
    Close Window [ Name: "Delete Tag"; Current file ]
    Delete Record/Request [ No dialog ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Exit Script [ ]
    #
    #BUT if only one record is found user is asked
    #if they want to delete the category too.
    Else If [ Get (FoundCount) = 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $deleteGroup; Value:$group ]
    Refresh Window
    #
    #The records are sorted by category to show
    #the user which category is going to be deleted.
    If [ TEMP::sortTestItem ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Show user warning message dependening on
    #whether or not this group is part of other test's
    #test-item lists.
    If [ ValueCount ( ruleTagMenuTestGroups::match ) > 1 ]
    Show Custom Dialog [ Title: "!"; Message: "Deleting " & $testItemName & " will also delete its group: " & $groupName & ", which is on " & ValueCount ( ruleTagMenuTestGroups::match ) - 1 & " other test-item list(s). Option 1: delete it from all lists. Option 2: cancel delete. UNLINK this group from this list."; Buttons: “Cancel”, “Delete” ]
    Else If [ ValueCount ( ruleTagMenuTestGroups::match ) = 1 ]
    Show Custom Dialog [ Title: "!"; Message: "Deleting " & $testItemName & " will also delete its group ' " & $groupName & "' as it is the last item in this group."; Buttons: “Cancel”, “Delete” ]
    End If
    #
    #If the user says yes, then delete both the tag and
    #the category record.
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    Select Window [ Name: "delete tag"; Current file ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $group ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    Close Window [ Name: "Delete Tag"; Current file ]
    End If
    End If
    End If
    Set Variable [ $delete ]
    Set Variable [ $deleteGroup ]
    Refresh Window

Fields used in this script

    TEMP::ktest
    nodeLockTagMenus::orderOrLock
    nodeLockTagMenus::tag
    tagMenus::_Ltag
    ruleTagMenuTestGroups::_Lgroup
    ruleTagMenuTestGroups::name
    tagMenus::tag
    testlearn::ktest
    testlearn::kctestItem
    tagTable::kGroupOrTest
    TEMP::sortTestItem
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    ruleTagMenuTestGroups::match
    groupTest::_Lgroup

Scripts used in this script

Layouts used in this script

    step4_InspectionFinding
    tableTag
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteTestItem]	Parent Folder: [setup]	Next Script: [moveTestItemToNewTestGroupStep1]
Script Name	newTestItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default record creation node -- " & TEMP::DEFAULTNodePrimaryName & " -- is locked. Select this node in the setup tag window and enter the password to unlock it so that you can create new records attributed to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If there are no tests, then stop this script as there
    #are no test to create things for.
    If [ TEMP::ktest = "" ]
    Show Custom Dialog [ Message: "There are no tests."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If there are no test items, then create a new test
    #item group first and then a test for that group.
    #All test items belong to test item groups, not
    #tests. This allows test item groups to be added
    #to other test's test item lists.
    If [ Get (FoundCount) = 0 ]
    Perform Script [ “newTestItemGroup” ]
    Exit Script [ ]
    End If
    #
    #Create an item for this goup of test items.
    New Record/Request
    Set Field [ tagMenus::match; "testItem" ]
    Set Field [ tagMenus::kGroupOrTest; GetNthRecord ( tagMenus::kGroupOrTest ; Get (RecordNumber) - 1 ) ]
    Set Field [ tagMenus::ksection; TEMP::ksection ]
    Set Field [ tagMenus::tag; "item " & tagMenus::_Ltag ]
    Set Field [ tagMenus::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Go to Field [ ]
    Go to Field [ tagMenus::tag ] [ Select/perform ]

Fields used in this script

    TEMP::nodeLock
    TEMP::DEFAULTNodePrimaryName
    TEMP::ktest
    tagMenus::match
    tagMenus::kGroupOrTest
    TEMP::ksection
    tagMenus::ksection
    tagMenus::_Ltag
    tagMenus::tag
    TEMP::kdefaultNodePrimary
    tagMenus::kRecordCreatorNode

Scripts used in this script

    newTestItemGroup

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newTestItem]	Parent Folder: [setup]	Next Script: [newTestItemGroup]
Script Name	moveTestItemToNewTestGroupStep1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ nodeLockTest::orderOrLock ≠ "" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTest::tag & " -- in the setup tag window and enter the password to unlock it so that you can move it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $$groupOLD; Value:test::ktestGroup ]
    Set Variable [ $$moveItem; Value:test::_Ltest ]
    Refresh Window

Fields used in this script

    nodeLockTest::orderOrLock
    nodeLockTest::tag
    test::ktestGroup
    test::_Ltest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [moveTestItemToNewTestGroupStep1]	Parent Folder: [setup]	Next Script: [testNameToRevertNamField]
Script Name	newTestItemGroup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    newTestGroup
    newTest
    newTestItem

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default record creation node -- " & TEMP::DEFAULTNodePrimaryName & " -- is locked. Select this node in the setuptag window and enter the password to unlock it so that you can create new records attributed to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If there are no tests, then stop this script as there
    #are no test to create things for.
    If [ TEMP::ktest = "" ]
    Show Custom Dialog [ Message: "There are no tests."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Go to Layout [ “tableGroupTag” (groupTest) ]
    #
    New Record/Request
    Set Field [ groupTest::ksection; TEMP::ksection ]
    #
    #Each test-item group must have a unique name and
    #the nameSpelling field is used when the user
    #changes the name to a name already in use at
    #which point the nameSpelling name can revert
    #the user back to the former name (as the name
    #field contains the duplicate name which is not
    #allowed).
    Set Field [ groupTest::name; "test item group " & groupTest::_Lgroup ]
    Set Field [ groupTest::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ groupTest::nameSpelling; "testItemGroup" ]
    Set Field [ groupTest::match; TEMP::ktest & ¶ ]
    Set Variable [ $group; Value:groupTest::_Lgroup ]
    #
    #Create an item for this goup as all groups must
    #have at least one item. Item layout is sorted by
    #by group and then item and groups are only
    #shown as subheaders. So without an item
    #even if a group it existed it would not show up.
    Go to Layout [ original layout ]
    New Record/Request
    Set Field [ tagMenus::match; "testItem" ]
    Set Field [ tagMenus::kGroupOrTest; $group ]
    Set Field [ tagMenus::ksection; TEMP::ksection ]
    Set Field [ tagMenus::tag; "item " & tagMenus::_Ltag ]
    Set Field [ tagMenus::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Go to Field [ ]
    Go to Field [ tagMenus::tag ] [ Select/perform ]
    #
    #If this is the first record to be created the layout
    #must be sorted to get it to show the group for
    #this first test item.
    If [ Get (FoundCount) = 1 ]
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::_Lgroup; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If

Fields used in this script

    TEMP::nodeLock
    TEMP::DEFAULTNodePrimaryName
    TEMP::ktest
    TEMP::ksection
    groupTest::ksection
    groupTest::_Lgroup
    groupTest::name
    TEMP::kdefaultNodePrimary
    groupTest::kRecordCreatorNode
    groupTest::nameSpelling
    groupTest::match
    tagMenus::match
    tagMenus::kGroupOrTest
    tagMenus::ksection
    tagMenus::_Ltag
    tagMenus::tag
    tagMenus::kRecordCreatorNode
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::_Lgroup
    tagMenus::orderOrLock

Scripts used in this script

Layouts used in this script

    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newTestItemGroup]	Parent Folder: [setup]	Next Script: [moveTestItemToNewTestGroupStep2]
Script Name	testNameToRevertNamField
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$stopTest = "" ]
    Set Variable [ $$tag; Value:test::_Ltest ]
    Perform Script [ “CHUNKcheckForDragPasteChanges” ]
    Set Variable [ $$tag ]
    Set Field [ test::testNameRevert; test::testName ]
    End If

Fields used in this script

    test::_Ltest
    test::testName
    test::testNameRevert

Scripts used in this script

    CHUNKcheckForDragPasteChanges

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [testNameToRevertNamField]	Parent Folder: [setup]	Next Script: [stuffCheckBox]
Script Name	moveTestItemToNewTestGroupStep2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Stop test record load script to speed up script.
    Set Variable [ $$ID; Value:"ignore" ]
    #
    #Get the newly selected group's ID number.
    Set Variable [ $newGroup; Value:test::ktestGroup ]
    #
    #Reset the test's group ID with its old group ID
    #number grabbed by the system in part 1 of
    #this script, just in case the user decides to cancel
    #move and the test needs to stay put.
    Set Field [ test::ktestGroup; $$groupOLD ]
    Go to Field [ ]
    #
    #Check if this is the last test in the test group.
    New Window [ ]
    Go to Layout [ “tableTest” (test) ]
    Enter Find Mode [ ]
    Set Field [ test::ktestGroup; $$groupOLD ]
    Perform Find [ ]
    If [ Get (FoundCount) = 1 ]
    Close Window [ Current Window ]
    Set Variable [ $deleteGroup; Value:TEMP::ktest ]
    Refresh Window
    #
    #If it is the last item inform user that after the move
    #the old group will be deleted unless the user
    #creates a new item for this group before moving
    #the old item.
    Show Custom Dialog [ Title: "!"; Message: "After " & test::testName & " is moved its old group will be deleted. If you want to keep this group then move the test after creating a new test for the old group."; Buttons: “Cancel”, “move” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $deleteGroup ]
    Set Variable [ $$groupOLD ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    #If the user decides to go ahead with the move,
    #first delete the old group.
    New Window [ ]
    #
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $$groupOLD ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    #
    End If
    #
    #Close window opened to perform find, and then
    #set group ID of test with the new groups ID number.
    Close Window [ Current Window ]
    Set Field [ test::ktestGroup; $newGroup ]
    Set Variable [ $$groupOLD ]
    Go to Field [ ]
    #
    #Turn back on the loadrecord script. The current
    #record's info does not need to be reloaded of course
    #because it is still the current record.
    Set Variable [ $$ID; Value:test::_Ltest ]
    #

Fields used in this script

    test::ktestGroup
    TEMP::ktest
    test::testName
    groupTest::_Lgroup
    test::_Ltest

Scripts used in this script

Layouts used in this script

    tableTest
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [moveTestItemToNewTestGroupStep2]	Parent Folder: [setup]
Script Name	stuffCheckBox
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    If [ tempSetup::InventoryLibaryYN = "" ]
    Set Field [ tempSetup::layoutLtagK; "" ]
    Set Field [ tempSetup::layoutRtagK; "" ]
    Set Field [ tempSetup::layoutLtagN; "" ]
    Set Field [ tempSetup::layoutRtagN; "" ]
    Else
    Set Field [ tempSetup::layoutLtagK; "moreltagNKs2" ]
    Set Field [ tempSetup::layoutRtagK; "moreReferenceMenu2SkeywordOrNode1" ]
    Set Field [ tempSetup::layoutLtagN; "moreltagNKs2" ]
    Set Field [ tempSetup::layoutRtagN; "moreReferenceMenu2SkeywordOrNode1" ]
    End If

Fields used in this script

    tempSetup::InventoryLibaryYN
    tempSetup::layoutLtagK
    tempSetup::layoutRtagK
    tempSetup::layoutLtagN
    tempSetup::layoutRtagN

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


test
	Parent Folder: [test]	Next Script: [testInfoOpenTextNewWindow]
Script Name	(un)linkTestItemGroupToTestItemList
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Go to Field [ ]
    #
    #Exit script if any of the current groups test items
    #are in use. ( At a later date, improve this script
    # so it finds the specific records in use and informs
    # user of them specficially so user can find
    # them and know how many their are. )
    #
    #find and show all test records that might be using
    #any item in this group.
    Set Variable [ $$stopLoadTestRecord; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $group; Value:ruleTagMenuTestGroups::_Lgroup ]
    New Window [ ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::_Lgroup; $group ]
    Perform Find [ ]
    #
    #Create a variable keychain of all test items that could
    #be used.
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $addToCheck; Value:$check ]
    Set Variable [ $check; Value:tagMenus::_Ltag & ¶ & $addToCheck ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Check each test item against each test discovery record
    #for this test item.
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    #
    #The first loop checks for each test item.
    Set Variable [ $groupNumber; Value:1 ]
    #
    #
    #The first loop checks for each test item.
    Loop
    Set Variable [ $item; Value:GetValue ( $check ; $groupNumber ) ]
    #
    #Second loop checks the selected test item against each
    #key in each discovery record's test item keychain.
    Loop
    Set Variable [ $number; Value:1 ]
    Loop
    If [ FilterValues ( GetValue ( testlearn::kctestItem ; $number ) ; $item & ¶ ) = $item & ¶ ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & $item & ¶ ]
    Set Variable [ $number; Value:"exit" ]
    End If
    #
    #If number was set to exit or if no keys exist, then
    #exit loop.
    Exit Loop If [ GetValue ( testlearn::kctestItem ; $number ) = "" ]
    #
    #If variable looked at did not match then raise the number
    #to view the next variable.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If no more items in group then exit loop.
    Exit Loop If [ GetValue ( $check ; $groupNumber ) = "" ]
    #
    #If variable looked at did not match then raise the number
    #to view the next variable.
    Set Variable [ $addToGroup; Value:$groupNumber ]
    Set Variable [ $groupNumber; Value:$addToGroup + 1 ]
    Go to Record/Request/Page [ First ]
    End Loop
    #
    Set Variable [ $$stopLoadTestRecord ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Close Window [ Current Window ]
    #
    #If in use the stop script.
    If [ $inUse ≠ "" ]
    Refresh Window
    Show Custom Dialog [ Message: "The highlighed items are currently in use. Uncheck these items from the tests using them and then you will be able to unlink this group of items."; Buttons: “OK” ]
    Set Variable [ $inUse ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    #Capture group key to be linked to or unlinked
    #from the current test-item list.
    Set Variable [ $addTestItemGroup; Value:addTestItemGroup::addTestItemGroup ]
    #
    #Open a new window and find this test item group.
    New Window [ ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $addTestItemGroup ]
    Perform Find [ ]
    #
    #Capture current list of testList keys.
    Set Variable [ $match; Value:groupTest::match ]
    #
    #Remove the key from the list of test-item
    #group keys, unless it only belongs to this list,
    #in which case tell user that rather than
    #unlinking it, the list needs to be deleted
    #or linked to another test before unlinking it
    #from the current test's list.
    If [ TEMP::ktestItemList & "¶" = FilterValues ( $match ; TEMP::ktestItemList & "¶" ) ]
    #
    #Determine if test-item group belongs to more
    #than one test.
    If [ ValueCount ( groupTest::match ) = 1 ]
    Close Window [ Current Window ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "This group cannot be unlinked because it is only linked to this test-item list and unlinking it would orphan it. Option 1: delete all items in group to remove it. Option 2: link it to another test and then unlink it from this test."; Buttons: “OK” ]
    Exit Script [ ]
    Else If [ ValueCount ( groupTest::match ) ≠ 1 ]
    Set Field [ groupTest::match; Substitute ( $match ; TEMP::ktestItemList & "¶" ; "" ) ]
    Close Window [ Current Window ]
    End If
    #
    #Add the key to list of test keys, if it is not currently
    #part of this list.
    Else If [ TEMP::ktestItemList & "¶" ≠ FilterValues ( $match ; TEMP::ktestItemList & "¶" ) ]
    Set Field [ groupTest::match; TEMP::ktestItemList & ¶ & $match ]
    Close Window [ Current Window ]
    End If
    #
    #Show newly added group and its test items.
    Perform Script [ “menuTestItem” ]
    #

Fields used in this script

    ruleTagMenuTestGroups::_Lgroup
    tagMenus::_Ltag
    testlearn::ktest
    testlearn::kctestItem
    addTestItemGroup::addTestItemGroup
    groupTest::_Lgroup
    groupTest::match
    TEMP::ktestItemList

Scripts used in this script

    menuTestItem

Layouts used in this script

    step4_InspectionFinding
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [(un)linkTestItemGroupToTestItemList]	Parent Folder: [test]	Next Script: [testCheck]
Script Name	testInfoOpenTextNewWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$stopOpenNewTextWindow = 1 ]
    Set Variable [ $$stopOpenNewTextWindow ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    New Window [ ]
    If [ tagTLNodePrimary::orderOrLock = "" and Get (LayoutName) ≠ "testInfo" ]
    Scroll Window [ Home ]
    Go to Layout [ “testInfoText” (testlearnReportTags) ]
    // Go to Field [ testlearnReportTags::Caption ]
    Else If [ tagTLNodePrimary 2::orderOrLock = "" ]
    Scroll Window [ Home ]
    Go to Layout [ “testInfoText” (testlearnReportTags) ]
    // Go to Field [ testlearnReportTags::Caption ]
    Else If [ tagTLNodePrimary::orderOrLock ≠ "" or tagTLNodePrimary 2::orderOrLock ≠ "" ]
    Go to Layout [ “testInfoTextLocked” (testlearnReportTags) ]
    End If
    Set Variable [ $$stopLoadCitation ]
    Pause/Resume Script [ Indefinitely ]

Fields used in this script

    tagTLNodePrimary::orderOrLock
    testlearnReportTags::Caption
    tagTLNodePrimary 2::orderOrLock

Scripts used in this script

Layouts used in this script

    testInfoText
    testInfoTextLocked

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [testInfoOpenTextNewWindow]	Parent Folder: [test]	Next Script: [testSetLocationName]
Script Name	testCheck
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Get ( ActiveFieldContents ) = "" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "You need to create a test by clicking the 'new/edit' test button above, before you can create a focus for your test. Sorry if this is confusing. As youhe test focus screen (this screen) before you can see the test create screen. "; Buttons: “OK” ]
    End If

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [testCheck]	Parent Folder: [test]	Next Script: [loadtestinfo]
Script Name	testSetLocationName
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Field [ TEMP::LocationName; discoveryPulldownLocationName::focusName ]
    Go to Field [ ]

Fields used in this script

    discoveryPulldownLocationName::focusName
    TEMP::LocationName

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [testSetLocationName]	Parent Folder: [test]	Next Script: [scroll test]
Script Name	loadtestinfo
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    inUsePart3
    gotoDefaultsOrReport
    reportTagInfo
    reportClearDiscoveryLink

Script Definition
Script Steps

    #
    #This first section is key to stopping this script
    #when another script for example loops thru
    #many records each of which would trigger this
    #script and really slow down the program and
    #create strobe effect that is really irritating to
    #look at.
    If [ $$stoploadtestinfo = 1 ]
    Exit Script [ ]
    End If
    #
    #This key effects the conditional formatting
    Set Variable [ $$RecordID; Value:Get (RecordID) ]
    Go to Field [ ]
    Refresh Window

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadtestinfo]	Parent Folder: [test]	Next Script: [loadTestRecord]
Script Name	scroll test
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Freeze Window
    Go to Layout [ <unknown> ]
    Go to Layout [ original layout ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [scroll test]	Parent Folder: [test]	Next Script: [newTestRecord]
Script Name	loadTestRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    newTestRecord
    gotoTestItem
    delete_Evidence
    gotoDefaultsOrReport

Script Definition
Script Steps

    #Prevents script from running to speed up other
    #scripts that keep calling it up by looping thru
    #multiple records.
    If [ $$stopLoadTestRecord = 1 ]
    Exit Script [ ]
    End If
    Set Variable [ $$evidenceToBeTagged; Value:testlearn::_Ltestlearn ]
    Set Variable [ $$taggedEvidence; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$testItem ]
    Set Variable [ $$testItem; Value:testlearn::kctestItem ]
    Set Field [ TEMP::EvidenceItemNameAndNumber; testlearn::_Number & " " & InspectItems::testName ]
    Set Variable [ $windowName; Value:Get (WindowName) ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Select Window [ Name: $windowName; Current file ]
    Refresh Window
    // Perform Script [ “evidenceDetailDELETE?????” ]

Fields used in this script

    testlearn::_Ltestlearn
    testlearn::kcKeywordOther
    testlearn::kctestItem
    testlearn::_Number
    InspectItems::testName
    TEMP::EvidenceItemNameAndNumber

Scripts used in this script

    evidenceDetailDELETE?????

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadTestRecord]	Parent Folder: [test]	Next Script: [linkTestFocusOrUnlinkTestFocus]
Script Name	newTestRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    gotoTestItem
    gotoDefaultsOrReport

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $$stopLoadTestRecord; Value:1 ]
    #
    #create new inspection record setting all fields with neccessary key copies
    #to unlock data
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    #
    #see if a finding record already exists as an N/A, OK or ★ record
    #because system does not change one of these
    #records when user clicks to see test records
    #unless there is only one record.
    Enter Find Mode [ ]
    #
    #find and show all inspection findings
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    #
    // If [ Get (FoundCount) = 1 and testlearn::InspectionItemCountLocation = "N/A" and testlearn::kreportNumber = $$reportNumber or Get (FoundCount) = 1 and testlearn::InspectionItemCountLocation = "OK" and testlearn::kreportNumber = $$reportNumber or Get (FoundCount) = 1 and testlearn::InspectionItemCountLocation = "★" and testlearn::kreportNumber = $$reportNumber ]
    Go to Record/Request/Page [ First ]
    Loop
    If [ testlearn::kaudienceLocation = $$Location and testlearn::InspectionItemCountLocation = "N/A" and testlearn::kreportNumber = $$reportNumber or testlearn::kaudienceLocation = $$Location and testlearn::InspectionItemCountLocation = "OK" and testlearn::kreportNumber = $$reportNumber or testlearn::kaudienceLocation = $$Location and testlearn::InspectionItemCountLocation = "★" and testlearn::kreportNumber = $$reportNumber ]
    #If a non finding OK or NA record exists, change it into the first finding record
    Set Field [ testlearn::InspectionItemCountLocation; 1 ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    #
    #increase number of findings for item in all locations
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCount; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #first see if a report record exists for this item
    Go to Layout [ “PrintReportEdit” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    #
    If [ Get ( LastError ) = 401 ]
    #
    #create new report record and put in all required information
    New Record/Request
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$library ]
    Set Field [ report::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ report::RecordModifyDate; Get ( CurrentTimeStamp ) ]
    Set Field [ report::khealth; TEMP::kdefaultHealth ]
    End If
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Set Variable [ $id; Value:testlearn::_Ltestlearn ]
    Sort Records [ Specified Sort Order: ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $ID = testlearn::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    Exit Script [ ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #
    #
    #
    New Record/Request
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ testlearn::kcsection; $$Library ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Set Field [ testlearn::Location; $$locationName ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ testlearn::RecordModifyDate; Get ( CurrentTimeStamp ) ]
    Set Field [ testlearn::kHealth; TEMP::kdefaultHealth ]
    #
    #increase number of findings for item for this contact's location
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCountLocation; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #increase number of findings for item
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCount; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #lock item location so it cannot be deleted unless all findings for it are deleted
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $$location ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "t" ]
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $$contact ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$ReportNumber ]
    Perform Find [ ]
    #
    #first see if a report record exists for this item
    Set Variable [ $$stopLoadReportRecord; Value:1 ]
    Go to Layout [ “PrintReportEdit” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    #
    If [ Get (LastError) = 401 ]
    #
    #create new report record and put in all required information
    New Record/Request
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$library ]
    End If
    Set Variable [ $$stopLoadReportRecord ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Set Variable [ $id; Value:testlearn::_Ltestlearn ]
    Sort Records [ Specified Sort Order: testlearn::Location; ascending testlearn::_Number; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $ID = testlearn::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    #
    #Load new record to set variables.
    Set Variable [ $$stopLoadTestRecord ]
    Perform Script [ “loadTestRecord” ]
    #

Fields used in this script

    testlearn::ktestSubject
    testlearn::ktest
    testlearn::kreportNumber
    testlearn::InspectionItemCountLocation
    testlearn::kaudienceLocation
    testlearn::InspectionItemCount
    report::ktestSubject
    report::ktest
    report::kreportNumber
    report::ksection
    TEMP::kdefaultNodePrimary
    report::kRecordCreatorNode
    report::RecordModifyDate
    TEMP::kdefaultHealth
    report::khealth
    InspectItems::gprogressGlobal
    testlearn::_Ltestlearn
    <Missing Field>
    testlearn::recordnumberglobal
    testlearn::recordcountglobal
    testlearn::kcsection
    testlearn::Location
    testlearn::kRecordCreatorNode
    testlearn::RecordModifyDate
    testlearn::kHealth
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    tagTestSubjectLocation::reportNumber
    testlearn::_Number

Scripts used in this script

    loadTestRecord

Layouts used in this script

    step4_InspectionFinding
    PrintReportEdit
    step3_InspectionItems
    discoveries
    tableTestSubjectFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newTestRecord]	Parent Folder: [test]	Next Script: [gotoTestItem]
Script Name	linkTestFocusOrUnlinkTestFocus
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    newTestGroup
    newTest

Script Definition
Script Steps

    #
    #If tag has not yet been selected, then link it.
    Set Variable [ $focus; Value:tagLocation::_Ltag ]
    Go to Field [ ]
    Select Window [ Name: "Setup"; Current file ]
    If [ $focus & ¶ ≠ FilterValues ( test::kcfocusALL ; $focus & "¶" ) ]
    #
    Set Variable [ $currentfocuses; Value:test::kcfocusALL ]
    Set Field [ test::kcfocusALL; $focus & "¶" & $currentfocuses ]
    #
    #Reset conditional formatting variable for focuses.
    Set Variable [ $$focuses; Value:test::kcfocusALL ]
    Go to Field [ ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    #If tag has been selected, then unlink it.
    Set Variable [ $currentfocuses; Value:test::kcfocusALL ]
    Set Field [ test::kcfocusALL; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $currentfocuses ) ≠ ValueCount ( Substitute ( $currentfocuses ; $focus & "¶" ; "" ) ) ; Substitute ( $currentfocuses ; $focus & "¶" ; "" ) ; Substitute ( $currentfocuses ; $focus ; "" ) ) ]
    #
    #Reset conditional formatting variable for focuses.
    Set Variable [ $$focuses; Value:test::kcfocusALL ]
    Go to Field [ ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    tagLocation::_Ltag
    test::kcfocusALL

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [linkTestFocusOrUnlinkTestFocus]	Parent Folder: [test]	Next Script: [step2_OpenInspectionItemsTEST]
Script Name	gotoTestItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set both a variable and temp field with item ID
    #or Lock number. Eventually need to pick one
    #or the other, but due to current deadline that
    #cleanup will have to come later.
    Set Variable [ $$item; Value:InspectItems::_Ltest ]
    Set Field [ TEMP::ktest; InspectItems::_Ltest ]
    #
    #Set initial test item list to check so when user clicks
    #on the button next to an item it turns green instead
    #inserting its text into the test discovery's text box.
    Set Field [ TEMP::textORcheck; "check" ]
    #
    #Set detail temp fields for use on Tag Menus window.
    Set Field [ TEMP::ktestItemList; InspectItems::ktestItemList ]
    Set Field [ TEMP::ktestItemListOLD; InspectItems::ktestItemList ]
    #
    #Prevent test records from loading to speed up
    #this script.
    Set Variable [ $$stopLoadTestRecord; Value:1 ]
    #
    #This field does show up elsewhere but I am not
    #sure after what it does. My bad for not making
    #thorough comments during earlier developement.
    Set Field [ InspectItems::glocationNameGlobal; TextStyleAdd ( TEMP::LocationName ; Lowercase ) ]
    #
    #find and show all test records.
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kcsection; $$library ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    #
    #Create new test record if there are none.
    If [ Get (LastError) = 401 ]
    Perform Script [ “newTestRecord” ]
    #
    #If there is OK or NA record, change it into a test
    #record. (NA and OK records tell the user they
    #have inspected an item and found it OK or not
    #needing to be tested. If OK, the user has decided
    #not to record any details. So a record exist
    #but it is not being used to record details.
    #These next steps will turn that non-test record
    #into a test record.)
    Else If [ Get (FoundCount) = 1 and $$Location = testlearn::kaudienceLocation and testlearn::kreportNumber = $$reportNumber and testlearn::InspectionItemCountLocation = "N/A" or Get (FoundCount) = 1 and $$Location = testlearn::kaudienceLocation and testlearn::kreportNumber = $$reportNumber and testlearn::InspectionItemCountLocation = "OK" or Get (FoundCount) = 1 and $$Location = testlearn::kaudienceLocation and testlearn::kreportNumber = $$reportNumber and testlearn::InspectionItemCountLocation = "★" ]
    #
    #If there is OK or NA record, change it into a test
    #by change NA or OK to 1, as in 1 test record.
    Set Field [ testlearn::InspectionItemCountLocation; 1 ]
    #
    #increase number of test records for item overall
    #from zero to 1.
    Set Field [ testlearn::InspectionItemCount; 1 ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    End If
    #
    #Group records by test subject location.
    Sort Records [ Specified Sort Order: testlearn::Location; ascending testlearn::_Number; ascending ] [ Restore; No dialog ]
    #
    #Omit all NA, OK, and star records if any (these
    #records function as visual indicators of having
    #made a decision not to create a test record
    #because NA = it was not applicable, OK=it was
    #fine, and star symbol = because a test record
    #already created duplicates the finding in this
    #test subject location),
    Go to Record/Request/Page [ First ]
    Loop
    If [ testlearn::InspectionItemCountLocation = "N/A" or testlearn::InspectionItemCountLocation = "OK" or testlearn::InspectionItemCountLocation = "★" ]
    Omit Record
    Go to Record/Request/Page [ Previous ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Now go the last test record for this test location
    #if any. It will be conditionally formatted green,
    #while other location records will be yellow and
    #records from other tests for this item will be blue.
    #Blue records indicate a favorite record.
    Go to Record/Request/Page [ Last ]
    Loop
    Exit Loop If [ testlearn::kaudienceLocation = $$Location ]
    Go to Record/Request/Page [ Previous; Exit after last ]
    End Loop
    #
    #Set the numbers for the navigation arrows
    #at the top of the screen: record # / total #.
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    #
    #Conditionally format current test record and tags.
    Set Variable [ $$stopLoadTestRecord ]
    Perform Script [ “loadTestRecord” ]
    Set Variable [ $$testItem; Value:testlearn::kctestItem ]
    #
    #Find all details for this item.
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “menuTestItem” ]
    #
    #Return focus to Test window.
    Select Window [ Name: "Test"; Current file ]

Fields used in this script

    InspectItems::_Ltest
    TEMP::ktest
    TEMP::textORcheck
    InspectItems::ktestItemList
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    TEMP::LocationName
    InspectItems::glocationNameGlobal
    testlearn::ktestSubject
    testlearn::ktest
    testlearn::kcsection
    testlearn::kreportNumber
    testlearn::kaudienceLocation
    testlearn::InspectionItemCountLocation
    testlearn::InspectionItemCount
    testlearn::Location
    testlearn::_Number
    testlearn::recordnumberglobal
    testlearn::recordcountglobal
    testlearn::kctestItem

Scripts used in this script

    newTestRecord
    loadTestRecord
    menuTestItem

Layouts used in this script

    step4_InspectionFinding

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoTestItem]	Parent Folder: [test]	Next Script: [loadItemRecord]
Script Name	step2_OpenInspectionItemsTEST
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $$TSRecordNumber; Value:Get (RecordNumber) ]
    Go to Field [ ]
    #
    If [ TEMP::ksection = "" ]
    Go to Field [ TEMP::ksection ] [ Select/perform ]
    Halt Script
    Else If [ TEMP::reportNumber = "" ]
    Go to Field [ TEMP::reportNumber ] [ Select/perform ]
    Halt Script
    Else If [ tagTestSubjectLocation::focusName = "" ]
    Halt Script
    End If
    Set Field [ TEMP::kdefaultNodeTestSubject; tagTestSubjectLocation::knode ]
    Set Field [ tagTestSubjectLocation::TimeStart; Get ( CurrentTime ) ]
    Set Variable [ $status; Value:tagTestSubjectLocation::inUse ]
    Set Variable [ $$timeRecord; Value:Get ( RecordNumber ) ]
    Set Variable [ $$library; Value:TEMP::ksection ]
    #
    #!!!need to go through database and remove all variables like $$reportnumber that are used in mulitple scripts and make it a temp field.
    Set Variable [ $$reportnumber; Value:tagTestSubjectLocation::reportNumber ]
    Set Field [ TEMP::reportNumber; tagTestSubjectLocation::reportNumber ]
    Set Variable [ $$contact; Value:TEMP::kdefaultNodeTestSubject ]
    #
    #note general or canned location user identified
    Set Variable [ $$locationName; Value:tagTestSubjectLocation::focusName ]
    Set Field [ TEMP::LocationName; TextStyleAdd ( $$locationName ; Titlecase ) ]
    #
    #note new location ID number and name user created for this specific location in the contact's building
    Set Variable [ $$location; Value:tagTestSubjectLocation::_LtestSubjectLocation ]
    Set Variable [ $$itemLocation; Value:tagTestSubjectLocation::kfocus ]
    #
    #Goto no tag layout in Tag Menus as this next
    #main screen is for selection only. It does not
    #show any records that the user might want to
    #tag. I thought about closing the Tag Menus
    #window, but in testing it was odd, and so better
    #just to keep the window open and show no tags
    #but do change its layout to the look and feel
    #of the layouts the user will see in test mode
    #in the Tag Menus window.
    Go to Layout [ “testMenuNoTag” (TEMP) ]
    Select Window [ Name: "Setup"; Current file ]
    #
    Set Field [ TEMP::testerAndsubject; //tagDefaultNodePrimary::tag & " testing " & ¶ & $testsubjectName & "'s"& ¶ & tempSetup::sectionName //$testsubjectName & ¶ & $$locationName & ¶ & tempSetup::sectionName //tempSetup::sectionName & " | " & $testsubjectName tempSetup::sectionName & " | " & tagDefaultTestSubject::tag ]
    Set Window Title [ Current Window; New Title: "Test" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Enter Find Mode [ ]
    #
    #now find and show all canned inspection items associated with this generic canned location
    Set Field [ InspectItems::kcfocusALL; $$itemLocation ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “defaultTest” (tagTestSubjectLocation) ]
    Show Custom Dialog [ Title: "!"; Message: "No items have been assigned to this area for assessment."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    // If [ PatternCount ( Get ( ApplicationVersion ) ; "GO" ) = "GO" ]
    Sort Records [ Specified Sort Order: ruleTestInpsection::name; ascending InspectItems::order; based on value list: “order” ] [ Restore; No dialog ]
    Set Field [ InspectItems::glocationNameGlobal; $$locationName ]
    Set Field [ InspectItems::kgaudienceLocation; $$location ]
    Set Field [ InspectItems::gcontactNameGlobal; $$testsubjectName ]
    Set Field [ InspectItems::kgreportNumber; $$reportNumber ]
    Set Field [ InspectItems::kgtester; TEMP::kdefaultNodeTestSubject ]
    If [ $status = "" ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    Scroll Window [ Home ]
    Exit Script [ ]
    Else If [ $status = "t" ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Scroll Window [ Home ]
    Exit Script [ ]
    End If
    Set Field [ InspectItems::gprogressGlobal; "status: done" ]
    Scroll Window [ Home ]

Fields used in this script

    TEMP::ksection
    TEMP::reportNumber
    tagTestSubjectLocation::focusName
    tagTestSubjectLocation::knode
    TEMP::kdefaultNodeTestSubject
    tagTestSubjectLocation::TimeStart
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::reportNumber
    TEMP::LocationName
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::kfocus
    tempSetup::sectionName
    tagDefaultTestSubject::tag
    TEMP::testerAndsubject
    InspectItems::kcfocusALL
    ruleTestInpsection::name
    InspectItems::order
    InspectItems::glocationNameGlobal
    InspectItems::kgaudienceLocation
    InspectItems::gcontactNameGlobal
    InspectItems::kgreportNumber
    InspectItems::kgtester
    InspectItems::gprogressGlobal

Scripts used in this script

Layouts used in this script

    testMenuNoTag
    step3_InspectionItems
    defaultTest

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [step2_OpenInspectionItemsTEST]	Parent Folder: [test]	Next Script: [step3_OpenOneItemJustLook]
Script Name	loadItemRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    Set Variable [ $$thing; Value:InspectItems::ktestGroup ]
    Set Variable [ $$item; Value:InspectItems::_Ltest ]
    Set Variable [ $$itemName; Value:InspectItems::testName ]
    Set Field [ TEMP::testName; InspectItems::testName ]
    Set Field [ TEMP::ktest; InspectItems::_Ltest ]

Fields used in this script

    InspectItems::ktestGroup
    InspectItems::_Ltest
    InspectItems::testName
    TEMP::testName
    TEMP::ktest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadItemRecord]	Parent Folder: [test]	Next Script: [returnToStep3]
Script Name	step3_OpenOneItemJustLook
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    If [ tlResults::InspectionItemCount ≠ "" ]
    #note item's ID number and name
    Set Variable [ $$item; Value:InspectItems::_Ltest ]
    #
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    #
    #find and show all inspection findings
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearn::<Field Missing>; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    If [ testlearn::InspectionItemCountLocation = "N/A" or testlearn::InspectionItemCountLocation = "OK" or testlearn::InspectionItemCountLocation = "★" ]
    Omit Record
    Go to Record/Request/Page [ Previous ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Go to Record/Request/Page [ Last ]
    Loop
    Exit Loop If [ testlearn::<Field Missing> = $$Location ]
    Go to Record/Request/Page [ Previous; Exit after last ]
    End Loop
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    End If

Fields used in this script

    tlResults::InspectionItemCount
    InspectItems::_Ltest
    testlearn::ktestSubject
    testlearn::ktest
    <Missing Field>
    testlearn::InspectionItemCountLocation
    testlearn::recordnumberglobal
    testlearn::recordcountglobal

Scripts used in this script

Layouts used in this script

    step4_InspectionFinding

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [step3_OpenOneItemJustLook]	Parent Folder: [test]	Next Script: [done]
Script Name	returnToStep3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    // Set Field [ InspectItems::glocationNameGlobal; $$contactName & ": " & $$locationName ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “testMenuNoTag” (TEMP) ]
    Select Window [ Name: "Test"; Current file ]
    Set Field [ TEMP::showFavorites; "" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]

Fields used in this script

    InspectItems::glocationNameGlobal
    TEMP::showFavorites

Scripts used in this script

Layouts used in this script

    testMenuNoTag
    step3_InspectionItems

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [returnToStep3]	Parent Folder: [test]	Next Script: [delete_Evidence]
Script Name	done
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Freeze Window
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ InspectItems::kcfocusALL; $$itemLocation ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Exit Script [ ]
    End If
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $$location ]
    Perform Find [ ]
    If [ tagTestSubjectLocation::inUse = "t" ]
    Set Field [ tagTestSubjectLocation::inUse; "d" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: done" ]
    Exit Script [ ]
    End If
    Set Field [ tagTestSubjectLocation::inUse; "t" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]

Fields used in this script

    testlearn::ktestSubject
    testlearn::kaudienceLocation
    InspectItems::kcfocusALL
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::inUse
    InspectItems::gprogressGlobal

Scripts used in this script

Layouts used in this script

    discoveries
    step3_InspectionItems
    tableTestSubjectFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [done]	Parent Folder: [test]	Next Script: [OKonInpsection]
Script Name	delete_Evidence
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ testlearn::_Ltestlearn = "" ]
    Halt Script
    End If
    Set Variable [ $delete; Value:testlearn::_Ltestlearn ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Set Variable [ $TempLocation; Value:testlearn::kaudienceLocation ]
    Set Variable [ $TempReportNumber; Value:testlearn::kreportNumber ]
    Set Variable [ $TempContact; Value:testlearn::ktestSubject ]
    Set Variable [ $$step3_OpenOneItem; Value:1 ]
    Go to Field [ ]
    Refresh Window
    // If [ $TempLocation = $$location ]
    Show Custom Dialog [ Title: "!"; Message: "Delete evidence number " & testlearn::_Number & " ?"; Buttons: “Cancel”, “Delete” ]
    #THIS IS DISABLED AND SHOULD EVENTUALLY
    #BE DELETED AFTER TESTING. THERE USE TO BE
    #A FAVORITE FIELD THAT HAS BEEN REMOVED.
    #SEE EARLIER VERSIONS FOR HOW THIS FUNCTIONED.
    #IN SHORT, IT DID WHAT MAKE INFO BUTTON
    #NOW DOES.
    // Else If [ $TempLocation ≠ $$location ]
    // Show Custom Dialog [ Title: "!"; Message: "Delete evidence number " & testlearn::_Number & " ? NOTE: This piece of evidence belongs to " & tagTLTestSubject::<Field Missing> & "' evidence collection number " & testlearn::kreportNumber & " ."; Buttons: “Cancel”, “Delete” ]
    // End If
    If [ Get ( LastMessageChoice ) = 2 ]
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $$stopLoadTestRecord; Value:1 ]
    #user may be showing favorites, so first make sure
    #only this reports records are showing in case this is
    #the last record for this item in which case the report
    #page for this item also needs to be deleted.
    If [ $TempLocation = $$location ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Set Field [ testlearn::ktestSubject; $TempContact ]
    Perform Find [ ]
    End If
    Go to Record/Request/Page [ Last ]
    If [ Get (RecordNumber) = 1 ]
    Delete Record/Request [ No dialog ]
    Go to Layout [ “PrintReportEdit” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $TempContact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $TempReportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Delete All Records [ No dialog ]
    Set Variable [ $delete ]
    #Unlock Item Location IF this was the last item
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $TempLocation ]
    Set Field [ tagTestSubjectLocation::reportNumber; $TempReportNumber ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for current library report number
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $TempContact ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$reportNumber ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    If [ InspectItems::kgaudienceLocation = $TempLocation ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    End If
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::glocationNameGlobal; $$locationName ]
    Exit Script [ ]
    End If
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Delete Record/Request [ No dialog ]
    #THIS IS DISABLED AND SHOULD EVENTUALLY
    #BE DELETED AFTER TESTING. THERE USE TO BE
    #A FAVORITE FIELD THAT HAS BEEN REMOVED.
    #SEE EARLIER VERSIONS FOR HOW THIS FUNCTIONED.
    #IN SHORT, IT DID WHAT MAKE INFO BUTTON
    #NOW DOES.
    // #If this is a favorite item and it is the only one then delete the report page created for it.
    // If [ $TempLocation ≠ $$location ]
    // Enter Find Mode [ ]
    // Set Field [ testlearn::ktest; $$item ]
    // Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    // Set Field [ testlearn::ktestSubject; $TempContact ]
    // Perform Find [ ]
    // If [ Get (LastError) = 401 ]
    // Go to Layout [ “PrintReportEdit” (report) ]
    // Enter Find Mode [ ]
    // Set Field [ report::ktestSubject; $TempContact ]
    // Set Field [ report::ktest; $$item ]
    // Set Field [ report::kreportNumber; $TempReportNumber ]
    // Set Field [ report::ksection; $$Library ]
    // Perform Find [ ]
    // Delete All Records [ No dialog ]
    // Set Variable [ $delete ]
    // End If
    // End If
    #GET ID INFO as is from different location
    #Unlock Item Location
    #zero out findings for item for this contact's location
    #
    #decrease number of findings for item for this contact's location
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    #Unlock Item Location
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $TempLocation ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $$contact ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$reportNumber ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    If [ InspectItems::kgaudienceLocation = $TempLocation ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    Else If [ Get (LastError) ≠ 401 ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCountLocation; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Set Field [ testlearn::ktestSubject; $TempContact ]
    Perform Find [ ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ testlearn::InspectionItemCount; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #THIS IS DISABLED AND SHOULD EVENTUALLY
    #BE DELETED AFTER TESTING. THERE USE TO BE
    #A FAVORITE FIELD THAT HAS BEEN REMOVED.
    #SEE EARLIER VERSIONS FOR HOW THIS FUNCTIONED.
    #IN SHORT, IT DID WHAT MAKE INFO BUTTON
    #NOW DOES.
    // If [ $TempLocation ≠ $$location ]
    // Enter Find Mode [ ]
    // Set Field [ testlearn::ktestSubject; $$contact ]
    // Set Field [ testlearn::ktest; $$item ]
    // Set Field [ testlearn::kreportNumber; $$reportNumber ]
    // Perform Find [ ]
    // #since this was a favorite record that was deleted, show any favorite records that remain
    // Enter Find Mode [ ]
    // Set Field [ testlearn::ktest; $$item ]
    // Extend Found Set [ ]
    // Sort Records [ Specified Sort Order: testlearn::kcsection; ascending testlearn::kreportNumber; ascending ] [ Restore; No dialog ]
    // Go to Record/Request/Page [ Last ]
    // End If
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    #
    #
    #Load new record to set variables.
    Set Variable [ $$stopLoadTestRecord ]
    Perform Script [ “loadTestRecord” ]
    #
    Exit Script [ ]
    End If
    Set Variable [ $delete ]
    Set Variable [ $$step3_OpenOneItem ]
    Refresh Window

Fields used in this script

    testlearn::_Ltestlearn
    testlearn::kaudienceLocation
    testlearn::kreportNumber
    testlearn::ktestSubject
    testlearn::_Number
    testlearn::ktest
    report::ktestSubject
    report::ktest
    report::kreportNumber
    report::ksection
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::reportNumber
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    InspectItems::kgaudienceLocation
    InspectItems::gprogressGlobal
    InspectItems::glocationNameGlobal
    testlearn::InspectionItemCountLocation
    testlearn::InspectionItemCount
    testlearn::kcsection
    testlearn::recordnumberglobal
    testlearn::recordcountglobal

Scripts used in this script

    loadTestRecord

Layouts used in this script

    PrintReportEdit
    discoveries
    tableTestSubjectFocus
    step3_InspectionItems
    step4_InspectionFinding

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [delete_Evidence]	Parent Folder: [test]	Next Script: [OKonReport]
Script Name	OKonInpsection
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ testlearn::OK = "" ]
    Set Field [ testlearn::OK; TextSize ( "☺" ; 42 ) ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ testlearn::OK = "☺" ]
    Set Field [ testlearn::OK; TextSize ( "⚇"; 50 ) ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ testlearn::OK = "⚇" ]
    Set Field [ testlearn::OK; "☹" ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Set Field [ testlearn::OK; "" ]
    Go to Field [ ]

Fields used in this script

    testlearn::OK

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [OKonInpsection]	Parent Folder: [test]	Next Script: [inspectNextRecord]
Script Name	OKonReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ testlearnReportTags::OK = "" ]
    Set Field [ testlearnReportTags::OK; TextSize ( "☺" ; 30 ) ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ testlearnReportTags::OK = "☺" ]
    Set Field [ testlearnReportTags::OK; TextStyleAdd ( TextSize ( "⚇"; 75 ) ; Superscript ) ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ testlearnReportTags::OK = "⚇" ]
    Set Field [ testlearnReportTags::OK; "☹" ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Set Field [ testlearnReportTags::OK; "" ]
    Go to Field [ ]

Fields used in this script

    testlearnReportTags::OK

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [OKonReport]	Parent Folder: [test]	Next Script: [inspectPreviousRecord]
Script Name	inspectNextRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Go to Record/Request/Page [ Next ]
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]

Fields used in this script

    testlearn::recordnumberglobal
    testlearn::recordcountglobal

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inspectNextRecord]	Parent Folder: [test]	Next Script: [itemNA]
Script Name	inspectPreviousRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Go to Record/Request/Page [ Previous ]
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]

Fields used in this script

    testlearn::recordnumberglobal
    testlearn::recordcountglobal

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inspectPreviousRecord]	Parent Folder: [test]	Next Script: [inspectAddProblemToFinding]
Script Name	itemNA
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    If [ tlResults::_Ltestlearn = "" ]
    Freeze Window
    New Window [ ]
    #note item's ID number and name
    Set Variable [ $$item; Value:InspectItems::_Ltest ]
    Set Variable [ $$itemName; Value:InspectItems::testName ]
    Set Field [ TEMP::testName ]
    Go to Layout [ “discoveries” (testlearn) ]
    New Record/Request
    Set Field [ testlearn::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Set Field [ testlearn::Location; $$locationName ]
    Set Field [ testlearn::kcsection; $$Library ]
    Set Field [ testlearn::ktest; $$item ]
    #lock item location so it cannot be deleted unless all findings for it are deleted
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $$location ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "t" ]
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; TEMP::kdefaultNodeTestSubject ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ tlResults::InspectionItemCountLocation; "N/A" ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Go to Field [ ]
    Close Window [ Current Window ]
    Exit Script [ ]
    Else If [ tlResults::InspectionItemCountLocation = "" and tlResults::_Ltestlearn ≠ "" ]
    Set Field [ tlResults::InspectionItemCountLocation; "N/A" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Set Field [ TEMP::testName ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ tlResults::InspectionItemCountLocation = "N/A" ]
    Set Field [ tlResults::InspectionItemCountLocation; "OK" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Set Field [ TEMP::testName ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ tlResults::InspectionItemCountLocation = "N/A" or tlResults::InspectionItemCountLocation = "OK" ]
    If [ TLResultsOnReport::InspectionItemCount = "" ]
    Set Field [ TEMP::testName ]
    Show Custom Dialog [ Title: "FYI"; Message: "Use the star symbol to referr to other assessment findings. You currently do not have any for this item."; Buttons: “OK” ]
    Set Field [ tlResults::InspectionItemCountLocation; "" ]
    Go to Field [ ]
    Freeze Window
    New Window [ ]
    #note item's ID number and name
    Set Variable [ $$item; Value:InspectItems::_Ltest ]
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    #Unlock Item Location
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $$location ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; TEMP::kdefaultNodeTestSubject ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    Close Window [ Current Window ]
    Exit Script [ ]
    End If
    Set Field [ tlResults::InspectionItemCountLocation; "★" ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ tlResults::InspectionItemCountLocation ≠ "N/A" and tlResults::InspectionItemCountLocation ≠ "OK" and tlResults::InspectionItemCountLocation ≠ "★" ]
    Set Field [ TEMP::testName ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: in progress" ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Freeze Window
    New Window [ ]
    #note item's ID number and name
    Set Variable [ $$item; Value:InspectItems::_Ltest ]
    Set Field [ TEMP::testName ]
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    #Unlock Item Location
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $$location ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; TEMP::kdefaultNodeTestSubject ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    Close Window [ Current Window ]

Fields used in this script

    tlResults::_Ltestlearn
    InspectItems::_Ltest
    InspectItems::testName
    TEMP::testName
    TEMP::kdefaultNodeTestSubject
    testlearn::ktestSubject
    testlearn::kaudienceLocation
    testlearn::kreportNumber
    testlearn::Location
    testlearn::kcsection
    testlearn::ktest
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::knode
    tlResults::InspectionItemCountLocation
    InspectItems::gprogressGlobal
    TLResultsOnReport::InspectionItemCount

Scripts used in this script

Layouts used in this script

    discoveries
    tableTestSubjectFocus
    step3_InspectionItems

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [itemNA]	Parent Folder: [test]	Next Script: [returnToInspectionItems]
Script Name	inspectAddProblemToFinding
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Field [ testlearn::Caption; testlearn::Caption & ¶ & tagDetails::tag ]

Fields used in this script

    testlearn::Caption
    tagDetails::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inspectAddProblemToFinding]	Parent Folder: [test]	Next Script: [CHUNK_countInspectedItems]
Script Name	returnToInspectionItems
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Enter Find Mode [ ]
    Set Field [ InspectItems::kcfocusALL; $$genlocation ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: <Table Missing>; ascending ] [ Restore; No dialog ]

Fields used in this script

    InspectItems::kcfocusALL
    <Missing Field>

Scripts used in this script

Layouts used in this script

    step3_InspectionItems

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [returnToInspectionItems]	Parent Folder: [test]	Next Script: [exitAndStopclearCitationMatch]
Script Name	CHUNK_countInspectedItems
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #record the number of recommendations already counted for this item add 1 to it
    Set Variable [ $count; Value:testlearn::InspectionItemCount ]
    Set Field [ testlearn::InspectionItemCount; $count + 1 ]

Fields used in this script

    testlearn::InspectionItemCount

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNK_countInspectedItems]	Parent Folder: [test]	Next Script: [exitAndOrderEvidence]
Script Name	exitAndStopclearCitationMatch
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$turnOffThisScript = 1 ]
    Set Variable [ $$turnOffThisScript; Value:2 ]
    End If

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [exitAndStopclearCitationMatch]	Parent Folder: [test]	Next Script: [reportNewEvidence]
Script Name	exitAndOrderEvidence
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Sort Records [ Specified Sort Order: testlearnReportTags::orderDiscovery; based on value list: “order” testlearnReportTags::Location; ascending testlearnReportTags::timestamp; ascending testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]

Fields used in this script

    testlearnReportTags::orderDiscovery
    testlearnReportTags::Location
    testlearnReportTags::timestamp
    testlearnReportTags::_Ltestlearn

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [exitAndOrderEvidence]	Parent Folder: [test]	Next Script: [reportDeleteEvidence]
Script Name	reportNewEvidence
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    If [ testlearnReportTags::gkaudienceLocation = "" ]
    Show Custom Dialog [ Title: "!"; Message: "Select a test section by 1) clicking on the USE button under a picture or by 2) clicking the test section button (next to new button)."; Buttons: “OK” ]
    Halt Script
    End If
    #
    #
    New Record/Request
    Set Field [ testlearnReportTags::ktestSubject; $$contact ]
    Set Field [ testlearnReportTags::kaudienceLocation; TEMP::kuserLocation ]
    Set Field [ testlearnReportTags::kcsection; TEMP::ksection ]
    Set Field [ testlearnReportTags::kreportNumber; TEMP::reportNumber ]
    Set Field [ testlearnReportTags::Location; TEMP::LocationName ]
    Set Field [ testlearnReportTags::ktest; TEMP::ktest ]
    Set Field [ testlearnReportTags::timestamp; TEMP::TimeStamp ]
    Set Field [ testlearn::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ testlearn::RecordModifyDate; Get ( CurrentTimeStamp ) ]
    Set Field [ testlearn::kHealth; TEMP::kdefaultHealth ]
    #
    #note the new record id so when after you sort the
    #the records you will be able to put the focus back on
    #this newly created record in a loop at the end of this script.
    Set Variable [ $kpn; Value:testlearnReportTags::_Ltestlearn ]
    #
    #increase number of findings for item for this contact's location
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::kaudienceLocation; $$location ]
    Set Field [ testlearn::ktest; $$item ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCountLocation; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #increase number of findings for item
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCount; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #lock item location so it cannot be deleted unless all findings for it are deleted
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $$location ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "t" ]
    #
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $$contact ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$ReportNumber ]
    Perform Find [ ]
    Go to Layout [ original layout ]
    Sort Records [ Specified Sort Order: testlearnReportTags::Location; ascending testlearnReportTags::timestamp; ascending testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearnReportTags::_Ltestlearn = $kpn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop

Fields used in this script

    testlearnReportTags::gkaudienceLocation
    testlearnReportTags::ktestSubject
    TEMP::kuserLocation
    testlearnReportTags::kaudienceLocation
    TEMP::ksection
    testlearnReportTags::kcsection
    TEMP::reportNumber
    testlearnReportTags::kreportNumber
    TEMP::LocationName
    testlearnReportTags::Location
    TEMP::ktest
    testlearnReportTags::ktest
    TEMP::TimeStamp
    testlearnReportTags::timestamp
    TEMP::kdefaultNodePrimary
    testlearn::kRecordCreatorNode
    testlearn::RecordModifyDate
    TEMP::kdefaultHealth
    testlearn::kHealth
    testlearnReportTags::_Ltestlearn
    testlearn::ktestSubject
    testlearn::kaudienceLocation
    testlearn::ktest
    testlearn::InspectionItemCountLocation
    testlearn::kreportNumber
    testlearn::InspectionItemCount
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    tagTestSubjectLocation::reportNumber

Scripts used in this script

Layouts used in this script

    discoveries
    tableTestSubjectFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportNewEvidence]	Parent Folder: [test]	Next Script: [reportSelectLocation]
Script Name	reportDeleteEvidence
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    If [ testlearnReportTags::_Ltestlearn = "" ]
    Halt Script
    End If
    If [ testlearnReportTags::inUse ≠ "" ]
    Show Custom Dialog [ Title: "!"; Message: testlearnReportTags::_Number & " is in use on " & testlearnReportTags::inUseNumberOfTimes & If ( testlearnReportTags::inUseNumberOfTimes = 1 ; " report and must be removed before it can be deleted." ; " reports and must be removed from all of them before it can be deleted." ); Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #make to be deleted record red and capture info for delete
    Set Variable [ $delete; Value:testlearnReportTags::_Ltestlearn ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Set Variable [ $TempLocation; Value:testlearnReportTags::kaudienceLocation ]
    Set Variable [ $TempReportNumber; Value:testlearnReportTags::kreportNumber ]
    Set Variable [ $TempContact; Value:testlearnReportTags::ktestSubject ]
    Go to Field [ ]
    Refresh Window
    If [ testlearnReportTags::ktestSubject + testlearnReportTags::kreportNumber = $$contact + $$reportNumber ]
    Show Custom Dialog [ Title: "!"; Message: "Delete evidence number " & testlearnReportTags::_Number & " ?"; Buttons: “Cancel”, “Delete” ]
    #THIS IS DISABLED AND SHOULD EVENTUALLY
    #BE DELETED AFTER TESTING. THERE USE TO BE
    #A FAVORITE FIELD THAT HAS BEEN REMOVED.
    #SEE EARLIER VERSIONS FOR HOW THIS FUNCTIONED.
    #IN SHORT, IT DID WHAT MAKE INFO BUTTON
    #NOW DOES.
    // Else If [ testlearnReportTags::ktestSubject + testlearnReportTags::kreportNumber ≠ $$contact + $$reportNumber ]
    // Show Custom Dialog [ Title: "!"; Message: "Delete evidence number " & testlearnReportTags::_Number & " ? NOTE: THIS EVIDENCE IS A FAVORITE BELONGING A DIFFERENT REPORT."; Buttons: “Cancel”, “Delete” ]
    End If
    If [ Get ( LastMessageChoice ) = 2 ]
    #user may be showing favorites, so first make sure
    #only this reports records are showing in case this is
    #the last record for this item in which case the report
    #page for this item also needs to be deleted.
    If [ testlearnReportTags::ktestSubject + testlearnReportTags::kreportNumber = $$contact + $$reportNumber ]
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Set Field [ testlearn::ktestSubject; $TempContact ]
    Perform Find [ ]
    End If
    Go to Record/Request/Page [ Last ]
    If [ Get (RecordNumber) = 1 ]
    #switch back to this layout to preserve found record
    #set in case more than one record was found
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Show Custom Dialog [ Title: "!"; Message: "Deleting this last piece of evidence will delete this page of the report too, do you wish to proceed? If you wish to keep this report page then add new evidence before deleting this evidence."; Buttons: “Cancel”, “Delete” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Go to Layout [ “discoveries” (testlearn) ]
    Delete Record/Request [ No dialog ]
    Else If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $delete ]
    Refresh Window
    Exit Script [ ]
    End If
    Go to Layout [ “PrintReportEdit” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $TempContact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $TempReportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Delete All Records [ No dialog ]
    Set Variable [ $delete ]
    #Unlock Item Location IF this was the last item
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $TempLocation ]
    Set Field [ tagTestSubjectLocation::reportNumber; $TempReportNumber ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for current library report number
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $TempContact ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$reportNumber ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    If [ InspectItems::kgaudienceLocation = $TempLocation ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    End If
    Close Window [ Name: "Report"; Current file ]
    Close Window [ Name: "Recommendations"; Current file ]
    Perform Script [ “editReport” ]
    Exit Script [ ]
    End If
    #switch back to this layout so don't have reassign
    #fields for inspection layout. (script was written for
    #findings layout)
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Delete Record/Request [ No dialog ]
    Go to Layout [ “discoveries” (testlearn) ]
    #THIS IS DISABLED AND SHOULD EVENTUALLY
    #BE DELETED AFTER TESTING. THERE USE TO BE
    #A FAVORITE FIELD THAT HAS BEEN REMOVED.
    #SEE EARLIER VERSIONS FOR HOW THIS FUNCTIONED.
    #IN SHORT, IT DID WHAT MAKE INFO BUTTON
    #NOW DOES.
    // #If this is a favorite item and it is the only one then delete the report page created for it.
    // If [ testlearnReportTags::ktestSubject + testlearnReportTags::kreportNumber ≠ $$contact + $$reportNumber ]
    // Enter Find Mode [ ]
    // Set Field [ testlearn::ktest; $$item ]
    // Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    // Set Field [ testlearn::ktestSubject; $TempContact ]
    // Perform Find [ ]
    // If [ Get (LastError) = 401 ]
    // Go to Layout [ “PrintReportEdit” (report) ]
    // Enter Find Mode [ ]
    // Set Field [ report::ktestSubject; $TempContact ]
    // Set Field [ report::ktest; $$item ]
    // Set Field [ report::kreportNumber; $TempReportNumber ]
    // Set Field [ report::ksection; $$Library ]
    // Perform Find [ ]
    // Delete All Records [ No dialog ]
    // Set Variable [ $delete ]
    // End If
    // End If
    #GET ID INFO as is from different location
    #Unlock Item Location
    #zero out findings for item for this contact's location
    #
    #decrease number of findings for item for this contact's location
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    #Unlock Item Location
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $TempLocation ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    // #refind all location records for this session
    // Enter Find Mode [ ]
    // Set Field [ tagTestSubjectLocation::knode; $$contact ]
    // Set Field [ tagTestSubjectLocation::reportNumber; $$reportNumber ]
    // Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    // Perform Find [ ]
    // Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    // If [ InspectItems::kgaudienceLocation = $TempLocation ]
    // Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    // End If
    Else If [ Get (LastError) ≠ 401 ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCountLocation; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Set Field [ testlearn::ktestSubject; $TempContact ]
    Perform Find [ ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ testlearn::InspectionItemCount; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #THIS IS DISABLED AND SHOULD EVENTUALLY
    #BE DELETED AFTER TESTING. THERE USE TO BE
    #A FAVORITE FIELD THAT HAS BEEN REMOVED.
    #SEE EARLIER VERSIONS FOR HOW THIS FUNCTIONED.
    #IN SHORT, IT DID WHAT MAKE INFO BUTTON
    #NOW DOES.
    // If [ $TempLocation ≠ $$location ]
    // Enter Find Mode [ ]
    // Set Field [ testlearn::ktestSubject; $$contact ]
    // Set Field [ testlearn::ktest; $$item ]
    // Set Field [ testlearn::kreportNumber; $$reportNumber ]
    // Perform Find [ ]
    // #since this was a favorite record that was deleted, show any favorite records that remain
    // Enter Find Mode [ ]
    // Set Field [ testlearn::ktest; $$item ]
    // Extend Found Set [ ]
    // Sort Records [ Specified Sort Order: testlearn::kcsection; ascending testlearn::kreportNumber; ascending ] [ Restore; No dialog ]
    // Go to Record/Request/Page [ Last ]
    // End If
    End If
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Set Variable [ $delete ]
    Refresh Window

Fields used in this script

    testlearnReportTags::_Ltestlearn
    testlearnReportTags::inUse
    testlearnReportTags::_Number
    testlearnReportTags::inUseNumberOfTimes
    testlearnReportTags::kaudienceLocation
    testlearnReportTags::kreportNumber
    testlearnReportTags::ktestSubject
    testlearn::ktest
    testlearn::kreportNumber
    testlearn::ktestSubject
    report::ktestSubject
    report::ktest
    report::kreportNumber
    report::ksection
    testlearn::kaudienceLocation
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::reportNumber
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    InspectItems::kgaudienceLocation
    InspectItems::gprogressGlobal
    testlearn::InspectionItemCountLocation
    testlearn::InspectionItemCount
    testlearn::kcsection

Scripts used in this script

    editReport

Layouts used in this script

    discoveries
    reportTagDiscovery
    PrintReportEdit
    tableTestSubjectFocus
    step3_InspectionItems
    step4_InspectionFinding

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportDeleteEvidence]	Parent Folder: [test]
Script Name	reportSelectLocation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Get ( LayoutName ) = "ReportLocationSelect" ]
    #note general or canned location user identified
    Set Variable [ $$locationName; Value:testlearnReportTags::gkaudienceLocation ]
    Set Field [ TEMP::kuserLocation; $$locationName ]
    #
    #note new location ID number and name user created for this specific location in the contact's building
    Set Variable [ $$location; Value:tagTestSubjectLocation::_LtestSubjectLocation ]
    Close Window [ Current Window ]
    Exit Script [ ]
    End If
    If [ testlearnReportTags::kreportNumber ≠ $$reportNumber ]
    Show Custom Dialog [ Title: "!"; Message: "This evidence is a favority from another report, so its location information cannot be used for creating location based evidence for this report."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #set up new discovery field name with this
    #item's information.
    Set Field [ TEMP::LocationName; testlearnReportTags::Location ]
    Set Field [ TEMP::kuserLocation; testlearnReportTags::kaudienceLocation ]
    Set Field [ testlearnReportTags::gkaudienceLocation; testlearnReportTags::kaudienceLocation ]
    Set Field [ TEMP::TimeStamp; testlearnReportTags::timestamp ]

Fields used in this script

    testlearnReportTags::gkaudienceLocation
    TEMP::kuserLocation
    tagTestSubjectLocation::_LtestSubjectLocation
    testlearnReportTags::kreportNumber
    testlearnReportTags::Location
    TEMP::LocationName
    testlearnReportTags::kaudienceLocation
    testlearnReportTags::timestamp
    TEMP::TimeStamp

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


probablyNotInUse
	Parent Folder: [probablyNotInUse]	Next Script: [returnToStep2]
Script Name	returnToStep1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Layout [ <unknown> ]
    Set Variable [ $total; Value:<Table Missing>::<Field Missing> ]
    Set Field [ <Table Missing>; Abs ( <Table Missing>::<Field Missing> - Get ( CurrentTime ) ) + $total ]

Fields used in this script

    <Missing Field>

Scripts used in this script

Layouts used in this script

    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [returnToStep1]	Parent Folder: [probablyNotInUse]	Next Script: [delete_Finding Copy]
Script Name	returnToStep2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    editReport

Script Definition
Script Steps

    Go to Layout [ “defaultSetup” (tempSetup) ]
    Set Window Title [ Current Window; New Title: "Setup" ]
    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: 0 ]
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 2 ]
    End If
    #
    Go to Layout [ “defaultTest” (tagTestSubjectLocation) ]
    Perform Script [ “defaultTestLocationMenu” ]
    #
    Go to Record/Request/Page [ $$TSRecordNumber ] [ No dialog ]
    Set Variable [ $$TSRecordNumber ]

Fields used in this script

Scripts used in this script

    defaultTestLocationMenu

Layouts used in this script

    defaultSetup
    defaultTest

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [returnToStep2]	Parent Folder: [probablyNotInUse]
Script Name	delete_Finding Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ testlearn::_Ltestlearn = "" ]
    Halt Script
    End If
    Set Variable [ $delete; Value:testlearn::_Ltestlearn ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Set Variable [ $TempLocation; Value:testlearn::kaudienceLocation ]
    Set Variable [ $TempReportNumber; Value:testlearn::kreportNumber ]
    Go to Field [ ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete finding number " & testlearn::recordnumberglobal & "?"; Buttons: “Cancel”, “Delete” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #create new inspection record setting all fields with neccessary key copies
    #to unlock data
    Go to Record/Request/Page [ Last ]
    If [ Get (RecordNumber) = 1 ]
    Delete Record/Request [ No dialog ]
    Go to Layout [ “PrintReportEdit” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $TempReportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Delete All Records [ No dialog ]
    Set Variable [ $delete ]
    #Unlock Item Location
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $TempLocation ]
    Set Field [ tagTestSubjectLocation::reportNumber; $TempReportNumber ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for current library report number
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $$contact ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$reportNumber ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    If [ InspectItems::kgaudienceLocation = $TempLocation ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    End If
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    Set Field [ InspectItems::glocationNameGlobal; $$locationName ]
    Exit Script [ ]
    End If
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Delete Record/Request [ No dialog ]
    #If this is a favorite item and it is the only one then delete the report page created for it.
    If [ $TempLocation ≠ $$location ]
    Enter Find Mode [ ] [ Pause ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $TempReportNumber ]
    Perform Find [ ]
    Go to Record/Request/Page [ Last ]
    If [ Get (RecordNumber) = 1 ]
    Go to Layout [ “PrintReportEdit” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $TempReportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Delete All Records [ No dialog ]
    Set Variable [ $delete ]
    End If
    End If
    #GET ID INFO as is from different location
    #Unlock Item Location
    #zero out findings for item for this contact's location
    #
    #decrease number of findings for item for this contact's location
    Go to Layout [ “discoveries” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Perform Find [ ]
    #Unlock Item Location
    If [ Get ( LastError ) = 401 ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::_LtestSubjectLocation; $TempLocation ]
    Perform Find [ ]
    Set Field [ tagTestSubjectLocation::inUse; "" ]
    #refind all location records for this session
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $$contact ]
    Set Field [ tagTestSubjectLocation::reportNumber; $$reportNumber ]
    Set Field [ tagTestSubjectLocation::ksection; $$Library ]
    Perform Find [ ]
    Go to Layout [ “step3_InspectionItems” (InspectItems) ]
    If [ InspectItems::kgaudienceLocation = $TempLocation ]
    Set Field [ InspectItems::gprogressGlobal; "status: pending" ]
    End If
    Else If [ Get (LastError) ≠ 401 ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kaudienceLocation; $TempLocation ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Loop
    Set Field [ testlearn::InspectionItemCountLocation; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$item ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Set Variable [ $number; Value:Get (FoundCount) ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ testlearn::InspectionItemCount; $number ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Exit Script [ ]
    End If
    Set Variable [ $delete ]
    Refresh Window

Fields used in this script

    testlearn::_Ltestlearn
    testlearn::kaudienceLocation
    testlearn::kreportNumber
    testlearn::recordnumberglobal
    report::ktestSubject
    report::ktest
    report::kreportNumber
    report::ksection
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::reportNumber
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    InspectItems::kgaudienceLocation
    InspectItems::gprogressGlobal
    InspectItems::glocationNameGlobal
    testlearn::ktest
    testlearn::InspectionItemCountLocation
    testlearn::ktestSubject
    testlearn::InspectionItemCount
    testlearn::recordcountglobal

Scripts used in this script

Layouts used in this script

    PrintReportEdit
    discoveries
    tableTestSubjectFocus
    step3_InspectionItems
    step4_InspectionFinding

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


testReport
	Parent Folder: [testReport]	Next Script: [nextPage]
Script Name	pagePulldown
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Set Variable [ $$first ]
    Set Variable [ $$last ]
    Set Variable [ $record; Value:TEMP::ktest ]
    If [ test::_Ltest = $record ]
    Exit Script [ ]
    End If
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ test::_Ltest = $record ]
    Go to Record/Request/Page [ Next ]
    End Loop
    Perform Script [ “loadSetupTestRecord” ]

Fields used in this script

    TEMP::ktest
    test::_Ltest

Scripts used in this script

    loadSetupTestRecord

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [pagePulldown]	Parent Folder: [testReport]	Next Script: [previousPage]
Script Name	nextPage
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$first ]
    Set Variable [ $$last; Value:test::_Ltest ]
    Set Variable [ $library; Value:test::ksection ]
    Go to Record/Request/Page [ Next ]
    If [ test::ksection ≠ $library ]
    Go to Record/Request/Page [ Previous ]
    Refresh Window
    Exit Script [ ]
    End If
    If [ $$last ≠ test::_Ltest or Get (LastError) = 101 ]
    Set Field [ TEMP::theme; test::testName ]
    Perform Script [ “loadSetupTestRecord” ]
    // Go to Layout [ “testSetup” (test) ]
    // Go to Layout [ original layout ]
    End If
    Go to Field [ ]

Fields used in this script

    test::_Ltest
    test::ksection
    test::testName
    TEMP::theme

Scripts used in this script

    loadSetupTestRecord

Layouts used in this script

    testSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [nextPage]	Parent Folder: [testReport]	Next Script: [showModifier1]
Script Name	previousPage
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$last ]
    Set Variable [ $$first; Value:test::_Ltest ]
    Set Variable [ $library; Value:test::ksection ]
    Go to Record/Request/Page [ Previous ]
    If [ test::ksection ≠ $library ]
    Go to Record/Request/Page [ Next ]
    Refresh Window
    Exit Script [ ]
    End If
    If [ $$first ≠ test::_Ltest or Get (LastError) = 101 ]
    Set Field [ TEMP::theme; test::testName ]
    Perform Script [ “loadSetupTestRecord” ]
    Refresh Window
    // Go to Layout [ “testSetup” (test) ]
    // Go to Layout [ original layout ]
    End If
    Go to Field [ ]

Fields used in this script

    test::_Ltest
    test::ksection
    test::testName
    TEMP::theme

Scripts used in this script

    loadSetupTestRecord

Layouts used in this script

    testSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [previousPage]	Parent Folder: [testReport]	Next Script: [showModifier2]
Script Name	showModifier1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Commit Records/Requests
    If [ TEMP::kmodifier1 = "" ]
    Set Field [ TEMP::modifier1name; "" ]
    Exit Script [ ]
    End If
    #
    #the pulldown menu action selects the id number,
    #but not the name. To put the name into the TEMP
    #global field we will need to find it which is what the
    #rest of the script does.
    Set Variable [ $mod; Value:TEMP::kmodifier1 ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::_Ltag; $mod ]
    Perform Find [ ]
    Set Variable [ $name; Value:tagTable::tag ]
    Go to Layout [ original layout ]
    Set Field [ TEMP::modifier1name; $name ]
    Go to Field [ ]
    #
    #Tells user to select an order number not in use
    #if the order field is blank.
    If [ TEMP::orderMod1 = "" ]
    Show Custom Dialog [ Message: "Select an order number to place modifier before or after currently selected location: small location or location upstairs for example."; Buttons: “OK” ]
    Go to Field [ TEMP::orderMod1 ]
    End If

Fields used in this script

    TEMP::kmodifier1
    TEMP::modifier1name
    tagTable::_Ltag
    tagTable::tag
    TEMP::orderMod1

Scripts used in this script

Layouts used in this script

    tableTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showModifier1]	Parent Folder: [testReport]	Next Script: [newInspectionLocation]
Script Name	showModifier2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Commit Records/Requests
    If [ TEMP::kmodifier2 = "" ]
    Set Field [ TEMP::modifier2name; "" ]
    Exit Script [ ]
    End If
    #
    #the pulldown menu action selects the id number,
    #but not the name. To put the name into the TEMP
    #global field we will need to find it which is what the
    #rest of the script does.
    Set Variable [ $mod; Value:TEMP::kmodifier2 ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::_Ltag; $mod ]
    Perform Find [ ]
    Set Variable [ $name; Value:tagTable::tag ]
    Go to Layout [ original layout ]
    Set Field [ TEMP::modifier2name; $name ]
    Go to Field [ ]
    #
    #Tells user to select an order number not in use
    #if the order field is blank.
    If [ TEMP::orderMod2 = "" ]
    Show Custom Dialog [ Message: "Select an order number to place modifier before or after currently selected location: small location or location upstairs for example."; Buttons: “OK” ]
    Go to Field [ TEMP::orderMod2 ]
    End If

Fields used in this script

    TEMP::kmodifier2
    TEMP::modifier2name
    tagTable::_Ltag
    tagTable::tag
    TEMP::orderMod2

Scripts used in this script

Layouts used in this script

    tableTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showModifier2]	Parent Folder: [testReport]	Next Script: [deleteInspectionLocation]
Script Name	newInspectionLocation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ TEMP::ksection = "" ]
    Go to Field [ TEMP::ksection ] [ Select/perform ]
    Halt Script
    Else If [ TEMP::reportNumber = "" ]
    Go to Field [ TEMP::reportNumber ] [ Select/perform ]
    Halt Script
    Else If [ TEMP::LocationName = "" ]
    Show Custom Dialog [ Message: "A new test focus must have a name picked from the default test focus list, which will be displayed after you click OK."; Buttons: “OK” ]
    Go to Field [ TEMP::kfocus ] [ Select/perform ]
    Go to Object [ Object Name: "focus" ]
    Halt Script
    Else If [ TEMP::kdefaultNodeTestSubject = "" ]
    Show Custom Dialog [ Message: "New test focuses are created for specific test nodes. Pick one or create a new one in the node section before creating a new test focus."; Buttons: “OK” ]
    Halt Script
    End If
    Set Variable [ $tag; Value:TEMP::kfocus ]
    Set Variable [ $$stopFocusLoad; Value:1 ]
    #Had to capture report number as variable or
    #stop record load script which would replace
    #the Temp with nothing upon new record creation.
    #I decided to capture it.
    Set Variable [ $reportNumber; Value:TEMP::reportNumber ]
    Set Variable [ $mod1; Value:TEMP::kmodifier1 ]
    Set Variable [ $mod2; Value:TEMP::kmodifier2 ]
    New Record/Request
    Set Variable [ $nodeLocation; Value:tagTestSubjectLocation::_LtestSubjectLocation ]
    Set Field [ tagTestSubjectLocation::knode; TEMP::kdefaultNodeTestSubject ]
    Set Field [ tagTestSubjectLocation::ksection; TEMP::ksection ]
    Set Field [ tagTestSubjectLocation::reportNumber; $reportNumber ]
    Set Field [ tagTestSubjectLocation::kfocus; TEMP::kfocus ]
    Set Field [ tagTestSubjectLocation::kfocusAttribute1; TEMP::kmodifier1 ]
    Set Field [ tagTestSubjectLocation::kfocusAttribute2; TEMP::kmodifier2 ]
    Set Field [ tagTestSubjectLocation::focusName; TextStyleAdd ( TEMP::LocationName ; Lowercase ) ]
    Set Field [ tagTestSubjectLocation::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Go to Layout [ original layout ]
    Sort Records [ ] [ No dialog ]
    Set Field [ TEMP::reportNumber; tagTestSubjectLocation::reportNumber ]
    Set Variable [ $$stopFocusLoad ]
    Go to Field [ tagTestSubjectLocation::focusName ]

Fields used in this script

    TEMP::ksection
    TEMP::reportNumber
    TEMP::LocationName
    TEMP::kfocus
    TEMP::kdefaultNodeTestSubject
    TEMP::kmodifier1
    TEMP::kmodifier2
    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    tagTestSubjectLocation::reportNumber
    tagTestSubjectLocation::kfocus
    tagTestSubjectLocation::kfocusAttribute1
    tagTestSubjectLocation::kfocusAttribute2
    tagTestSubjectLocation::focusName
    TEMP::kdefaultNodePrimary
    tagTestSubjectLocation::kRecordCreatorNode

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newInspectionLocation]	Parent Folder: [testReport]	Next Script: [evidenceTag]
Script Name	deleteInspectionLocation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ tagTestSubjectLocation::_LtestSubjectLocation = "" ]
    Halt Script
    End If
    If [ tagTestSubjectLocation::inUse = "t" ]
    Show Custom Dialog [ Title: "!"; Message: "Deleting this set of test items is allowed after you delete all discoveries made during testing."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $delete; Value:tagTestSubjectLocation::_LtestSubjectLocation ]
    Set Variable [ $location; Value:tagTestSubjectLocation::kfocus ]
    Go to Field [ ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete " & tagTestSubject::tag & "'s " & "test number " & tagTestSubjectLocation::reportNumber & " of " & tagTestSubjectLocation::focusName & "?"; Buttons: “Cancel”, “Delete” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    End If
    Go to Layout [ original layout ]
    Set Variable [ $delete ]
    Refresh Window

Fields used in this script

    tagTestSubjectLocation::_LtestSubjectLocation
    tagTestSubjectLocation::inUse
    tagTestSubjectLocation::kfocus
    tagTestSubject::tag
    tagTestSubjectLocation::reportNumber
    tagTestSubjectLocation::focusName

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteInspectionLocation]	Parent Folder: [testReport]	Next Script: [deleteSetupItems]
Script Name	evidenceTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$listlayout; Value:"listTag" ]
    Perform Script [ “evidenceDetailSpacetimeDELETE?????” ]

Fields used in this script

Scripts used in this script

    evidenceDetailSpacetimeDELETE?????

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [evidenceTag]	Parent Folder: [testReport]	Next Script: [deleteInspectionSetupItem]
Script Name	deleteSetupItems
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Object [ Object Name: "item" ]
    If [ test::_Ltest ≠ "" ]
    Show Custom Dialog [ Title: "!"; Message: "You can delete this record only after you delete all items assigned to this category in these location(s)."; Buttons: “OK” ]
    Go to Field [ ]
    Halt Script
    End If
    Go to Field [ ]
    Delete Record/Request

Fields used in this script

    test::_Ltest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteSetupItems]	Parent Folder: [testReport]	Next Script: [editReport]
Script Name	deleteInspectionSetupItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ test::_Ltest = "" ]
    Halt Script
    End If
    Set Variable [ $deleteItem; Value:test::_Ltest ]
    Set Variable [ $name; Value:test::testName ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete " & $name & "?"; Buttons: “Cancel”, “Delete” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Portal Row [ No dialog ]
    End If
    Set Variable [ $deleteItem ]
    Refresh Window

Fields used in this script

    test::_Ltest
    test::testName

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteInspectionSetupItem]	Parent Folder: [testReport]	Next Script: [CHUNK_gotoItemViaPulldown]
Script Name	editReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    reportDeleteEvidence
    printThingReport

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Field [ TEMP::kuserLocation; "" ]
    Set Variable [ $$TSRecordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $$stopLoadReportRecord; Value:1 ]
    #
    #used for item pulldown selection on report layout
    Set Field [ TEMP::kdefaultNodeTestSubject; tagTestSubjectLocation::knode ]
    Set Field [ TEMP::kabout; TEMP::kdefaultNodeTestSubject ]
    Set Variable [ $$contact; Value:TEMP::kdefaultNodeTestSubject ]
    #
    #clear global fields for creating new discovery
    #records, but put in current timestamp to help
    #user understand how info sould be put into
    #the timestample field and for easy editing,
    #changing date, time, etc.
    Set Field [ testlearnReportTags::gkaudienceLocation; "" ]
    Set Field [ TEMP::LocationName; "" ]
    Set Field [ TEMP::TimeStamp; Get ( CurrentTimeStamp ) ]
    #
    If [ TEMP::ksection = "" ]
    Go to Field [ TEMP::ksection ] [ Select/perform ]
    Show Custom Dialog [ Message: "Select a section before editing a report."; Buttons: “OK” ]
    Halt Script
    Else If [ TEMP::reportNumber = "" ]
    Set Field [ ]
    Go to Field [ TEMP::reportNumber ] [ Select/perform ]
    Halt Script
    End If
    Set Variable [ $$library; Value:TEMP::ksection ]
    Set Variable [ $$reportNumber; Value:tagTestSubjectLocation::reportNumber ]
    Set Field [ TEMP::reportNumber; tagTestSubjectLocation::reportNumber ]
    #
    #go to correct layout for final part of script to
    #to find discoveries for the report item.
    Set Field [ TEMP::showFavorites; "" ]
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    #
    Select Window [ Name: "Setup"; Current file ]
    Set Field [ TEMP::testerAndsubject; //tagDefaultNodePrimary::tag & " testing " & ¶ & $testsubjectName & "'s"& ¶ & tempSetup::sectionName //$testsubjectName & ¶ & $$locationName & ¶ & tempSetup::sectionName //tempSetup::sectionName & " | " & $testsubjectName tempSetup::sectionName & " | " & tagDefaultTestSubject::tag & " | " & "report " & $$reportNumber ]
    Set Window Title [ Current Window; New Title: "Report" ]
    Scroll Window [ Home ]
    #
    #find all report pages first, then sort them alphabetically
    #and go to the first records. Use this one to find
    #only report records for this item.
    Enter Find Mode [ ]
    Go to Layout [ “PrintReportEdit” (report) ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$library ]
    Perform Find [ ]
    If [ Get (LastError) = 401 ]
    Perform Script [ “returnToStep2” ]
    Show Custom Dialog [ Message: "No test discoveries to report on."; Buttons: “OK” ]
    Set Variable [ $$stopLoadReportRecord ]
    Exit Script [ ]
    End If
    Set Variable [ $$stopLoadReportRecord ]
    Sort Records [ Specified Sort Order: ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    #
    #Use this first record to find
    #only report records for this item.
    #****haven't decided to use globals or $$variables. Since $$item is used in many other scripts I'm capturing it here.
    Set Field [ TEMP::testName; reportItem::testName ]
    Set Field [ TEMP::ktest; report::ktest ]
    Set Field [ TEMP::ktestItemList; report::ktest ]
    Set Variable [ $$item; Value:report::ktest ]
    Set Variable [ $$first; Value:report::ktest ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$library ]
    Set Field [ report::ktest; TEMP::ktest ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: report::ktest; ascending ] [ Restore; No dialog ]
    #
    View As [ View as List ]
    Scroll Window [ Home ]
    #
    #Now find discoveries for this report item.
    Perform Script [ “CHUNK_gotoItemViaPulldown” ]
    #

Fields used in this script

    TEMP::kuserLocation
    tagTestSubjectLocation::knode
    TEMP::kdefaultNodeTestSubject
    TEMP::kabout
    testlearnReportTags::gkaudienceLocation
    TEMP::LocationName
    TEMP::TimeStamp
    TEMP::ksection
    TEMP::reportNumber
    tagTestSubjectLocation::reportNumber
    TEMP::showFavorites
    tempSetup::sectionName
    tagDefaultTestSubject::tag
    TEMP::testerAndsubject
    report::ktestSubject
    report::kreportNumber
    report::ksection
    ruleTestReport::name
    reportItem::testName
    TEMP::testName
    report::ktest
    TEMP::ktest
    TEMP::ktestItemList

Scripts used in this script

    returnToStep2
    CHUNK_gotoItemViaPulldown

Layouts used in this script

    reportTagDiscovery
    PrintReportEdit

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [editReport]	Parent Folder: [testReport]	Next Script: [zoomReport]
Script Name	CHUNK_gotoItemViaPulldown
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    editReport

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Field [ TEMP::kuserLocation; "" ]
    #[by David Matson 4.16.11, last modified by same 4.18.11]
    #clear the $$finding and $window variables
    Set Variable [ $$finding ]
    Set Variable [ $$window ]
    Set Variable [ $contact; Value:report::ktestSubject ]
    Set Variable [ $item; Value:TEMP::ktest ]
    #
    #clear global fields for creating new discovery
    #records, but put in current timestamp to help
    #user understand how info sould be put into
    #the timestample field and for easy editing,
    #changing date, time, etc.
    Set Field [ testlearnReportTags::gkaudienceLocation; "" ]
    Set Field [ TEMP::LocationName; "" ]
    Set Field [ TEMP::TimeStamp; Get ( CurrentTimeStamp ) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::ktest; $item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: report::ktest; ascending ] [ Restore; No dialog ]
    #
    #****haven't decided to use globals or $$variables. Since $$item is used in many other scripts I'm capturing it here.
    Set Field [ TEMP::ktest; report::ktest ]
    Set Field [ TEMP::ktestItemList; report::ktest ]
    Set Variable [ $$item; Value:report::ktest ]
    Set Field [ TEMP::testName; reportItem::testName ]
    Set Field [ TEMP::showFavorites; "" ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get ( ScreenHeight ); Width: 330; Left: 0 ]
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    End If
    If [ Left ( Get (LayoutName) ; 18 ) = "reportTagDiscovery" ]
    Enter Find Mode [ ]
    Set Field [ testlearnReportTags::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearnReportTags::ktest; TEMP::ktest ]
    Set Field [ testlearnReportTags::kreportNumber; TEMP::reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearnReportTags::Location; ascending testlearnReportTags::timestamp; ascending testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    Else If [ Left ( Get (LayoutName) ; 13 ) = "reportTagInfo" ]
    Perform Script [ “reportTagInfo” ]
    Else
    #
    #Find test list key as it may be different from test key.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopTest; Value:1 ]
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Layout [ “testSetup” (test) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ test::_Ltest; TEMP::ktest ]
    Perform Find [ ]
    Set Field [ TEMP::ktestItemList; test::ktestItemList ]
    Go to Layout [ “reportTagItem” (tagMenus) ]
    Set Variable [ $$stopLoadTagRecord ]
    Set Variable [ $$stopTest ]
    Set Variable [ $$ID ]
    #
    #Find test items for section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::match; TEMP::ktestItemList & ¶ ]
    Perform Find [ ]
    #
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::name; ascending ruleTagMenuTestGroups::_Lgroup; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    Go to Record/Request/Page [ First ]
    #
    End If
    Select Window [ Name: "Report"; Current file ]
    #[validated by David Matson 4.18.11]
    #

Fields used in this script

    TEMP::kuserLocation
    report::ktestSubject
    TEMP::ktest
    testlearnReportTags::gkaudienceLocation
    TEMP::LocationName
    TEMP::TimeStamp
    report::ktest
    report::kreportNumber
    TEMP::ktestItemList
    reportItem::testName
    TEMP::testName
    TEMP::showFavorites
    TEMP::kdefaultNodeTestSubject
    testlearnReportTags::ktestSubject
    testlearnReportTags::ktest
    TEMP::reportNumber
    testlearnReportTags::kreportNumber
    testlearnReportTags::Location
    testlearnReportTags::timestamp
    testlearnReportTags::_Ltestlearn
    TEMP::DetailmoreORLessLayout
    test::_Ltest
    test::ktestItemList
    ruleTagMenuTestGroups::match
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::name
    ruleTagMenuTestGroups::_Lgroup
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

    reportTagInfo

Layouts used in this script

    reportTagDiscovery
    testSetup
    reportTagItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNK_gotoItemViaPulldown]	Parent Folder: [testReport]	Next Script: [unzoomReport]
Script Name	zoomReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $$first ]
    Set Variable [ $$last; Value:report::ktest ]
    Set Field [ TEMP::kuserLocation; "" ]
    #[by David Matson 4.16.11, last modified by same 4.18.11]
    #clear the $$finding and $window variables
    Set Variable [ $$finding ]
    Set Variable [ $$window ]
    Set Variable [ $contact; Value:report::ktestSubject ]
    Set Variable [ $item; Value:report::ktest ]
    #basic administration tasks
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get ( ScreenHeight ); Width: 480; Top: 0; Left: 0 ]
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Enter Find Mode [ ]
    Set Field [ testlearnReportTags::ktestSubject; $contact ]
    Set Field [ testlearnReportTags::ktest; $item ]
    Set Field [ testlearnReportTags::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearnReportTags::Location; ascending testlearnReportTags::timestamp; ascending testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    End If
    Set Zoom Level [ 150% ]
    Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: If ( Get (ScreenWidth) - 933 - 492 ≥ 0 ; Get ( ScreenWidth ) - 933 ; 492 ); Top: 0; Left: If ( Get (ScreenWidth) - 933 - 492 ≥ 0 ; 933 ; Get (ScreenWidth) - 492 ) ]
    // If [ Get (WindowZoomLevel) = 100 ]
    // Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 480; Top: 0; Left: 0 ]
    // Set Zoom Level [ 150% ]
    // Else If [ Get (WindowZoomLevel) = 150 ]
    // Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 634; Top: 0; Left: 0 ]
    // Set Zoom Level [ 200% ]
    // Else If [ Get (WindowZoomLevel) = 200 ]
    // Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 942; Top: 0; Left: 0 ]
    // Set Zoom Level [ 300% ]
    // End If
    Select Window [ Name: "Report"; Current file ]
    Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 933; Top: 0; Left: 0 ]
    Set Zoom Level [ 150% ]
    If [ Get (LastError) = 112 ]
    Exit Script [ ]
    End If

Fields used in this script

    report::ktest
    TEMP::kuserLocation
    report::ktestSubject
    testlearnReportTags::ktestSubject
    testlearnReportTags::ktest
    testlearnReportTags::kreportNumber
    testlearnReportTags::Location
    testlearnReportTags::timestamp
    testlearnReportTags::_Ltestlearn

Scripts used in this script

Layouts used in this script

    reportTagDiscovery

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [zoomReport]	Parent Folder: [testReport]	Next Script: [inUsePart1]
Script Name	unzoomReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $$first ]
    Set Variable [ $$last; Value:report::ktest ]
    Set Field [ TEMP::kuserLocation; "" ]
    #[by David Matson 4.16.11, last modified by same 4.18.11]
    #clear the $$finding and $window variables
    Set Variable [ $$finding ]
    Set Variable [ $$window ]
    Set Variable [ $contact; Value:report::ktestSubject ]
    Set Variable [ $item; Value:report::ktest ]
    #basic administration tasks
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menu"; Height: Get ( ScreenHeight ); Width: Get ( ScreenWidth ) / 2; Top: 0; Left: Get ( ScreenWidth ) / 2 ]
    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Enter Find Mode [ ]
    Set Field [ testlearnReportTags::ktestSubject; $contact ]
    Set Field [ testlearnReportTags::ktest; $item ]
    Set Field [ testlearnReportTags::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearnReportTags::Location; ascending testlearnReportTags::timestamp; ascending testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    End If
    Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: Get ( ScreenWidth ) / 2; Top: 0; Left: Get ( ScreenWidth ) / 2 ]
    Set Zoom Level [ 100% ]
    // If [ Get (WindowZoomLevel) = 100 ]
    // Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 480; Top: 0; Left: 0 ]
    // Set Zoom Level [ 150% ]
    // Else If [ Get (WindowZoomLevel) = 150 ]
    // Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 634; Top: 0; Left: 0 ]
    // Set Zoom Level [ 200% ]
    // Else If [ Get (WindowZoomLevel) = 200 ]
    // Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: 942; Top: 0; Left: 0 ]
    // Set Zoom Level [ 300% ]
    // End If
    Select Window [ Name: "Report"; Current file ]
    Move/Resize Window [ Current Window; Height: Get ( ScreenHeight ); Width: Get ( ScreenWidth ) / 2; Top: 0; Left: 0 ]
    Set Zoom Level [ 100% ]

Fields used in this script

    report::ktest
    TEMP::kuserLocation
    report::ktestSubject
    testlearnReportTags::ktestSubject
    testlearnReportTags::ktest
    testlearnReportTags::kreportNumber
    testlearnReportTags::Location
    testlearnReportTags::timestamp
    testlearnReportTags::_Ltestlearn

Scripts used in this script

Layouts used in this script

    reportTagDiscovery

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [unzoomReport]	Parent Folder: [testReport]	Next Script: [inUsePart3]
Script Name	inUsePart1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ $$finding ≠ "" ]
    Set Variable [ $$Finding ]
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Report"; Current file ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    If [ testlearnReportTags::ktestSubject & $$reportNumber & "¶" = FilterValues ( testlearnReportTags::inUse ; $$contact & $$reportNumber) ]
    Go to Field [ ]
    Show Custom Dialog [ Title: "!"; Message: "Already in use on this section of the report. Click on " & testlearnReportTags::_Number & " on the Report screen to begin the process of moving it to a different slot. Click on a different slot to complete the move."; Buttons: “OK” ]
    Halt Script
    End If
    Set Variable [ $$finding; Value:testlearnReportTags::_Ltestlearn ]
    Set Variable [ $$window; Value:"Tag Menus" ]
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Report"; Current file ]
    Refresh Window
    #

Fields used in this script

    testlearnReportTags::ktestSubject
    testlearnReportTags::inUse
    testlearnReportTags::_Number
    testlearnReportTags::_Ltestlearn

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart1]	Parent Folder: [testReport]	Next Script: [deleteRowOfPhotosFromReport]
Script Name	inUsePart3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    inUsePart2picture1
    inUsePart2picture2
    inUsePart2picture3
    inUsePart2picture4
    inUsePart2picture3 Copy
    inUsePart2picture4 Copy

Script Definition
Script Steps

    #
    // #Determine if record is a discovery or info record.
    // #This information will be used by other parts of
    // #this script to figure out which Tag Menu layout
    // #to go to when neccessary: discover or info.
    // If [ ]
    // End If
    #
    #BEGIN A
    #[by David Matson 4.18.11, last modified by ]
    #If user has selected to copy a finding from the Report window
    #to remove it or to move it to another slot...
    If [ Get ( ActiveFieldName ) = "_kfPhoto" and $$finding = "" or Get ( ActiveFieldName ) = "_kfPhoto2" and $$finding = "" or Get ( ActiveFieldName ) = "_kfPhoto3" and $$finding = "" or Get ( ActiveFieldName ) = "_kfPhoto4" and $$finding = "" ]
    #
    #
    #
    #BEGIN a1
    #[by David Matson 4.18.11, last modified by ]
    #If user is trying to copy blank field
    #stop the script
    If [ $$finding = "" and Get (ActiveFieldContents) = "" ]
    Go to Field [ ]
    Halt Script
    End If
    #[validated by David Matson 4.18.11]
    #END a1
    #
    #
    #
    #copy it
    Set Variable [ $$finding; Value:Get ( ActiveFieldContents ) ]
    Set Variable [ $$window; Value:"Report" ]
    Refresh Window
    Clear [ ] [ Select ]
    Go to Field [ ]
    #
    #Inform user of where tag is now located by changing
    #conditional formatting: green = in use,
    #yellow = reaady to paste, normal colors = not
    #use and not copied for pasting.
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LayoutName) ≠ "reportTagDiscovery" ]
    Perform Script [ “reportTagDiscovery” ]
    End If
    Go to Field [ ]
    #
    #find the record that has been copied and cleared
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$finding = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If it is not a discovery record, go to the info layout.
    If [ $$finding ≠ testlearnReportTags::_Ltestlearn ]
    Perform Script [ “reportTagInfo” ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Loop
    Exit Loop If [ $$finding = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadtestinfo ]
    Perform Script [ “loadtestinfo” ]
    End If
    #
    #inform the user that it is not being used in the Report window
    #by removing it from the list of inUse report sections,
    #basically removing it from showing on this page but
    #not the other pages it is currently being used by.
    Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    Set Field [ testlearnReportTags::inUse; Substitute ( testlearnReportTags::inUse ; $$contact & $$reportNumber & "¶" ; "" ) ]
    #
    Select Window [ Name: "Report"; Current file ]
    Halt Script
    #[validated by David Matson 4.18.11]
    #END A
    #
    #
    #
    #BEGIN B
    #[by David Matson 4.18.11, last modified by ]
    #
    #If user has selected to put a copied finding from the Report window,
    #into a blank slot,
    Else If [ Get ( ActiveFieldName ) = "_kfPhoto" and Get ( ActiveFieldContents )="" and $$finding ≠ "" and $$window = "Report" or Get ( ActiveFieldName ) = "_kfPhoto2" and Get ( ActiveFieldContents )="" and $$finding ≠ "" and $$window = "Report" or Get ( ActiveFieldName ) = "_kfPhoto3" and Get ( ActiveFieldContents )="" and $$finding ≠ "" and $$window = "Report" or Get ( ActiveFieldName ) = "_kfPhoto4" and Get ( ActiveFieldContents )="" and $$finding ≠ "" and $$window = "Report" ]
    #paste ID in blank slot
    Set Field [ $$finding ]
    Go to Field [ ]
    #
    #Inform user of where tag is now located by changing
    #conditional formatting: green = in use,
    #yellow = reaady to paste, normal colors = not
    #use and not copied for pasting.
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LayoutName) ≠ "reportTagDiscovery" ]
    Perform Script [ “reportTagDiscovery” ]
    End If
    Go to Field [ ]
    #
    #find the record that has been copied and cleared
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$finding = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If it is not a discovery record, go to the info layout.
    If [ $$finding ≠ testlearnReportTags::_Ltestlearn ]
    Perform Script [ “reportTagInfo” ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Loop
    Exit Loop If [ $$finding = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadtestinfo ]
    Perform Script [ “loadtestinfo” ]
    End If
    #
    #inform the user that it is being used in the Report window
    #by adding it to the list of report sections where it is used.
    #This will increase the used: # by one.
    Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    Set Field [ testlearnReportTags::inUse; $inUse & $$contact & $$reportNumber & "¶" ]
    #
    #clear the $$finding and $window variables
    Set Variable [ $$finding ]
    Set Variable [ $$window ]
    Refresh Window
    Select Window [ Name: "Report"; Current file ]
    Refresh Window
    Halt Script
    #[validated by David Matson 4.18.11]
    #END B
    #
    #
    #
    #BEGIN C
    #[by David Matson 4.18.11, last modified by ]
    #
    #If user has selected to insert a copied finding from the Report window,
    #into a slot already occupied,
    #PREVENT USER FROM DOING SO. DISABLE PART C.
    Else If [ Get ( ActiveFieldName ) = "_kfPhoto" and Get ( ActiveFieldContents ) ≠ "" and $$window = "Report" or Get ( ActiveFieldName ) = "_kfPhoto2" and Get ( ActiveFieldContents ) ≠ "" and $$window = "Report" or Get ( ActiveFieldName ) = "_kfPhoto3" and Get ( ActiveFieldContents ) ≠ "" and $$window = "Report" or Get ( ActiveFieldName ) = "_kfPhoto4" and Get ( ActiveFieldContents ) ≠ ""and $$window = "Report" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "Click the X button to clear this slot before pasting anything into it. If you want to copy this item, then 1) click on any green empty slot, 2) re-click on the item want to copy."; Buttons: “OK” ]
    Exit Script [ ]
    // #copy the occupying records ID
    // Set Variable [ $ID; Value:Get ( ActiveFieldContents ) ]
    // #paste in the desired records ID in its place (contact and thing IDs are already there)
    // Set Field [ $$finding ]
    // Go to Field [ ]
    // #now go to the Inspection Findings window, note the record the user is on
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Set Variable [ $record; Value:Get ( RecordNumber ) ]
    // Go to Field [ ]
    // #
    // #open new window so as to avoid scroll issue
    // New Window [ ]
    // #
    // #find the record that has been replaced and thus removed from the Report window
    // Enter Find Mode [ ]
    // Set Field [ testlearnReportTags::_Ltestlearn; $ID ]
    // Perform Find [ ]
    // #inform the user that it is not being used in the Report window
    // #by removing it from the list of inUse report sections,
    // #basically removing it from showing on this page but
    // #not the other pages it is currently being used by.
    // Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    // Set Field [ testlearnReportTags::inUse; Substitute ( testlearnReportTags::inUse ; $$contact & $$reportNumber & "¶" ; "" ) ]
    // Set Variable [ $ID ]
    // #find the record that has been inserted
    // Enter Find Mode [ ]
    // Set Field [ testlearnReportTags::_Ltestlearn; $$finding ]
    // Perform Find [ ]
    // #inform the user that it is being used in the Report window
    // #by adding it to the list of report sections where it is used
    // Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    // Set Field [ testlearnReportTags::inUse; testlearnReportTags::inUse & $$contact & $$reportNumber & "¶" ]
    // #
    // #finally, re-find the records the user was looking at, and go to specific record the user was on.
    // Set Variable [ $contact; Value:testlearnReportTags::ktestSubject ]
    // Set Variable [ $item; Value:testlearnReportTags::ktest ]
    // Enter Find Mode [ ]
    // Set Field [ testlearnReportTags::ktestSubject; $contact ]
    // Set Field [ testlearnReportTags::ktest; $item ]
    // Set Field [ testlearnReportTags::kreportNumber; $$reportNumber ]
    // Perform Find [ ]
    // If [ TEMP::showFavorites ≠ "" ]
    // Set Field [ TEMP::showFavorites; "" ]
    // Perform Script [ “<unknown>” ]
    // Else If [ TEMP::showFavorites = "" ]
    // Sort Records [ Specified Sort Order: testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    // Go to Record/Request/Page [ $record ] [ No dialog ]
    // End If
    // #clear the $$finding and $window variables
    // Set Variable [ $$finding ]
    // Set Variable [ $$window ]
    // Close Window [ Current Window ]
    // Halt Script
    // #[validated by David Matson 4.18.11]
    // #END C
    #
    #
    #
    #BEGIN D
    #[by David Matson 4.18.11, last modified by ]
    #If user has selected to insert a finding from the finding window
    #into an occupied slot on the Report window
    #PREVENT USER FROM DOING SO. DISABLE PART C.
    Else If [ Get ( ActiveFieldName ) = "_kfPhoto" and Get ( ActiveFieldContents ) ≠ "" and $$window = "Tag Menus" or Get ( ActiveFieldName ) = "_kfPhoto2" and Get ( ActiveFieldContents ) ≠ "" and $$window = "Tag Menus" or Get ( ActiveFieldName ) = "_kfPhoto3" and Get ( ActiveFieldContents ) ≠ "" and $$window = "Tag Menus" or Get ( ActiveFieldName ) = "_kfPhoto4" and Get ( ActiveFieldContents ) ≠ ""and $$window = "Tag Menus" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "Click the X button to clear this slot before pasting anything into it. If you want to copy this item, then 1) click on any green empty slot, 2) re-click on the item want to copy."; Buttons: “OK” ]
    Exit Script [ ]
    // #
    // #
    // #
    // #BEGIN d1
    // #[by David Matson 4.18.11, last modified by ]
    // #If user is trying to copy the same finding into the location it currently occupies
    // #stop the script
    // Set Variable [ $ID; Value:Get ( ActiveFieldContents ) ]
    // If [ $$finding = $ID ]
    // Go to Field [ ]
    // Set Variable [ $$finding ]
    // Halt Script
    // End If
    // #[validated by David Matson 4.18.11]
    // #END d1
    // #
    // #
    // #
    // #paste in the desired records ID in its place (contact and thing IDs are already there)
    // Set Field [ $$finding ]
    // Go to Field [ ]
    // #tell user it is now in use
    // #by adding it to the list of report sections where it is used
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    // Set Field [ testlearnReportTags::inUse; testlearnReportTags::inUse & $$contact & $$reportNumber & "¶" ]
    // #clear the $$finding variable
    // Set Variable [ $$finding ]
    // Set Variable [ $$window ]
    // #note the record the user is on
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Set Variable [ $record; Value:Get ( RecordNumber ) ]
    // Go to Field [ ]
    // #
    // #open new window so as to avoid scroll issue
    // New Window [ ]
    // #
    // #find the record that has been replaced and thus removed from the Report window
    // Enter Find Mode [ ]
    // Set Field [ testlearnReportTags::_Ltestlearn; $ID ]
    // Perform Find [ ]
    // #inform the user that it is not being used in the Report window
    // #by removing it from the list of inUse report sections,
    // #basically removing it from showing on this page but
    // #not the other pages it is currently being used by.
    // Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    // Set Field [ testlearnReportTags::inUse; Substitute ( testlearnReportTags::inUse ; $$contact & $$reportNumber & "¶" ; "" ) ]
    // Set Variable [ $ID ]
    // #
    // #finally, re-find the records the user was looking at, and go to specific record the user was on.
    // Set Variable [ $contact; Value:testlearnReportTags::ktestSubject ]
    // Set Variable [ $item; Value:testlearnReportTags::ktest ]
    // Enter Find Mode [ ]
    // Set Field [ testlearnReportTags::ktestSubject; $contact ]
    // Set Field [ testlearnReportTags::ktest; $item ]
    // Set Field [ testlearnReportTags::kreportNumber; $$reportNumber ]
    // Perform Find [ ]
    // If [ TEMP::showFavorites ≠ "" ]
    // Set Field [ TEMP::showFavorites; "" ]
    // Perform Script [ “<unknown>” ]
    // Else If [ TEMP::showFavorites = "" ]
    // Sort Records [ Specified Sort Order: testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    // Go to Record/Request/Page [ $record ] [ No dialog ]
    // End If
    // Close Window [ Current Window ]
    // Go to Field [ ]
    // Halt Script
    End If
    #END D
    #[validated by David Matson 4.18.11]
    #
    #
    #
    #BEGIN E
    #[by David Matson 4.16.11, last modified by same 4.18.11]
    #If user has selected to copy of a finding from the finding window
    #into a blank slot on the report window, put it in there
    Set Field [ $$finding ]
    Go to Field [ ]
    #
    #Inform user of where tag is now located by changing
    #conditional formatting: green = in use,
    #yellow = reaady to paste, normal colors = not
    #use and not copied for pasting.
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LayoutName) ≠ "reportTagDiscovery" ]
    Perform Script [ “reportTagDiscovery” ]
    End If
    Go to Field [ ]
    #
    #find the record that has been copied and cleared
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$finding = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If it is not a discovery record, go to the info layout.
    If [ $$finding ≠ testlearnReportTags::_Ltestlearn ]
    Perform Script [ “reportTagInfo” ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Loop
    Exit Loop If [ $$finding = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadtestinfo ]
    Perform Script [ “loadtestinfo” ]
    End If
    #
    #inform the user that it is being used in the Report window
    #by adding it to the list of report sections where it is used.
    #This will increase the used: # by one.
    Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    Set Field [ testlearnReportTags::inUse; $inUse & $$contact & $$reportNumber & "¶" ]
    #
    #clear the $$finding and $window variables
    Set Variable [ $$finding ]
    Set Variable [ $$window ]
    Refresh Window
    Select Window [ Name: "Report"; Current file ]
    Refresh Window
    #
    #END E
    #[validated by David Matson 4.18.11]

Fields used in this script

    testlearnReportTags::_Ltestlearn
    testlearnReportTags::inUse
    testlearnReportTags::ktestSubject
    testlearnReportTags::ktest
    testlearnReportTags::kreportNumber
    TEMP::showFavorites

Scripts used in this script

    reportTagDiscovery
    reportTagInfo
    loadtestinfo
    <unknown>

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart3]	Parent Folder: [testReport]	Next Script: [newRowOfPhotos]
Script Name	deleteRowOfPhotosFromReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ Get (RecordNumber) = 1 ]
    Exit Script [ ]
    End If
    If [ report::_kfPhoto ≠ "" or report::_kfPhoto2 ≠ "" or report::_kfPhoto3 ≠ "" or report::_kfPhoto4 ≠ "" ]
    Show Custom Dialog [ Title: "!"; Message: "You may delete this row only after clearing all photo slots."; Buttons: “OK” ]
    Halt Script
    End If
    Set Variable [ $delete; Value:Get (RecordNumber) ]
    Refresh Window
    Show Custom Dialog [ Message: "Delete this row of photos?"; Buttons: “cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    End If
    Set Variable [ $delete ]
    Refresh Window
    #

Fields used in this script

    report::_kfPhoto
    report::_kfPhoto2
    report::_kfPhoto3
    report::_kfPhoto4

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteRowOfPhotosFromReport]	Parent Folder: [testReport]	Next Script: [sortReport]
Script Name	newRowOfPhotos
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$item; Value:report::ktest ]
    #create new report record and put in all required information
    New Record/Request
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$library ]

Fields used in this script

    report::ktest
    report::ktestSubject
    report::kreportNumber
    report::ksection

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newRowOfPhotos]	Parent Folder: [testReport]	Next Script: [editSectionFocuses]
Script Name	sortReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Sort Records [ Specified Sort Order: report::ktest; ascending ] [ Restore; No dialog ]

Fields used in this script

    report::ktest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sortReport]	Parent Folder: [testReport]	Next Script: [newFocus]
Script Name	editSectionFocuses
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    newTestGroup
    newTest

Script Definition
Script Steps

    #
    #If there are no tests, then stop this script as there
    #are no test to create things for.
    If [ TEMP::ktest = "" ]
    Show Custom Dialog [ Message: "There are no tests."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    #
    #Find all test focuses for this test.
    #New tests will not have any foci so
    #error capture needs to be turned on.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    View As [ View as List ]
    Enter Find Mode [ ]
    Set Field [ tagLocation::ksection; TEMP::ksection ]
    Set Field [ tagLocation::match; "focus" ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: tagLocation::tag; ascending ] [ Restore; No dialog ]
    Perform Script [ “insureEqualityOfSpellFields” ]

Fields used in this script

    TEMP::ktest
    TEMP::ksection
    tagLocation::ksection
    tagLocation::match
    tagLocation::tag

Scripts used in this script

    insureEqualityOfSpellFields

Layouts used in this script

    setupTestFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [editSectionFocuses]	Parent Folder: [testReport]	Next Script: [deleteFocus]
Script Name	newFocus
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default record creation node -- " & TEMP::DEFAULTNodePrimaryName & " -- is locked. Select this node in the setup tag window and enter the password to unlock it so that you can create new records attributed to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If there are no tests, then stop this script as there
    #are no test to create things for.
    If [ TEMP::ktest = "" ]
    Show Custom Dialog [ Message: "There are no tests."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Create new focus that any test in this section could be assigned to.
    New Record/Request
    Set Field [ tagLocation::ksection; TEMP::ksection ]
    Set Field [ tagLocation::match; "focus" ]
    Set Field [ tagLocation::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Go to Field [ tagLocation::tag ]

Fields used in this script

    TEMP::nodeLock
    TEMP::DEFAULTNodePrimaryName
    TEMP::ktest
    TEMP::ksection
    tagLocation::ksection
    tagLocation::match
    TEMP::kdefaultNodePrimary
    tagLocation::kRecordCreatorNode
    tagLocation::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newFocus]	Parent Folder: [testReport]	Next Script: [deleteAttribute]
Script Name	deleteFocus
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $focus; Value:tagLocation::_Ltag ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    If [ nodeLockTest::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "This record is currently locked. Select the node that created it and enter the password to unlock it, then you will able to start the delete process."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Go to Layout [ “TEMP” (TEMP) ]
    Show All Records
    Delete All Records [ No dialog ]
    #
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::kfocus; $focus ]
    Perform Find [ ]
    #
    If [ Get (LastError) ≠ 401 ]
    Loop
    Set Variable [ $useList; Value:"Test Subject Focus: " & TextStyleAdd ( tagTestSubjectLocation::focusName & ": report " & tagTestSubjectLocation::reportNumber; Bold ) & " " & tagTestSubject::tag & "'s " & nodeLibraryName::name ]
    Go to Layout [ “TEMP” (TEMP) ]
    New Record/Request
    Set Field [ TEMP::RemoveFocusList; $useList ]
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    Go to Layout [ original layout ]
    New Window [ Name: "!"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 4 ]
    Go to Layout [ “TEMP” (TEMP) ]
    View As [ View as List ]
    #
    #eliminate duplicate location records
    Sort Records [ Specified Sort Order: TEMP::RemoveFocusList; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $focus; Value:TEMP::RemoveFocusList ]
    Go to Record/Request/Page [ Next; Exit after last ]
    If [ TEMP::RemoveFocusList = $focus ]
    Omit Record
    #
    #omit by default moves focus to the next record
    #in order to test this next record the focus must move up one record
    #
    Go to Record/Request/Page [ Previous ]
    #then the script can move down to test this record when it repeats
    End If
    End Loop
    #
    Show/Hide Status Area [ Lock; Hide ]
    Show/Hide Text Ruler [ Hide ]
    Pause/Resume Script [ Indefinitely ]
    Close Window [ Current Window ]
    Exit Script [ ]
    End If
    #
    Go to Layout [ original layout ]
    Go to Field [ ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Set Variable [ $delete; Value:tagLocation::_Ltag ]
    Set Variable [ $name; Value:tagLocation::tag ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete " & $name & "?"; Buttons: “Cancel”, “Delete” ]
    #
    If [ Get ( LastMessageChoice ) = 2 ]
    If [ tagLocation::_Ltag & "¶" = FilterValues ( test::kcfocusALL ; tagLocation::_Ltag & "¶" ) ]
    #
    #Remove it from the list of inUse focuses.
    Set Variable [ $focus; Value:test::kcfocusALL ]
    Set Field [ test::kcfocusALL; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( test::kcfocusALL ) ≠ ValueCount ( Substitute ( test::kcfocusALL ; tagLocation::_Ltag & "¶" ; "" ) ) ; Substitute ( test::kcfocusALL ; tagLocation::_Ltag & "¶" ; "" ) ; Substitute ( test::kcfocusALL ; tagLocation::_Ltag ; "" ) ) ]
    End If
    #
    Delete Record/Request [ No dialog ]
    #
    End If
    Set Variable [ $delete ]
    Refresh Window
    #

Fields used in this script

    tagLocation::_Ltag
    nodeLockTest::orderOrLock
    tagTestSubjectLocation::kfocus
    tagTestSubjectLocation::focusName
    tagTestSubjectLocation::reportNumber
    tagTestSubject::tag
    nodeLibraryName::name
    TEMP::RemoveFocusList
    tagLocation::tag
    test::kcfocusALL

Scripts used in this script

Layouts used in this script

    TEMP
    tableTestSubjectFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteFocus]	Parent Folder: [testReport]	Next Script: [gotoDefaultsOrReport]
Script Name	deleteAttribute
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $row; Value:Get ( PortalRowNumber ) ]
    Go to Field [ ]
    Go to Portal Row [ $row ] [ Select; No dialog ]
    Set Variable [ $delete; Value:defaultCopyrightName::_Ltag ]
    Set Variable [ $name; Value:defaultCopyrightName::tag ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete " & $name & "?"; Buttons: “Cancel”, “Delete” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Portal Row [ No dialog ]
    End If
    Set Variable [ $delete ]
    Refresh Window

Fields used in this script

    defaultCopyrightName::_Ltag
    defaultCopyrightName::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteAttribute]	Parent Folder: [testReport]	Next Script: [previewReport]
Script Name	gotoDefaultsOrReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Determine what module is active and then go
    #to the setup module if ...
    If [ $$learnRecord = "" and $$testTagRecord = "" ]
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    #Addtotag... script is activated by the load record
    #trigger. This script needs to be turned off until
    #the section record is looped selected by the user.
    Set Variable [ $$stopAddTagToCitation; Value:1 ]
    #
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show All Records
    Delete All Records [ No dialog ]
    New Record/Request
    Set Window Title [ Current Window; New Title: "Setup" ]
    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: 0 ]
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 2 ]
    End If
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$citationitem; Value:tempSetup::ksection ]
    Set Variable [ $$citationMatch; Value:"section" ]
    Refresh Window
    Go to Field [ ]
    Set Variable [ $$node ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$citationRecord ]
    Set Variable [ $$primaryNode ]
    Set Variable [ $$medium ]
    Set Variable [ $$health ]
    Set Variable [ $$Path ]
    Set Variable [ $$cite ]
    Set Variable [ $$ref ]
    Set Variable [ $$PrimaryKey ]
    Set Variable [ $$Key ]
    Set Variable [ $$OtherKey ]
    Set Variable [ $$RecordID ]
    #
    Set Field [ TEMP::ktest; "" ]
    #
    Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    Set Variable [ $$findLayout ]
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"section" ]
    #
    Go to Layout [ “defaultSections” (ruleSection) ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ ruleSection::match; "section" ]
    Perform Find [ ]
    #
    Sort Records [ Specified Sort Order: ruleSection::name; ascending ] [ Restore; No dialog ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ TEMP::ksection = ruleSection::ksection ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ TEMP::ksection ≠ ruleSection::ksection ]
    Go to Record/Request/Page [ First ]
    End If
    Set Variable [ $$stopAddTagToCitation ]
    Perform Script [ “addTagToMainRecord” ]
    Refresh Window
    Exit Script [ ]
    Else If [ $$learnRecord ≠ "" and $$testTagRecord = "" ]
    Set Window Title [ Current Window; New Title: "Report" ]
    Go to Layout [ “PrintReportEdit” (report) ]
    Scroll Window [ Home ]
    #
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $$contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$library ]
    Set Field [ report::ktest; $$returnItem ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: report::ktest; ascending ] [ Restore; No dialog ]
    #
    View As [ View as List ]
    Scroll Window [ Home ]
    #
    #Just in case user went to a different item before
    #returning to this item, put the item being tested
    #back in the temp field.
    Set Field [ TEMP::ktest; $$returnItem ]
    Set Field [ TEMP::testName; $$returnItemName ]
    #
    #Now find discoveries for this report item.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Go to Layout [ “reportTagInfo” (testlearnReportTags) ]
    Perform Script [ “reportTagInfo” ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearnReportTags::_Ltestlearn = $$learnRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadtestinfo ]
    Set Variable [ $$returnItem ]
    Set Variable [ $$learnRecord ]
    Perform Script [ “loadtestinfo” ]
    #
    Else If [ $$learnRecord = "" and $$testTagRecord ≠ "" ]
    Set Window Title [ Current Window; New Title: "Test" ]
    #
    #Prevent test records from loading to speed up
    #this script.
    Set Variable [ $$stopLoadTestRecord; Value:1 ]
    #
    #find and show all test records.
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $$contact ]
    Set Field [ testlearn::ktest; $$returnItem ]
    Set Field [ testlearn::kcsection; $$library ]
    Set Field [ testlearn::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    #
    #Just in case user went to a different item before
    #returning to this item, put the item being tested
    #back in the temp field.
    Set Field [ TEMP::ktest; $$returnItem ]
    Set Field [ TEMP::testName; $$returnItemName ]
    #
    #This field does show up elsewhere but I am not
    #sure after what it does. My bad for not making
    #thorough comments during earlier developement.
    Set Field [ InspectItems::glocationNameGlobal; TextStyleAdd ( TEMP::LocationName ; Lowercase ) ]
    #
    #Create new test record if there are none.
    #( I know, there where records here when the
    # the user went to edit them, but the user
    # could have deleted all of them, so it makes
    # to leave this step in for in case that unlikely
    # thing happened ).
    If [ Get (LastError) = 401 ]
    Perform Script [ “newTestRecord” ]
    #
    #If there is OK or NA record, change it into a test
    #record. (NA and OK records tell the user they
    #have inspected an item and found it OK or not
    #needing to be tested. If OK, the user has decided
    #not to record any details. So a record exist
    #but it is not being used to record details.
    #These next steps will turn that non-test record
    #into a test record.)
    Else If [ Get (FoundCount) = 1 and $$Location = testlearn::kaudienceLocation and testlearn::kreportNumber = $$reportNumber and testlearn::InspectionItemCountLocation = "N/A" or Get (FoundCount) = 1 and $$Location = testlearn::kaudienceLocation and testlearn::kreportNumber = $$reportNumber and testlearn::InspectionItemCountLocation = "OK" or Get (FoundCount) = 1 and $$Location = testlearn::kaudienceLocation and testlearn::kreportNumber = $$reportNumber and testlearn::InspectionItemCountLocation = "★" ]
    #
    #If there is OK or NA record, change it into a test
    #by change NA or OK to 1, as in 1 test record.
    Set Field [ testlearn::InspectionItemCountLocation; 1 ]
    #
    #increase number of test records for item overall
    #from zero to 1.
    Set Field [ testlearn::InspectionItemCount; 1 ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    End If
    #
    #Group records by test subject location.
    Sort Records [ Specified Sort Order: testlearn::Location; ascending testlearn::_Number; ascending ] [ Restore; No dialog ]
    #
    #Omit all NA, OK, and star records if any (these
    #records function as visual indicators of having
    #made a decision not to create a test record
    #because NA = it was not applicable, OK=it was
    #fine, and star symbol = because a test record
    #already created duplicates the finding in this
    #test subject location),
    Go to Record/Request/Page [ First ]
    Loop
    If [ testlearn::InspectionItemCountLocation = "N/A" or testlearn::InspectionItemCountLocation = "OK" or testlearn::InspectionItemCountLocation = "★" ]
    Omit Record
    Go to Record/Request/Page [ Previous ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Now go the test record the user was on.
    Go to Record/Request/Page [ Last ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $$testLearnRecord ]
    Go to Record/Request/Page [ Previous; Exit after last ]
    End Loop
    #
    #Set the numbers for the navigation arrows
    #at the top of the screen: record # / total #.
    Set Field [ testlearn::recordnumberglobal; Get (RecordNumber) ]
    Set Field [ testlearn::recordcountglobal; Get (FoundCount) ]
    #
    #Conditionally format current test record and tags.
    Set Variable [ $$sopLoadTestRecord ]
    Perform Script [ “loadTestRecord” ]
    #
    #Find all details for this item.
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “reportTagInfo” ]
    #
    #Now go the test record the user was on.
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearnReportTags::_Ltestlearn = $$testTagRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadtestinfo ]
    Perform Script [ “loadtestinfo” ]
    #
    #
    Set Variable [ $$returnItem ]
    Set Variable [ $$testTagRecord ]
    Set Variable [ $$testLearnRecord ]
    #
    End If

Fields used in this script

    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    tempSetup::ksection
    TEMP::ktest
    ruleSection::match
    ruleSection::name
    TEMP::ksection
    ruleSection::ksection
    report::ktestSubject
    report::kreportNumber
    report::ksection
    report::ktest
    TEMP::testName
    testlearnReportTags::_Ltestlearn
    testlearn::ktestSubject
    testlearn::ktest
    testlearn::kcsection
    testlearn::kreportNumber
    TEMP::LocationName
    InspectItems::glocationNameGlobal
    testlearn::kaudienceLocation
    testlearn::InspectionItemCountLocation
    testlearn::InspectionItemCount
    testlearn::Location
    testlearn::_Number
    testlearn::_Ltestlearn
    testlearn::recordnumberglobal
    testlearn::recordcountglobal

Scripts used in this script

    addTagToMainRecord
    reportTagInfo
    loadtestinfo
    newTestRecord
    loadTestRecord

Layouts used in this script

    defaultSetup
    defaultSections
    PrintReportEdit
    reportTagInfo
    step4_InspectionFinding

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoDefaultsOrReport]	Parent Folder: [testReport]	Next Script: [reportTagInfo]
Script Name	previewReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Go to Field [ ]
    Select Window [ Name: "Preview"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Preview" ]
    Go to Layout [ “PrintReportPreview” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::ksection; $$library ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Enter Browse Mode
    Enter Preview Mode
    Show/Hide Status Area [ Lock; Show ]
    End If
    If [ report::ktest ≠ $$item ]
    Go to Layout [ “PrintReportPreview” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::ksection; $$library ]
    Set Field [ report::ktest; $$item ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Enter Browse Mode
    Enter Preview Mode
    Show/Hide Status Area [ Lock; Show ]
    Exit Script [ ]
    End If
    Set Variable [ $page; Value:Get (PageNumber) ]
    Enter Browse Mode
    Enter Preview Mode
    Go to Record/Request/Page [ $page ] [ No dialog ]
    Show Custom Dialog [ Message: "Click the 'exit preview' button to close this window. Click the page numbers (upper left corner) to see additional pages if there are any."; Buttons: “OK” ]
    Set Variable [ $$preview; Value:1 ]

Fields used in this script

    report::ktestSubject
    report::ksection
    report::ktest
    report::kreportNumber
    ruleTestReport::name
    reportItem::testName

Scripts used in this script

Layouts used in this script

    PrintReportPreview

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [previewReport]	Parent Folder: [testReport]	Next Script: [reportTagDiscovery]
Script Name	reportTagInfo
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    CHUNK_gotoItemViaPulldown
    inUsePart3
    gotoDefaultsOrReport
    reportClearDiscoveryLink

Script Definition
Script Steps

    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    If [ Left ( Get (LayoutName) ; 6 ) = "report" ]
    Go to Layout [ “reportTagInfo” (testlearnReportTags) ]
    Else If [ Left ( Get (LayoutName) ; 6 ) ≠ "report" ]
    Go to Layout [ “testInfo” (testlearnReportTags) ]
    End If
    #Turn off the loadtagrecord script to speed up the
    #loop portion of the script.
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Enter Find Mode [ ]
    #
    #now find and show all canned inspection items associated with this generic canned location
    Set Field [ testlearnReportTags::kcsection; TEMP::ksection ]
    Set Field [ testlearnReportTags::kctest; "###" & $$item ]
    Perform Find [ ]
    #
    #Clear sample and test tags.
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    #
    #
    #If sort by order number is on then sort by
    #order number.
    #Go the first record.
    Go to Record/Request/Page [ First ]
    #
    Loop
    #
    #The order number is the left three digits of a
    #sample or test record lock number. ( Remember
    #each record in the database has lock number or
    #ID number. To open the lock and see any record's
    #contents requires a key number that fits the lock.
    #So if a lock number is 123, then the key that will
    #fit this lock is 123 too. ) Because the sample
    #and test key fields (think of key chains) may
    #have several keys, because any one learn record
    #may be part of more than one sample or test.
    #the system must check each learn record's keys
    #one at a time to see if any fit the current sample
    #or test's lock. So beginning with number one
    #the system checks each key. The left most 3 numbers
    #are order numbers so below you will note that
    #they system starts the check on the 4th number
    #from the left.
    Set Variable [ $number; Value:1 ]
    Go to Field [ ]
    Loop
    #
    #The first step is to blank or clear each record's
    #order field, so only those records that are part
    #of the current sample or test will have order numbers
    #and be part of the sort coming right after this
    #assignment of sort order numbers.
    Set Field [ testlearnReportTags::orderTest; "" ]
    #
    #When and if a key is found that fits the current
    #sample or test record's lock, the order number
    #( left most 3 digits ) is caputred and placed in
    #in the order field.
    Set Field [ testlearnReportTags::orderTest; Left ( GetValue ( testlearnReportTags::kctest ; $number ) ; 3 ) ]
    #
    #The 'number' variable is made blank to trigger
    #the exit from this loop, the order number having
    #been assigned.
    Set Variable [ $number ]
    Exit Loop If [ $number = "" ]
    #
    #Exit loop if the current record is not part
    #of the selected sample or test after checking
    #all of its keys.
    Exit Loop If [ GetValue ( testlearnReportTags::kctest ; $number ) = "" ]
    #
    #Add 1 to the 'number' varaible after each key
    #in the key field is checked, to direct the system
    #to check the next key.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Sort the records by order field.
    Sort Records [ Specified Sort Order: testlearnReportTags::orderTest; based on value list: “order” testlearnReportTags::timestamp; descending ] [ Restore; No dialog ]
    #
    #Return focus to record user was focused on at
    #the start of this script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    #
    #Turn loadcitation script back on and exit script.
    Set Variable [ $$stoploadtestinfo ]
    Perform Script [ “loadtestinfo” ]

Fields used in this script

    TEMP::ksection
    testlearnReportTags::kcsection
    testlearnReportTags::kctest
    testlearnReportTags::orderTest
    testlearnReportTags::timestamp

Scripts used in this script

    loadtestinfo

Layouts used in this script

    reportTagInfo
    testInfo

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportTagInfo]	Parent Folder: [testReport]	Next Script: [reportExitOnRecordLoad]
Script Name	reportTagDiscovery
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    inUsePart3
    reportClearDiscoveryLink

Script Definition
Script Steps

    Go to Layout [ “reportTagDiscovery” (testlearnReportTags) ]
    Enter Find Mode [ ]
    Set Field [ testlearnReportTags::ktestSubject; TEMP::kdefaultNodeTestSubject ]
    Set Field [ testlearnReportTags::ktest; TEMP::ktest ]
    Set Field [ testlearnReportTags::kreportNumber; TEMP::reportNumber ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearnReportTags::Location; ascending testlearnReportTags::timestamp; ascending testlearnReportTags::_Ltestlearn; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]

Fields used in this script

    TEMP::kdefaultNodeTestSubject
    testlearnReportTags::ktestSubject
    TEMP::ktest
    testlearnReportTags::ktest
    TEMP::reportNumber
    testlearnReportTags::kreportNumber
    testlearnReportTags::Location
    testlearnReportTags::timestamp
    testlearnReportTags::_Ltestlearn

Scripts used in this script

Layouts used in this script

    reportTagDiscovery

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportTagDiscovery]	Parent Folder: [testReport]	Next Script: [reportPreviewClose]
Script Name	reportExitOnRecordLoad
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$stopLoadReportRecord = 1 ]
    Exit Script [ ]
    End If
    Go to Field [ ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportExitOnRecordLoad]	Parent Folder: [testReport]	Next Script: [reportClearDiscoveryLink]
Script Name	reportPreviewClose
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$preview = 1 ]
    Close Window [ Current Window ]
    End If
    Set Variable [ $$preview ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportPreviewClose]	Parent Folder: [testReport]	Next Script: [setupUpdateReportNumber]
Script Name	reportClearDiscoveryLink
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    clearpicture1
    clearpicture2
    clearpicture3
    clearpicture4

Script Definition
Script Steps

    #If user is trying to clear a blank field
    #stop the script
    If [ Get (ActiveFieldContents) = "" ]
    Go to Field [ ]
    Halt Script
    End If
    #
    #
    #Get ID then clear field.
    Set Variable [ $clear; Value:Get ( ActiveFieldContents ) ]
    Clear [ ] [ Select ]
    Go to Field [ ]
    #
    #tell user it is not in use
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LayoutName) ≠ "reportTagDiscovery" ]
    Perform Script [ “reportTagDiscovery” ]
    End If
    Go to Field [ ]
    #
    #find the record that has been copied and cleared
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $clear = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If it is not a discovery record, go to the info layout.
    If [ $clear ≠ testlearnReportTags::_Ltestlearn ]
    Perform Script [ “reportTagInfo” ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$stoploadtestinfo; Value:1 ]
    Loop
    Exit Loop If [ $clear = testlearnReportTags::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadtestinfo ]
    Perform Script [ “loadtestinfo” ]
    End If
    #
    #inform the user that it is not being used in the Report window
    #by removing it from the list of inUse report sections,
    #basically removing it from showing on this page but
    #not the other pages it is currently being used by.
    Set Variable [ $inUse; Value:testlearnReportTags::inUse ]
    Set Field [ testlearnReportTags::inUse; Substitute ( testlearnReportTags::inUse ; $$contact & $$reportNumber & "¶" ; "" ) ]
    Refresh Window
    #
    Select Window [ Name: "Report"; Current file ]

Fields used in this script

    testlearnReportTags::_Ltestlearn
    testlearnReportTags::inUse

Scripts used in this script

    reportTagDiscovery
    reportTagInfo
    loadtestinfo

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [reportClearDiscoveryLink]	Parent Folder: [testReport]	Next Script: [openDetailWindow !!! FINISH LATER !!!]
Script Name	setupUpdateReportNumber
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Get (FoundCount) = 0 and $$stopFocusLoad = "" or Get (FoundCount) ≠ 0 and $$stopFocusLoad = 1 ]
    Exit Script [ ]
    End If
    Set Field [ TEMP::reportNumber; tagTestSubjectLocation::reportNumber ]
    // Set Field [ TEMP::kdefaultNodeTestSubject; tagTestSubjectLocation::knode ]
    Go to Field [ ]

Fields used in this script

    tagTestSubjectLocation::reportNumber
    TEMP::reportNumber
    tagTestSubjectLocation::knode
    TEMP::kdefaultNodeTestSubject

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [setupUpdateReportNumber]	Parent Folder: [testReport]
Script Name	openDetailWindow !!! FINISH LATER !!!
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    Set Variable [ $workwindow; Value:Get (WindowName) ]
    Set Variable [ $left; Value:Get ( WindowLeft ) ]
    Set Variable [ $width; Value:Get ( WindowWidth) ]
    Select Window [ Name: $workwindow; Current file ]
    Set Field [ TEMP::ktestItemList; test::ktestItemList ]
    Set Field [ TEMP::ktestItemListOLD; test::ktestItemList ]
    Set Field [ TEMP::ktest; test::_Ltest ]
    Set Field [ TEMP::testName; test::testName ]
    Set Field [ TEMP::ksection; test::ksection ]
    Set Field [ TEMP::sectionName; ruleSection::name ]
    Select Window [ Name: "Details"; Current file ]
    If [ Get (LastError) = 112 ]
    If [ Get (WindowZoomLevel) = 100 ]
    New Window [ Name: "Details"; Height: Get (ScreenHeight); Width: 333; Left: If ( $left + $width + 333 > Get ( ScreenWidth ) ; Get ( ScreenWidth ) - 333 ; $left + $width ) ]
    Else If [ Get (WindowZoomLevel) = 150 ]
    New Window [ Name: "Details"; Height: Get (ScreenHeight); Width: 490; Left: If ( $left + $width > Get ( ScreenWidth ) - 490; Get ( ScreenWidth ) - 490 ; $left + $width ) ]
    End If
    Go to Layout [ “setupTestItem” (tagMenus) ]
    End If
    #
    Set Variable [ $layout; Value:Get (LayoutName) ]
    Set Variable [ $$attributeReturnLayout; Value:Get (LayoutName) ]
    #Find all details for this item.
    Go to Layout [ “testMenuTestItemMORE” (tagMenus) ]
    // Set Variable [ $$citationMatch; Value:test::_Ltest ]
    #
    #Find detail tags for library section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::kGroupOrTest; TEMP::ktestItemList ]
    Perform Find [ ]
    #
    #If no records exist then create one.
    If [ Get (FoundCount)=0 ]
    Perform Script [ “newCitationMenuGroup” ]
    End If
    #
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    Go to Record/Request/Page [ First ]
    #
    #Find all locations for this item.
    #New items will not have any locations assigned so
    #error caputer needs to be turned on.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    View As [ View as Form ]
    Enter Find Mode [ ]
    Set Field [ test::_Ltest; $$ID ]
    Perform Find [ ]
    #
    Go to Layout [ $layout ]
    Refresh Window

Fields used in this script

    test::_Ltest
    test::ktestItemList
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    TEMP::ktest
    test::testName
    TEMP::testName
    test::ksection
    TEMP::ksection
    ruleSection::name
    TEMP::sectionName
    tagMenus::kGroupOrTest
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

    setupTestItem
    testMenuTestItemMORE
    setupTestFocus
    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


probablyNotInUse
	Parent Folder: [probablyNotInUse]	Next Script: [evidenceSpacetime]
Script Name	findInspectionItemValueList
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Set Variable [ $list; Value:<Table Missing>::<Field Missing> ]
    Enter Find Mode [ ]
    Set Field [ <Table Missing>; $list ]
    Perform Find [ ]
    If [ Get (LastError) = "401" ]
    Show Custom Dialog [ Title: "!"; Message: "There are no value lists. Create a new one if you like."; Buttons: “OK” ]
    End If

Fields used in this script

    <Missing Field>

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findInspectionItemValueList]	Parent Folder: [probablyNotInUse]	Next Script: [evidenceDetailSpacetimeDELETE?????]
Script Name	evidenceSpacetime
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$listlayout; Value:"listSpacetime" ]
    Perform Script [ “evidenceDetailSpacetimeDELETE?????” ]

Fields used in this script

Scripts used in this script

    evidenceDetailSpacetimeDELETE?????

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [evidenceSpacetime]	Parent Folder: [probablyNotInUse]	Next Script: [evidenceDetailDELETE?????]
Script Name	evidenceDetailSpacetimeDELETE?????
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    evidenceSpacetime
    evidenceDetailDELETE?????
    evidenceTag

Script Definition
Script Steps

    Set Variable [ $$openedFrom; Value:Get (LayoutName) ]
    Set Variable [ $left; Value:Get ( WindowLeft ) ]
    Set Variable [ $width; Value:Get ( WindowWidth) ]
    Set Field [ TEMP::ktestItemList; InspectItems::ktestItemList ]
    Set Field [ TEMP::ktestItemListOLD; InspectItems::ktestItemList ]
    Set Field [ TEMP::ktest; InspectItems::_Ltest ]
    Set Field [ TEMP::ksection; InspectItems::ksection ]
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    If [ Get (WindowZoomLevel) = 100 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: $width; Left: //If ( $left + $width + 333 > Get ( ScreenWidth ) ; Get ( ScreenWidth ) - 333 ; $left + $width ) $width ]
    Else If [ Get (WindowZoomLevel) = 150 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: $width; Left: //If ( $left + $width + 333 > Get ( ScreenWidth ) ; Get ( ScreenWidth ) - 333 ; $left + $width ) $width ]
    // New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: 490; Left: If ( $left + $width > Get ( ScreenWidth ) - 490; Get ( ScreenWidth ) - 490 ; $left + $width ) ]
    End If
    Go to Layout [ “setupTestItem” (tagMenus) ]
    End If
    Go to Layout [ $$listlayout ]
    #
    #Find all details for this item.
    Perform Script [ “menuTestItem” ]
    #
    #Find all locations for this item.
    #New items will not have any locations assigned so
    #error caputer needs to be turned on.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    View As [ View as Form ]
    Enter Find Mode [ ]
    Set Field [ test::_Ltest; $$item ]
    Perform Find [ ]
    Go to Layout [ $$listlayout ]
    Select Window [ Name: "Test"; Current file ]
    Select Window [ Name: "Setup"; Current file ]

Fields used in this script

    InspectItems::ktestItemList
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    InspectItems::_Ltest
    TEMP::ktest
    InspectItems::ksection
    TEMP::ksection
    test::_Ltest

Scripts used in this script

    menuTestItem

Layouts used in this script

    setupTestItem
    setupTestFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [evidenceDetailSpacetimeDELETE?????]	Parent Folder: [probablyNotInUse]	Next Script: [deleteInspectionComplement]
Script Name	evidenceDetailDELETE?????
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    loadTestRecord

Script Definition
Script Steps

    Set Variable [ $$listlayout; Value:"testMenuDetail" ]
    Perform Script [ “evidenceDetailSpacetimeDELETE?????” ]

Fields used in this script

Scripts used in this script

    evidenceDetailSpacetimeDELETE?????

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [evidenceDetailDELETE?????]	Parent Folder: [probablyNotInUse]	Next Script: [newAttribute]
Script Name	deleteInspectionComplement
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ test::_Ltest = "" ]
    Halt Script
    End If
    Set Variable [ $deleteComp; Value:<Table Missing>::<Field Missing> ]
    Set Variable [ $name; Value:<Table Missing>::<Field Missing> ]
    Refresh Window
    Show Custom Dialog [ Title: "!"; Message: "Delete " & $name & "?"; Buttons: “Cancel”, “Delete” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Portal Row [ No dialog ]
    End If
    Set Variable [ $deleteComp ]
    Refresh Window

Fields used in this script

    test::_Ltest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteInspectionComplement]	Parent Folder: [probablyNotInUse]	Next Script: [newEvidenceWindow]
Script Name	newAttribute
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newAttribute]	Parent Folder: [probablyNotInUse]
Script Name	newEvidenceWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $left; Value:Get ( WindowLeft ) + Get ( WindowWidth) ]
    Close Window [ Name: "Copy / Paste Evidence"; Current file ]
    New Window [ Name: "Copy / Paste Evidence"; Left: $left ]
    Go to Layout [ <unknown> ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Print
	Parent Folder: [Print]	Next Script: [TOC]
Script Name	printThingReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Close Window [ Name: "Tag Menus"; Current file ]
    #find all contact records, sort them, enter preview (print) mode
    Go to Layout [ “PrintReport” (report) ]
    Set Variable [ $contact; Value:report::ktestSubject ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    #
    #allow user to preview report will clicking a button in
    #a new window to input page numbers for each item
    Enter Preview Mode
    Set Window Title [ Current Window; New Title: "Report" ]
    Move/Resize Window [ Name: "Report"; Current file; Width: Get ( ScreenWidth ) / 2; Left: 0 ]
    New Window [ Name: "Numbers"; Width: Get ( ScreenWidth ) / 2; Left: Get ( ScreenWidth ) / 2 ]
    Enter Browse Mode
    // Arrange All Windows [ Tile Vertically ]
    Go to Layout [ “pageNumbering” (report) ]
    Go to Record/Request/Page [ First ]
    Set Field [ report::pagenumberTheme; 1 ]
    Set Field [ report::CurrentRecord; Get ( RecordID ) ]
    Set Variable [ $$themepage; Value:2 ]
    Set Field [ TEMP::pageNumber; 1 ]
    Select Window [ Name: "Numbers"; Current file ]
    Loop
    Set Variable [ $duplicate; Value:report::ktest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    If [ report::ktest = $duplicate ]
    Omit Record
    Go to Record/Request/Page [ Previous ]
    End If
    End Loop
    Scroll Window [ Home ]
    Go to Record/Request/Page [ First ]
    Pause/Resume Script [ Indefinitely ]
    #refind all report records omitted for page numbering
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    #now save the TOC to every report record in case the one showing gets deleted.
    Set Variable [ $TOC; Value:report::TOC ]
    Set Variable [ $TOCnumbers; Value:report::TOCnumbers ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ report::TOC; $TOC ]
    Set Field [ report::TOCnumbers; $TOCnumbers ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $path; Value:Get ( TemporaryPath ) ]
    Close Window [ Name: "Report"; Current file ]
    Adjust Window [ Resize to Fit ]
    Set Zoom Level [ 100% ]
    Go to Layout [ “reportCover” (report) ]
    Enter Browse Mode
    Go to Record/Request/Page [ First ]
    Pause/Resume Script [ Indefinitely ]
    #
    #pdf report cover
    Set Variable [ $cover; Value:report::ReportCover ]
    Set Variable [ $pdf; Value:report::ReportPDFtitle ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $printcover; Value:report::_Lreport ]
    Loop
    Set Field [ report::ReportCover; $cover ]
    Set Field [ report::ReportPDFtitle; $pdf ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Enter Find Mode [ ]
    Set Field [ report::_Lreport; $printcover ]
    Perform Find [ ]
    If [ Left ( Get (ApplicationVersion) ; 3) = "run" and Get ( SystemPlatform ) ≠ 3 ]
    Show Custom Dialog [ Message: "The report cover, table of contents, and report should now be saved as 3 PDFs. In the print dialogue box select the PDF option (bottom left corner) and save this first PDF as cover."; Buttons: “OK” ]
    Print [ Records being browsed; All Pages; Orientation: Portrait; Paper size: 8.5" x 11" ] [ Restore ]
    Else If [ Left ( Get (ApplicationVersion) ; 3) ≠ "run" or Get ( SystemPlatform ) = 3 ]
    Print Setup [ Orientation: Portrait; Paper size: 8.5" x 11" ] [ Restore; No dialog ]
    Save Records as PDF [ File Name: “$path/$pdf”; Current record ] [ Document - Compatibility: Acrobat 5 and later ] [ Pages - Number Pages From: 1; Include: All pages ] [ Security - Printing: High Resolution; Editing: Any except extracting pages; Enable copying; Enable Screen Reader ] [ Initial View - Show: Pages Panel and Page; Page Layout: Default; Magnification: 100% ] [ Restore; No dialog ]
    End If
    #
    #pdf table of contents
    Go to Layout [ “TOCpdf” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: report::TOC; ascending ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $duplicate; Value:report::ktest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    If [ report::ktest = $duplicate ]
    Omit Record
    Go to Record/Request/Page [ Previous ]
    End If
    End Loop
    Enter Preview Mode
    If [ Left ( Get (ApplicationVersion) ; 3) = "run" and Get ( SystemPlatform ) ≠ 3 ]
    Show Custom Dialog [ Message: "Save this second PDF as TOC."; Buttons: “OK” ]
    Print [ Records being browsed; All Pages; Orientation: Portrait; Paper size: 8.5" x 11" ] [ Restore ]
    Else If [ Left ( Get (ApplicationVersion) ; 3) ≠ "run" or Get ( SystemPlatform ) = 3 ]
    Save Records as PDF [ File Name: “$path/$pdf”; Records being browsed ] [ Document - Compatibility: Acrobat 5 and later ] [ Pages - Number Pages From: 1; Include: All pages ] [ Security - Printing: High Resolution; Editing: Any except extracting pages; Enable copying; Enable Screen Reader ] [ Initial View - Show: Pages Panel and Page; Page Layout: Default; Magnification: 100% ] [ Restore; Append; No dialog ]
    End If
    #
    #pdf report
    Go to Layout [ “PrintReport” (report) ]
    Enter Find Mode [ ]
    Set Field [ report::ktestSubject; $contact ]
    Set Field [ report::kreportNumber; $$reportNumber ]
    Set Field [ report::ksection; $$Library ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleTestReport::name; ascending reportItem::testName; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Enter Preview Mode
    If [ Left ( Get (ApplicationVersion) ; 3) = "run" and Get ( SystemPlatform ) ≠ 3 ]
    Show Custom Dialog [ Message: "Save this third PDF as Report."; Buttons: “OK” ]
    Print [ Records being browsed; All Pages; Orientation: Portrait; Paper size: 8.5" x 11" ] [ Restore ]
    Show Custom Dialog [ Message: "Open up all three PDFs. Drag the cover and TOC page thumbnails into the Report.pdf along with any other PDF thumbnails you wish from Preview's sidebar. Save this PDF. Trash the other two."; Buttons: “OK” ]
    Else If [ Left ( Get (ApplicationVersion) ; 3) ≠ "run" or Get ( SystemPlatform ) = 3 ]
    Save Records as PDF [ File Name: “$path/$pdf”; Automatically open; Records being browsed ] [ Document - Compatibility: Acrobat 5 and later ] [ Pages - Number Pages From: 1; Include: All pages ] [ Security - Printing: High Resolution; Editing: Any except extracting pages; Enable copying; Enable Screen Reader ] [ Initial View - Show: Pages Panel and Page; Page Layout: Default; Magnification: 100% ] [ Restore; Append; No dialog ]
    End If
    Set Window Title [ Current Window; New Title: "Setup" ]
    Move/Resize Window [ Name: "Setup"; Current file; Width: Get (ScreenWidth) / 2; Top: 0; Left: 0 ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    New Window [ Name: "Tag Menus"; Width: Get (ScreenWidth) / 2; Left: Get (ScreenWidth) / 2 ]
    Go to Layout [ “defaultTest” (tagTestSubjectLocation) ]
    // Perform Script [ “defaultTestLocationMenu” ]
    Perform Script [ “editReport” ]
    Go to Record/Request/Page [ $record ] [ No dialog ]

Fields used in this script

    report::ktestSubject
    report::kreportNumber
    report::ksection
    ruleTestReport::name
    reportItem::testName
    report::pagenumberTheme
    report::CurrentRecord
    TEMP::pageNumber
    report::ktest
    report::TOC
    report::TOCnumbers
    report::ReportCover
    report::ReportPDFtitle
    report::_Lreport

Scripts used in this script

    defaultTestLocationMenu
    editReport

Layouts used in this script

    PrintReport
    pageNumbering
    reportCover
    TOCpdf
    defaultSetup
    defaultTest

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [printThingReport]	Parent Folder: [Print]	Next Script: [CHUNK_insertPageNumbers]
Script Name	TOC
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $record; Value:Get (RecordNumber) ]
    Set Variable [ $TOCnumber; Value:report::TOCnumbers ]
    Set Variable [ $TOC; Value:report::TOC ]
    Go to Field [ ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ report::TOCnumbers; $TOCnumber ]
    Set Field [ report::TOC; $TOC ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Go to Field [ ]

Fields used in this script

    report::TOCnumbers
    report::TOC

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [TOC]	Parent Folder: [Print]	Next Script: [CHUNK_pagenumberTheme]
Script Name	CHUNK_insertPageNumbers
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$theme; Value:reportItem::ktestGroup ]
    If [ $$themepage = 1 ]
    Set Field [ report::pagenumberTheme; TEMP::pageNumber ]
    Set Variable [ $$themepage; Value:2 ]
    Refresh Window
    Else If [ $$themepage = 2 ]
    Set Field [ report::pagenumberItem; TEMP::pageNumber ]
    Go to Record/Request/Page [ Next ]
    Set Field [ report::CurrentRecord; Get ( RecordID ) ]
    End If
    If [ $$theme ≠ reportItem::ktestGroup ]
    Set Variable [ $$themepage; Value:1 ]
    Set Field [ report::CurrentRecord; Get ( RecordID ) ]
    Refresh Window
    End If

Fields used in this script

    reportItem::ktestGroup
    TEMP::pageNumber
    report::pagenumberTheme
    report::pagenumberItem
    report::CurrentRecord

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNK_insertPageNumbers]	Parent Folder: [Print]	Next Script: [CHUNK_pagenumberItem]
Script Name	CHUNK_pagenumberTheme
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$themepage; Value:1 ]
    Set Field [ report::CurrentRecord; Get ( RecordID ) ]
    Go to Field [ ]

Fields used in this script

    report::CurrentRecord

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNK_pagenumberTheme]	Parent Folder: [Print]	Next Script: [CHUNK_insertPageNumbersbackOnePage]
Script Name	CHUNK_pagenumberItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$themepage; Value:2 ]
    Set Field [ report::CurrentRecord; Get ( RecordID ) ]
    Go to Field [ ]

Fields used in this script

    report::CurrentRecord

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNK_pagenumberItem]	Parent Folder: [Print]	Next Script: [CHUNK_insertPageNumbersforwardOnePage]
Script Name	CHUNK_insertPageNumbersbackOnePage
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Select Window [ Name: "Report"; Current file ]
    Go to Record/Request/Page [ Previous ]
    Set Variable [ $page; Value:Get ( PageNumber ) ]
    Set Field [ TEMP::pageNumber; $page ]
    Select Window [ Name: "Numbers"; Current file ]

Fields used in this script

    TEMP::pageNumber

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNK_insertPageNumbersbackOnePage]	Parent Folder: [Print]
Script Name	CHUNK_insertPageNumbersforwardOnePage
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Select Window [ Name: "Report"; Current file ]
    Go to Record/Request/Page [ Next ]
    Set Variable [ $page; Value:Get ( PageNumber ) ]
    Set Field [ TEMP::pageNumber; $page ]
    Select Window [ Name: "Numbers"; Current file ]

Fields used in this script

    TEMP::pageNumber

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


tagMenu
	Parent Folder: [tagMenu]	Next Script: [unzoomSetup]
Script Name	backFromTagMenus
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Left ( $$openedFrom ; 4 ) = "step" ]
    Close Window [ Current Window ]
    Else If [ Get (WindowName) = "Tag Menus" ]
    Select Window [ Name: "Setup"; Current file ]
    Else If [ Get (WindowName) = "Recommendations" ]
    Select Window [ Name: "Report"; Current file ]
    End If

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [backFromTagMenus]	Parent Folder: [tagMenu]	Next Script: [zoomSetup]
Script Name	unzoomSetup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: 700; Top: 0; Left: 0 ]
    Set Variable [ $left; Value:Get ( WindowLeft ) ]
    Set Variable [ $width; Value:Get ( WindowWidth) ]
    Set Zoom Level [ 100% ]
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Width: 333; Left: 0 ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    End If
    Set Zoom Level [ 100% ]
    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: 333; Top: 0; Left: If ( $left + $width + 333 > Get ( ScreenWidth ) ; Get ( ScreenWidth ) - 333 ; $left + $width ) ]
    Select Window [ Name: "Setup"; Current file ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    setupTestFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [unzoomSetup]	Parent Folder: [tagMenu]	Next Script: [gotoSetupReport]
Script Name	zoomSetup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: 700; Top: 0; Left: 0 ]
    Set Variable [ $left; Value:Get ( WindowLeft ) ]
    Set Variable [ $width; Value:Get ( WindowWidth) ]
    Set Zoom Level [ 150% ]
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus" ]
    Go to Layout [ “setupTestFocus” (tagLocation) ]
    End If
    Set Zoom Level [ 150% ]
    Move/Resize Window [ Current Window; Height: Get (ScreenHeight); Width: 490; Top: 0; Left: If ( $left + $width > Get ( ScreenWidth ) - 490; Get ( ScreenWidth ) - 490 ; $left + $width ) ]
    Select Window [ Name: "Setup"; Current file ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    setupTestFocus

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [zoomSetup]	Parent Folder: [tagMenu]	Next Script: [returnToSetup]
Script Name	gotoSetupReport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Close Window [ Name: "Cover Page"; Current file ]
    New Window [ Name: "Cover Page" ]
    Go to Layout [ “setupReport” (test) ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    setupReport

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoSetupReport]	Parent Folder: [tagMenu]	Next Script: [menuNode]
Script Name	returnToSetup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    backFromSetup

Script Definition
Script Steps

    // If [ $$learnEdit ≠ "" and $$defaultMode ≠ 1 ]
    // #Go to testlearn layout and loop back to record.
    // Set Window Title [ Current Window; New Title: "Learn" ]
    // Go to Layout [ “learn1” (testlearn) ]
    // #
    // #Go to Learn tag menu layout and loop back to record.
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Go to Layout [ “defaultSections” (ruleSection) ]
    // Perform Script [ “defaultSectionMenu” ]
    // Select Window [ Name: "Learn"; Current file ]
    // Go to Field [ ]
    // Refresh Window
    // #
    // Set Field [ TEMP::ktest; "" ]
    // #
    // Exit Script [ ]
    If [ $$module = "testmenudetail" ]
    #
    #Go to testlearn layout and loop back to record.
    Set Window Title [ Current Window; New Title: "Test" ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    #
    #Go to Learn tag menu layout and loop back to record.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “testMenuTestItem” (tagMenus) ]
    #
    #Reset temp item ID and clear variable holding
    #ID while editing item information.
    Set Field [ TEMP::ktest; $$itemID ]
    Set Field [ TEMP::ktestItemList; $$detailID ]
    Set Variable [ $$itemID ]
    #
    Perform Script [ “menuTestItem” ]
    #
    Exit Script [ ]
    Else If [ $$module = "reportTagItem" ]
    #
    #Go to testlearn layout and loop back to record.
    Set Window Title [ Current Window; New Title: "Report" ]
    Go to Layout [ “PrintReportEdit” (report) ]
    #
    #Go to Learn tag menu layout and loop back to record.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “reportTagItem” (tagMenus) ]
    #
    #Reset temp item ID and clear variable holding
    #ID while editing item information.
    Set Field [ TEMP::ktest; $$itemID ]
    Set Field [ TEMP::ktestItemList; $$detailID ]
    Set Variable [ $$itemID ]
    #
    Perform Script [ “menuTestItem” ]
    #
    Exit Script [ ]
    Else If [ $$module = "defaultSections" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ $$module ]
    If [ $$module = "defaultSections" ]
    Perform Script [ “defaultSectionMenu” ]
    End If
    Go to Record/Request/Page [ $$recordNumber ] [ No dialog ]
    Set Variable [ $$recordNumber ]
    #
    Set Field [ TEMP::ktest; "" ]
    #
    #
    Exit Script [ ]
    End If
    #
    #Go to testlearn layout and loop back to record.
    Set Window Title [ Current Window; New Title: "Test" ]
    Go to Layout [ “step4_InspectionFinding” (testlearn) ]
    #
    #Go to Learn tag menu layout and loop back to record.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “testMenuTestItem” (tagMenus) ]
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ $$recordNumber ] [ No dialog ]
    Set Variable [ $$recordNumber ]
    #
    Exit Script [ ]

Fields used in this script

    TEMP::ktest
    TEMP::ktestItemList
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

    defaultSectionMenu
    menuTestItem

Layouts used in this script

    learn1
    defaultSections
    step4_InspectionFinding
    testMenuTestItem
    PrintReportEdit
    reportTagItem
    defaultSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [returnToSetup]	Parent Folder: [tagMenu]	Next Script: [menuKey]
Script Name	menuNode
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu

Script Definition
Script Steps

    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    #
    #Sort the records by date field, if current sort is
    #by order number.
    If [ TEMP::TLTestSort = "order" or TEMP::TLSampleSort = "order" ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    #Set the sort preference field to date.
    If [ $$citationMatch = "sample" ]
    Set Field [ TEMP::TLSampleSort; "" ]
    Else If [ $$citationMatch = "test" ]
    Set Field [ TEMP::TLTestSort; "" ]
    End If
    #
    End If
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"node" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenuNodeKeyword” (tagMenus) ]
    #
    #If user has elected to show only the tag ...
    Else If [ TEMP::layoutRtagN = "" or TEMP::layoutLtagN = "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs2” (tagMenus) ]
    End If
    Set Field [ TEMP::layoutLtagN; "more" & Get (LayoutName) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Set Field [ TEMP::layoutRtagN; "more" & Get (LayoutName) ]
    End If
    #
    #If user has elected to show some pictures ...
    Else If [ TEMP::layoutRtagN ≠ "" or TEMP::layoutLtagN ≠ "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ Middle ( TEMP::layoutLtagN ; 5 ; 42 ) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ Middle ( TEMP::layoutRtagN ; 5 ; 42 ) ]
    End If
    End If
    #
    #Find node tags.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    // #If no records exist then create one.
    // If [ Get (FoundCount)=0 ]
    // Perform Script [ “newCitationMenuGroup” ]
    // End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortNode = "cat" or TEMP::sortNode = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortNode = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Decided not do this as user may be going to
    #node menus to add an node tag to a citation
    #the user is planning on adding to a tag
    #which means the user may want to remain in
    #add to tag mode when clicking on the node menu
    #item. In the first phase of developement
    #I thought if the user activitated the add mode
    #in either the keyword or node menu that the
    #user would not want to see the add button showing
    #green in the other window (keyword or node).
    #I was trying to keep the add button's on state
    #associated only with the menu item where it
    #was activitated. This in testing did not seem
    #useful at limited access to node or keyword
    #in this mode when both might be needed.
    // #If user was in Add mode for keyword, then reset
    // #mode back to citation mode (or adding node
    // #tags to citations instead of the other way around).
    // If [ $$add = 1 and $$addcitationMatch = "key" ]
    // Perform Script [ “addLinksPicturesToTagsMode” ]
    // End If
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$primarykey = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$primarykey ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #Decided this override of above loop is to confusing
    #and the proper way to do keep record user wants
    #to add to in focus is to open a third window.
    #I'm not doing that for now.
    // #If in add mode then go to addRecord.
    // If [ $$add = 1 ]
    // Go to Record/Request/Page [ First ]
    // Loop
    // Exit Loop If [ $$addRecordID = tagMenus::_Ltag ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadTagRecord” ]
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    Else If [ Get (LastError) ≠ 112 ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch.
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to node tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on reference layout ...
    If [ Left (Get (LayoutName) ; 1) = "r" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "node" ]
    Perform Find [ ]
    #
    #find on learn layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "node" ]
    Perform Find [ ]
    End If
    End If
    Set Variable [ $$citationItem; Value:reference::knodePrimary ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #

Fields used in this script

    testlearn::kNodePrimary
    TEMP::TLTestSort
    TEMP::TLSampleSort
    testlearn::date
    testlearn::timestamp
    TEMP::mTag
    TEMP::layoutRtagN
    TEMP::layoutLtagN
    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortNode
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagMenus::_Ltag
    reference::kcsection
    reference::filterFind
    testlearn::kcsection
    testlearn::filterFind

Scripts used in this script

    newCitationMenuGroup
    addLinksPicturesToTagsMode
    loadTagRecord

Layouts used in this script

    addMenuNodeKeyword
    ltagNK2
    ltagNKs2
    ReferenceMenu2keywordOrNode1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuNode]	Parent Folder: [tagMenu]	Next Script: [menuHealth]
Script Name	menuKey
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu
    editLearn
    editCitation
    learn

Script Definition
Script Steps

    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    End If
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"key" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenuNodeKeyword” (tagMenus) ]
    #
    #If user has elected to show only the tag ...
    Else If [ TEMP::layoutRtagK = "" or TEMP::layoutLtagK = "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Set Field [ TEMP::layoutLtagK; "more" & Get (LayoutName) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Set Field [ TEMP::layoutRtagK; "more" & Get (LayoutName) ]
    End If
    #
    #If user has elected to show some pictures ...
    Else If [ TEMP::layoutRtagK ≠ "" or TEMP::layoutLtagK ≠ "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ Middle ( TEMP::layoutLtagK ; 5 ; 42 ) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ Middle ( TEMP::layoutRtagK ; 5 ; 42 ) ]
    End If
    End If
    #
    #Find key tags for library section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    // #If no records exist then create one.
    // If [ Get (FoundCount)=0 ]
    // Perform Script [ “newCitationMenuGroup” ]
    // End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortKey = "cat" or TEMP::sortKey = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Decided not do this as user may be going to
    #node menus to add an node tag to a citation
    #the user is planning on adding to a tag
    #which means the user may want to remain in
    #add to tag mode when clicking on the node menu
    #item. In the first phase of developement
    #I thought if the user activitated the add mode
    #in either the keyword or node menu that the
    #user would not want to see the add button showing
    #green in the other window (keyword or node).
    #I was trying to keep the add button's on state
    #associated only with the menu item where it
    #was activitated. This in testing did not seem
    #useful at limited access to node or keyword
    #in this mode when both might be needed.
    // #If user was in Add mode for keyword, then reset
    // #mode back to citation mode (or adding node
    // #tags to citations instead of the other way around).
    // If [ $$add = 1 and $$addcitationMatch = "node" ]
    // Perform Script [ “addLinksPicturesToTagsMode” ]
    // End If
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ $$primaryKey = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$primaryKey ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadTagRecord” ]
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kKeywordPrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:reference::kkeywordPrimary ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch.
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to keyword tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on learn layout ...
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "key" ]
    Perform Find [ ]
    #
    #find on reference layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "key" ]
    Perform Find [ ]
    End If
    End If
    #
    End If
    Refresh Window
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    testlearn::date
    testlearn::timestamp
    TEMP::mTag
    TEMP::layoutRtagK
    TEMP::layoutLtagK
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortKey
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagMenus::_Ltag
    testlearn::kKeywordPrimary
    reference::kkeywordPrimary
    testlearn::kcsection
    testlearn::filterFind
    reference::kcsection
    reference::filterFind

Scripts used in this script

    newCitationMenuGroup
    addLinksPicturesToTagsMode
    loadTagRecord

Layouts used in this script

    addMenuNodeKeyword
    ltagNK2
    ReferenceMenu2keywordOrNode1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuKey]	Parent Folder: [tagMenu]	Next Script: [menuMedium]
Script Name	menuHealth
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu

Script Definition
Script Steps

    #
    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    End If
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"health" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Turn off the loadtagrecord script to speed up the
    #loop portion of the script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenu1” (tagMenus) ]
    #
    #If in learn mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnMenuHealth” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenuSHealth” (tagMenus) ]
    End If
    #
    #If in reference mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenuHealth” (tagMenus) ]
    End If
    #
    #Find Permission tags. Permission tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #Upate language for locked health tags.
    Perform Script [ “CHUNKHealthLockedFields” ]
    #
    // #If no records exist then create one.
    // If [ Get (FoundCount)=0 ]
    // Perform Script [ “newCitationMenuGroup” ]
    // End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortHealth = "cat" or TEMP::sortHealth = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortHealth = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$health = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Turn loadtagrecord script back on.
    Set Variable [ $$stopLoadTagRecord ]
    #
    If [ $$health ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    Exit Script [ ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch.
    If [ $$add = 1 ]
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to health tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on reference layout ...
    If [ Left (Get (LayoutName) ; 1) = "r" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "health" ]
    Perform Find [ ]
    #
    #find on learn layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "health" ]
    Perform Find [ ]
    End If
    End If
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    testlearn::date
    testlearn::timestamp
    TEMP::mTag
    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::sortHealth
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::tag
    tagMenus::_Ltag
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    testlearn::kcsection
    testlearn::filterFind

Scripts used in this script

    CHUNKHealthLockedFields
    newCitationMenuGroup

Layouts used in this script

    addMenu1
    learnMenuHealth
    learnMenuSHealth
    ReferenceMenuHealth

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuHealth]	Parent Folder: [tagMenu]	Next Script: [menuTest]
Script Name	menuMedium
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu

Script Definition
Script Steps

    #
    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    End If
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"medium" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Turn off the loadtagrecord script to speed up the
    #loop portion of the script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenu1” (tagMenus) ]
    #
    #If in learn mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnMenu1” (tagMenus) ]
    #
    #If in reference mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    End If
    #
    #Find medium tags. Medium tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    // #If no records exist then create one.
    // If [ Get (FoundCount)=0 ]
    // Perform Script [ “newCitationMenuGroup” ]
    // End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortMedium = "cat" or TEMP::sortMedium = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortMedium = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$medium = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Turn loadtagrecord script back on.
    Set Variable [ $$stopLoadTagRecord ]
    #
    If [ $$medium ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    // Exit Script [ ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch.
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to medium tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on reference layout ...
    If [ Left (Get (LayoutName) ; 1) = "r" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "medium" ]
    Perform Find [ ]
    #
    #find on learn layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "medium" ]
    Perform Find [ ]
    End If
    End If
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    testlearn::date
    testlearn::timestamp
    TEMP::mTag
    tagMenus::match
    TEMP::sortMedium
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagMenus::_Ltag
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    testlearn::kcsection
    testlearn::filterFind

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

    addMenu1
    learnMenu1
    ReferenceMenu1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuMedium]	Parent Folder: [tagMenu]	Next Script: [menuTestItem]
Script Name	menuTest
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    editLearn
    backFromSetup

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Clear sample and test tags.
    If [ $$citationMatch = "sample" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Field [ TEMP::ktest; "" ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    Select Window [ Name: "Tag Menus"; Current file ]
    End If
    #
    #Clear order numbers.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Window [ Height: 1; Width: 1 ]
    Go to Layout [ “learnSCRIPTloops” (testlearn) ]
    Perform Find [ Specified Find Requests: Find Records; Criteria: testlearn::orderTest: “###” ] [ Restore ]
    Loop
    Set Field [ testlearn::orderTest; "" ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Close Window [ Current Window ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"test" ]
    #
    #Turn off the loadtagrecord script to speed up the
    #loop portion of the script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnTest” (test) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnSTest” (test) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “learnTest” (test) ]
    End If
    #
    #Find section tags. Test tags are library
    #items. Any brainstorm or evidence record
    #can be tagged with any section item record SO
    #find all library sections current record is
    #assigned to.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ test::ksection; TEMP::ksection ]
    Perform Find [ ]
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    #
    If [ TEMP::sortTest = "cat" or TEMP::sortTest = "" ]
    Sort Records [ Specified Sort Order: groupTest::order; based on value list: “order” groupTest::name; ascending tagMenus::orderOrLock; based on value list: “order” test::order; ascending test::testName; ascending ] [ Restore; No dialog ]
    Else If [ $$citationMatch = "test" ]
    Set Field [ TEMP::sortTest; "abc" ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Set Variable [ $number; Value:1 ]
    Go to Field [ ]
    Loop
    Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" = test::_Ltest & ¶ ]
    Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" = test::_Ltest & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" ≠ test::_Ltest & ¶ ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #Turn loadtagrecord script back on and perform
    #loadtag... script to highlight any Learn records
    #tagged with the current tag record.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadItemRecordForTestTagMenu” ]
    #

Fields used in this script

    testlearn::kNodePrimary
    TEMP::ktest
    testlearn::orderTest
    TEMP::InventoryLibaryYN
    TEMP::ksection
    test::ksection
    TEMP::sortTest
    groupTest::order
    groupTest::name
    tagMenus::orderOrLock
    test::order
    test::testName
    test::_Ltest

Scripts used in this script

    loadItemRecordForTestTagMenu

Layouts used in this script

    learnSCRIPTloops
    learnTest
    learnSTest

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuTest]	Parent Folder: [tagMenu]	Next Script: [menuSample]
Script Name	menuTestItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    newTestGroup
    newTest
    (un)linkTestItemGroupToTestItemList
    gotoTestItem
    evidenceDetailSpacetimeDELETE?????
    returnToSetup
    addLinksPicturesToTagsMode

Script Definition
Script Steps

    #
    If [ TEMP::ktest = "" ]
    Exit Script [ ]
    Show Custom Dialog [ Message: "There are no tests."; Buttons: “OK” ]
    End If
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenuTestItem” (tagMenus) ]
    #
    #If user has elected to show only the tag ...
    Else If [ TEMP::DetailmoreORLessLayout = "" and Left ( Get ( LayoutName ) ; 5 ) = "setup" ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    Else If [ TEMP::DetailmoreORLessLayout ≠ "" and Left ( Get ( LayoutName ) ; 5 ) = "setup" ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    #
    #If user has elected to show some pictures ...
    Else If [ TEMP::DetailmoreORLessLayout = "" and Left ( Get ( LayoutName ) ; 4 ) = "test" ]
    Go to Layout [ “testMenuTestItem” (tagMenus) ]
    Else If [ TEMP::DetailmoreORLessLayout ≠ "" and Left ( Get ( LayoutName ) ; 4 ) = "test" ]
    Go to Layout [ “testMenuTestItem” (tagMenus) ]
    #
    Else If [ Left ( Get (LayoutName) ; 6 ) = "report" ]
    #
    #Find test list key as it may be different from test key.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopTest; Value:1 ]
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Layout [ “testSetup” (test) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ test::_Ltest; TEMP::ktest ]
    Perform Find [ ]
    Set Field [ TEMP::ktestItemList; test::ktestItemList ]
    Go to Layout [ “reportTagItem” (tagMenus) ]
    Set Variable [ $$stopLoadTagRecord ]
    Set Variable [ $$stopTest ]
    Set Variable [ $$ID ]
    #
    End If
    Set Variable [ $$citationMatch; Value:"testItem" ]
    Set Field [ TEMP::mTag; TEMP::ktest ]
    #
    #Find test items for section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuTestGroups::match; TEMP::ktestItemList & ¶ ]
    Perform Find [ ]
    #
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::name; ascending ruleTagMenuTestGroups::_Lgroup; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    Go to Record/Request/Page [ First ]
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch.
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to test item tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on learn layout ...
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "testItem" ]
    Perform Find [ ]
    #
    #find on reference layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "testItem" ]
    Perform Find [ ]
    End If
    End If
    #
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    TEMP::ktest
    TEMP::DetailmoreORLessLayout
    test::_Ltest
    test::ktestItemList
    TEMP::ktestItemList
    TEMP::mTag
    ruleTagMenuTestGroups::match
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::name
    ruleTagMenuTestGroups::_Lgroup
    tagMenus::orderOrLock
    tagMenus::tag
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    reference::kcsection
    reference::filterFind

Scripts used in this script

Layouts used in this script

    addMenuTestItem
    setupTestItem
    testMenuTestItem
    testSetup
    reportTagItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuTestItem]	Parent Folder: [tagMenu]	Next Script: [menuCitation]
Script Name	menuSample
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Clear sample and test tags.
    If [ $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    Select Window [ Name: "Tag Menus"; Current file ]
    End If
    #
    #Clear order numbers.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Window [ Height: 1; Width: 1 ]
    Go to Layout [ “learnSCRIPTloops” (testlearn) ]
    Perform Find [ Specified Find Requests: Find Records; Criteria: testlearn::orderTest: “###” ] [ Restore ]
    Loop
    Set Field [ testlearn::orderTest; "" ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Close Window [ Current Window ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"sample" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Turn off the loadtagrecord script to speed up the
    #loop portion of the script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    #
    #Goto correct layout.
    Go to Layout [ “learnMenuSample” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenuStuffSample” (tagMenus) ]
    End If
    #
    #Find sample tags for current library section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortSample = "cat" or TEMP::sortSample = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortSample = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $number; Value:1 ]
    Go to Field [ ]
    Loop
    Exit Loop If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) & "¶" = tagMenus::_Ltag & ¶ ]
    Exit Loop If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Exit Loop If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) & "¶" = tagMenus::_Ltag & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Turn loadtagrecord script back on.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    #
    #Turn loadtagrecord script back on and perform
    #loadtag... script to highlight any Learn records
    #tagged with the current tag record.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadItemRecordForSampleTagMenu” ]
    #
    #
    #
    // If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) & "¶" ≠ tagMenus::_Ltag & ¶ ]
    // Go to Record/Request/Page [ First ]
    // Select Window [ Name: "Learn"; Current file ]
    // #
    // #If sort by order number is on then sort by
    // #order number.
    // If [ TEMP::TLSampleSort = 1 ]
    // Set Field [ TEMP::TLSampleSort; "" ]
    // Perform Script [ “sortTLRecordsByOrderNumber” ]
    // Else If [ TEMP::TLSampleSort = "" ]
    // Set Field [ TEMP::TLSampleSort; 1 ]
    // Perform Script [ “sortTLRecordsByOrderNumber” ]
    // End If
    // Go to Field [ ]
    // Refresh Window
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Exit Script [ ]
    // End If
    // #
    // #Inform user of items use on both screens.
    // Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    // Set Variable [ $$tagSample; Value:tagMenus::_Ltag ]
    // Set Variable [ $$sampleORTestID; Value:Get (RecordID) ]
    // Refresh Window
    // #
    // #Just in case user was in nonTag field on this
    // #window when user clicked a menu button on
    // #the other window, exit all fields.
    // Set Variable [ $$stopLoadCitation ]
    // Select Window [ Name: "Learn"; Current file ]
    // #
    // #If sort by order number is on then sort by
    // #order number.
    // If [ TEMP::TLSampleSort = 1 ]
    // Set Field [ TEMP::TLSampleSort; "" ]
    // Perform Script [ “sortTLRecordsByOrderNumber” ]
    // Else If [ TEMP::TLSampleSort = "" ]
    // Set Field [ TEMP::TLSampleSort; 1 ]
    // Perform Script [ “sortTLRecordsByOrderNumber” ]
    // End If
    // Go to Field [ ]
    // Refresh Window
    // Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    testlearn::kNodePrimary
    testlearn::orderTest
    TEMP::mTag
    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortSample
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::tag
    tagMenus::_Ltag
    TEMP::TLSampleSort

Scripts used in this script

    insureEqualityOfSpellFields
    loadItemRecordForSampleTagMenu
    sortTLRecordsByOrderNumber

Layouts used in this script

    learnSCRIPTloops
    learnMenuSample
    learnMenuStuffSample

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuSample]	Parent Folder: [tagMenu]	Next Script: [menuReference]
Script Name	menuCitation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu

Script Definition
Script Steps

    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    End If
    #
    #Set testlearn internal reference field conditional
    #formatting to tan.
    Set Variable [ $$internal ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"cite" ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Freeze Window
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnMenu3Cite” (reference) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu3Cite” (reference) ]
    End If
    #
    #Find Citations for this library.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    If [ Left (Get (LayoutName) ; 9 ) ≠ "reference" ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::show; "show in learn" ]
    Else
    Set Field [ reference::kcsection; TEMP::ksection ]
    End If
    // Set Field [ reference::filterFind; "main" & ¶ ]
    // Set Field [ reference::ktest; TEMP::ktest ]
    Perform Find [ ]
    // Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::knodePrimary: “=” ] [ Restore ]
    // Extend Found Set [ Specified Find Requests: Find Records; Criteria: reference::referenceNodes: “*” AND reference::filterFind: “"main"” ] [ Restore ]
    // Extend Found Set [ Specified Find Requests: Find Records; Criteria: reference::referenceNodes: “*” ] [ Restore ]
    // Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::Title: “=” ] [ Restore ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending ] [ Restore; No dialog ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    // If [ TEMP::sortCite = "cat" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortCite = "abc" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ $$cite = reference::_Lreference ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$cite ≠ reference::_Lreference ]
    #
    #Decided below was too much help. User can look
    #on main screen to see where cite or reference is located.
    // #Clear reference location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$refIsRefRecord ]
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #Decided below was too much help. User can look
    #on main screen to see where cite or reference is located.
    // #Turn on reference location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$refIsRefRecord; Value:1 ]
    #
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:reference::_Lreference ]
    Refresh Window
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    testlearn::date
    testlearn::timestamp
    TEMP::ksection
    reference::kcsection
    reference::show
    reference::filterFind
    TEMP::ktest
    reference::ktest
    reference::referenceNodes
    tagKeywordPrimary::tag
    TEMP::sortCite
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagKeywordPrimary::orderOrLock
    reference::referenceShort
    reference::_Lreference

Scripts used in this script

Layouts used in this script

    learnMenu3Cite
    ReferenceMenu3Cite

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuCitation]	Parent Folder: [tagMenu]	Next Script: [menuCopyist]
Script Name	menuReference
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    externalReferences
    backToLearnOrDefaultSetup

Script Definition
Script Steps

    #
    #Use this bit of code to make the default reference
    #point to the internal (Learn) records instead of
    #the external references. Other scripts with code
    #that needs to be turned on: externalReferences,
    // #If library is for inventory then go to container menu.
    // If [ TEMP::InventoryLibaryYN ≠ "" and Get ( LayoutName ) ≠ "learnMenu4STUFFRefCite" ]
    // Set Variable [ $$citationMatch; Value:"ref" ]
    // Perform Script [ “externalReferences” ]
    // Exit Script [ ]
    // End If
    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    End If
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"ref" ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Set testlearn internal reference field conditional
    #formatting to transparent.
    Set Variable [ $$internal ]
    #
    #Goto correct layout.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenuRefStuff” (reference) ]
    Else
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnMenu3Cite” (reference) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu3Cite” (reference) ]
    End If
    End If
    #
    #Find References for this section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" ]
    Set Field [ reference::show; "show in learn" ]
    // Set Field [ reference::ktest; TEMP::ktest ]
    Perform Find [ ]
    // Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::knodePrimary: “=” ] [ Restore ]
    // Extend Found Set [ Specified Find Requests: Find Records; Criteria: reference::referenceNodes: “*” ] [ Restore ]
    // Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::Title: “=” ] [ Restore ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ FilterValues ( $$ref ; reference::_Lreference ) = reference::_Lreference & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ FilterValues ( $$ref ; reference::_Lreference ) ≠ reference::_Lreference & ¶ ]
    #
    #Decided below was too much help. User can look
    #on main screen to see where cite or reference is located.
    // #Clear reference location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$refIsRefRecord ]
    #
    Scroll Window [ Home ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $stopref ]
    Exit Script [ ]
    End If
    #
    #Decided below was too much help. User can look
    #on main screen to see where cite or reference is located.
    // #Turn on reference location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$refIsRefRecord; Value:1 ]
    #
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:reference::_Lreference ]
    Refresh Window
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    TEMP::InventoryLibaryYN
    testlearn::date
    testlearn::timestamp
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    reference::show
    TEMP::ktest
    reference::ktest
    reference::referenceNodes
    tagKeywordPrimary::orderOrLock
    tagKeywordPrimary::tag
    reference::referenceShort
    reference::_Lreference

Scripts used in this script

    externalReferences

Layouts used in this script

    learnMenuRefStuff
    learnMenu3Cite
    ReferenceMenu3Cite

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuReference]	Parent Folder: [tagMenu]	Next Script: [menuPath]
Script Name	menuCopyist
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu

Script Definition
Script Steps

    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"copyist" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenu1” (tagMenus) ]
    #
    #If not in add mode ...
    Else If [ $$add ≠ 1 ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    End If
    #
    #Find copyist tags. Copyist tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    // #If no records exist then create one.
    // If [ Get (FoundCount)=0 ]
    // Perform Script [ “newCitationMenuGroup” ]
    // End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortCopyist = "cat" or TEMP::sortCopyist = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortCopyist = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$copyist = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$copyist ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    // Exit Script [ ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    Refresh Window
    Select Window [ Name: "References"; Current file ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch on reference layout.
    #The learn record is never changed.
    If [ Left (Get (LayoutName) ; 1) = "r" ]
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to copyist tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on reference layout ...
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "copyist" ]
    Perform Find [ ]
    End If
    End If
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    TEMP::mTag
    tagMenus::match
    TEMP::sortCopyist
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagMenus::_Ltag
    TEMP::ksection
    reference::kcsection
    reference::filterFind

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

    addMenu1
    ReferenceMenu1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuCopyist]	Parent Folder: [tagMenu]	Next Script: [menuOrgan]
Script Name	menuPath
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu
    addFileLink4ToTag
    addFileLink5ToTag
    addFileLink6ToTag

Script Definition
Script Steps

    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Clear sample and test tags so there conditional
    #formatting in the Learn window is removed.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$tagtest ]
    Set Variable [ $$tagRecordID ]
    Set Variable [ $$tagEdit ]
    End If
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"path" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Turn off the loadtagrecord script to speed up the
    #loop portion of the script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenu1” (tagMenus) ]
    #
    #If in learn mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnMenu1” (tagMenus) ]
    #
    #If in reference mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    End If
    #
    #Find Path tags. Path tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "Path" ]
    Perform Find [ ]
    #
    #If no records exist then create one.
    If [ Get (FoundCount)=0 ]
    Perform Script [ “newCitationMenuGroup” ]
    End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    Sort Records [ ] [ No dialog ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortPath = "cat" or TEMP::sortPath = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortPath = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$Path = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Turn loadtagrecord script back on.
    Set Variable [ $$stopLoadTagRecord ]
    #
    If [ $$Path ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    // Exit Script [ ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch.
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to file path tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on reference layout ...
    If [ Left (Get (LayoutName) ; 1) = "r" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "path" ]
    Perform Find [ ]
    #
    #find on learn layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "path" ]
    Perform Find [ ]
    End If
    End If
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    testlearn::date
    testlearn::timestamp
    TEMP::mTag
    tagMenus::match
    TEMP::sortPath
    tagMenus::_Ltag
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    testlearn::kcsection
    testlearn::filterFind

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

    addMenu1
    learnMenu1
    ReferenceMenu1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuPath]	Parent Folder: [tagMenu]	Next Script: [newCitationMenuGroup]
Script Name	menuOrgan
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu

Script Definition
Script Steps

    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Go to Field [ ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"organ" ]
    #
    #Set match temp tag field to limit move pulldown
    #to just the groups for this section and item type.
    #( if you're wondering why this temp field is a
    # a dupllicate of the citation match variable it
    # is because I didn't need it until a year into
    # writing this database. At some point, it would
    # probably be good to get rid of the variable. )
    Set Field [ TEMP::mTag; $$citationMatch ]
    #
    #Goto correct layout.
    #If in add mode ...
    If [ $$add = 1 ]
    Go to Layout [ “addMenu1” (tagMenus) ]
    #
    #If in learn mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "o" ]
    Go to Layout [ “learnMenu1” (tagMenus) ]
    #
    #If in reference mode ...
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    End If
    #
    #Find Organ tags. Organ tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "organ" ]
    Perform Find [ ]
    #
    #If no records exist then create one.
    If [ Get (FoundCount)=0 ]
    Perform Script [ “newCitationMenuGroup” ]
    End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    Sort Records [ ] [ No dialog ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortOrgan = "cat" or TEMP::sortOrgan = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortOrgan = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$Organ = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$Organ ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    // Exit Script [ ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    Refresh Window
    Select Window [ Name: "References"; Current file ]
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Go to Field [ ]
    #
    #If in add mode, find only records tagged with
    #current $$citationmatch on reference layout.
    #The learn record is never changed.
    If [ Left (Get (LayoutName) ; 1) = "r" ]
    If [ $$add = 1 ]
    #
    #But, give user option to keep the records currently
    #showing in the main window.
    Show Custom Dialog [ Message: "In the main window, show only records with pictures and links added to organ tags, or keep the current records shown?"; Buttons: “keep”, “show” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    #
    #find on reference layout ...
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "organ" ]
    Perform Find [ ]
    End If
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    TEMP::mTag
    tagMenus::match
    TEMP::sortOrgan
    tagMenus::_Ltag
    TEMP::ksection
    reference::kcsection
    reference::filterFind

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

    addMenu1
    learnMenu1
    ReferenceMenu1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuOrgan]	Parent Folder: [tagMenu]	Next Script: [newCitationMenuItem]
Script Name	newCitationMenuGroup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    createEmptyLibrary
    openDetailWindow !!! FINISH LATER !!!
    menuNode
    menuKey
    menuHealth
    menuMedium
    menuCopyist
    menuPath
    menuOrgan
    newCitationMenuItem
    duplicateTheory
    menuTestFind
    returnToAddRecordPUTONHOLD!!!!

Script Definition
Script Steps

    Go to Field [ ]
    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ tempSetup::kdefaultNodePrimary = "" and $$stopAddBack ≠ 1 ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible) from Tag Menus window OR create a node record for yourself?"; Buttons: “select”, “create” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Halt Script
    Else
    Set Field [ tempSetup::kdefaultNodePrimary; "self" ]
    End If
    End If
    #
    If [ tempSetup::ksection = "" ]
    Show Custom Dialog [ Message: "First select a section for this category to be created under, then you may create a new category."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Go to Layout [ “tableGroupTag” (groupTest) ]
    #
    New Record/Request
    Set Field [ groupTest::ksection; TEMP::ksection ]
    Set Field [ groupTest::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    #
    If [ $$citationMatch = "otherkey" or $$citationMatch = "primarykey" ]
    Set Field [ groupTest::match; "key" ]
    Else If [ $$citationMatch ≠ "otherkey" ]
    Set Field [ groupTest::match; $$citationMatch ]
    End If
    #
    Set Field [ groupTest::name; "group" & groupTest::_Lgroup ]
    Set Field [ groupTest::nameSpelling; "group" & groupTest::_Lgroup ]
    Set Variable [ $group; Value:groupTest::_Lgroup ]
    #
    If [ $$citationMatch = "sample" ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    End If
    #
    Go to Layout [ original layout ]
    New Record/Request
    Set Field [ tagMenus::kGroupOrTest; $group ]
    #
    #Only test focus tags require section. All other tags
    #are linked to groups and then the groups are linked
    #to sections.
    If [ $$citationMatch = "location" ]
    Set Field [ tagMenus::ksection; TEMP::ksection ]
    End If
    // Set Field [ tagMenus::ksection; TEMP::ksection ]
    If [ tempSetup::kdefaultNodePrimary = "self" ]
    Set Field [ tagMenus::tag; "MyLastName, MyFirstName" ]
    Set Field [ TEMP::kdefaultNodePrimary; tagMenus::_Ltag ]
    Set Field [ ruleTagMenuGroups::kRecordCreatorNode; tagMenus::_Ltag ]
    Else
    Set Field [ tagMenus::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    End If
    If [ $$citationMatch = "key" ]
    Set Field [ tagMenus::match; "key" ]
    Set Field [ tagMenus::tag; "keyword " & tagMenus::_Ltag ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ tagMenus::match; "node" ]
    Else If [ $$citationMatch ≠ "key" or $$citationMatch ≠ "node" ]
    Set Field [ tagMenus::match; $$citationMatch ]
    End If
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    If [ $$citationMatch = "sample" ]
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadItemRecordForSampleTagMenu” ]
    End If
    Go to Field [ tagMenus::tag ] [ Select/perform ]

Fields used in this script

    TEMP::nodeLock
    tempSetup::kdefaultNodePrimary
    tempSetup::ksection
    TEMP::ksection
    groupTest::ksection
    TEMP::kdefaultNodePrimary
    groupTest::kRecordCreatorNode
    groupTest::match
    groupTest::_Lgroup
    groupTest::name
    groupTest::nameSpelling
    tagMenus::kGroupOrTest
    tagMenus::ksection
    tagMenus::tag
    tagMenus::_Ltag
    ruleTagMenuGroups::kRecordCreatorNode
    tagMenus::kRecordCreatorNode
    tagMenus::match
    ruleTagMenuGroups::name
    tagMenus::orderOrLock

Scripts used in this script

    loadItemRecordForSampleTagMenu

Layouts used in this script

    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newCitationMenuGroup]	Parent Folder: [tagMenu]	Next Script: [menuRefAddKeyWords]
Script Name	newCitationMenuItem
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ tempSetup::kdefaultNodePrimary = "" ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible) from Tag Menus window OR create a node record for yourself?"; Buttons: “select”, “create” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Halt Script
    Else
    Set Field [ tempSetup::kdefaultNodePrimary; "self" ]
    End If
    End If
    If [ Get (FoundCount) = 0 ]
    Perform Script [ “newCitationMenuGroup” ]
    Exit Script [ ]
    End If
    #
    #Stop spelling check script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Record/Request
    Set Field [ tagMenus::kGroupOrTest; GetNthRecord ( tagMenus::kGroupOrTest ; Get (RecordNumber) - 1 ) ]
    If [ tempSetup::kdefaultNodePrimary = "self" ]
    Set Field [ TEMP::kdefaultNodePrimary; tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "MyLastName, MyFirstName" ]
    Else
    Set Field [ tagMenus::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    End If
    #
    #Only test focus tags require section. All other tags
    #are linked to groups and then the groups are linked
    #to sections.
    If [ $$citationMatch = "location" ]
    Set Field [ tagMenus::ksection; TEMP::ksection ]
    End If
    // Set Field [ tagMenus::ksection; TEMP::ksection ]
    If [ $$citationMatch = "key" ]
    Set Field [ tagMenus::match; "key" ]
    Set Field [ tagMenus::tag; "keyword " & tagMenus::_Ltag ]
    Go to Field [ tagMenus::tag ] [ Select/perform ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Exit Script [ ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ tagMenus::match; "node" ]
    Else If [ $$citationMatch ≠ "key" or $$citationMatch ≠ "node" ]
    Set Field [ tagMenus::match; $$citationMatch ]
    End If
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Go to Object [ Object Name: "tag" ]

Fields used in this script

    TEMP::nodeLock
    tempSetup::kdefaultNodePrimary
    tagMenus::kGroupOrTest
    tagMenus::_Ltag
    TEMP::kdefaultNodePrimary
    tagMenus::tag
    tagMenus::kRecordCreatorNode
    TEMP::ksection
    tagMenus::ksection
    tagMenus::match

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newCitationMenuItem]	Parent Folder: [tagMenu]	Next Script: [gotoMainFromTestTagMenus]
Script Name	menuRefAddKeyWords
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    TgotoCitationMenu
    externalReferences
    loadCitation OLD
    backToLearnOrDefaultSetup

Script Definition
Script Steps

    #
    #Ask user if OK to replace keywords.
    Show Custom Dialog [ Message: "Add reference's keywords to current Learn record -- " & //KEYWORDS tagKeywordPrimary::tag & ", " & reference::OtherKeyWords & " -- ? (This will replace all keywords for this record, if there are any.)"; Buttons: “no”, “yes” ]
    #
    #Copy tag's keywords and go to Learn window and
    #replace current record's keywords with them.
    If [ Get ( LastMessageChoice ) = 2 ]
    Set Variable [ $citekeywordOther; Value:reference::kkeywordOther ]
    Set Variable [ $citekeywordOtherWords; Value:reference::OtherKeyWords ]
    Set Variable [ $citekeywordPrimary; Value:reference::kkeywordPrimary ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kKeywordPrimary; $citekeywordPrimary ]
    Set Field [ testlearn::kcKeywordOther; $citekeywordOther ]
    Set Field [ testlearn::OtherKeyWords; $citekeywordOtherWords ]
    End If
    #
    #Return to Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    tagKeywordPrimary::tag
    reference::OtherKeyWords
    reference::kkeywordOther
    reference::kkeywordPrimary
    testlearn::kKeywordPrimary
    testlearn::kcKeywordOther
    testlearn::OtherKeyWords

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuRefAddKeyWords]	Parent Folder: [tagMenu]	Next Script: [loadItemRecordForTestTagMenu]
Script Name	gotoMainFromTestTagMenus
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Select Window [ Name: "Test"; Current file ]
    Select Window [ Name: "Setup"; Current file ]
    Select Window [ Name: "Report"; Current file ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoMainFromTestTagMenus]	Parent Folder: [tagMenu]	Next Script: [addTagToTestSubject]
Script Name	loadItemRecordForTestTagMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuTest
    addTagToMainRecord
    loadCitation
    loadCitation OLD

Script Definition
Script Steps

    #
    #Capture recordID to conditionally format current record.
    If [ $$stopLoadTagRecord ≠ 1 ]
    Go to Field [ ]
    #
    #The 'test' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally format all
    #learn window records tagged with it.
    Set Variable [ $$tagtest; Value:test::_Ltest ]
    Set Field [ TEMP::kctest; test::_Ltest ]
    Set Variable [ $$SampleOrTestID; Value:Get (RecordID) ]
    #
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Window [ ]
    Move/Resize Window [ Current Window; Height: 3; Width: 3; Top: -1000; Left: -1000 ]
    Go to Layout [ “learn1” (testlearn) ]
    #Prepare system to stop error message about no
    #records being found as the user may not have
    #yet tagged any learn records with this test tag.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" ]
    Perform Find [ ]
    Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: testlearn::kctest: “=” ] [ Restore ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:1 ]
    Loop
    Exit Loop If [ (FilterValues ( Middle ( GetValue ( testlearn::kctest ; 1 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 2 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 3 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 4 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 5 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 6 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 7 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 8 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 9 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 10 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ ) = 1 ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $atLeastOneRecord; Value:If ( (FilterValues ( Middle ( GetValue ( testlearn::kctest ; 1 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 2 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 3 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 4 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 5 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 6 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 7 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 8 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 9 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kctest ; 10 ) ; 4 ; 42 ) ; $$tagtest & "¶" ) = $$tagtest & ¶ ) = 1 ; 1 ; "" ) ]
    Go to Layout [ original layout ]
    Close Window [ Current Window ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #This won't work without going through every
    #record on the main window to check if it is tagged
    #with this record, and that could take a really long
    #time.
    #So if there are no records tagged with this test item
    #then make sure the Main window is sorted by
    #date and not by test item sort order.
    If [ $atLeastOneRecord ≠ 1 ]
    #
    #The 'test' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally format all
    #learn window records tagged with it.
    Set Variable [ $$tagtest; Value:test::_Ltest ]
    #
    Select Window [ Name: "Learn"; Current file ]
    Refresh Window
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Set Field [ TEMP::TLTestSort; "" ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    Else If [ $atLeastOneRecord = 1 ]
    #
    #The 'test' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally format all
    #learn window records tagged with it.
    Set Variable [ $$tagtest; Value:test::_Ltest ]
    Set Field [ TEMP::kctest; test::_Ltest ]
    Set Variable [ $$SampleOrTestID; Value:Get (RecordID) ]
    If [ $$add = 1 and $$citationMatch = $$addCitationMatch ]
    Else If [ $$add = "" ]
    End If
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    // If [ TEMP::TLTestSort = "" ]
    Set Field [ TEMP::TLTestSort; "order" ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Select Window [ Name: "Learn"; Current file ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Set Variable [ $$tagtest; Value:test::_Ltest ]
    // End If
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If
    #
    #Unlike exit script, halt scripts will halt all scripts
    #currently active. So if user was on another tag
    #record and then clicked on the add tag button
    #to for another record, this script will launch.
    #Problem is, because the user may want to really
    #want to add this tag to the current item in the
    #Learn window, after this script runs and finds
    #zero records for example (which could happen)
    #the add to tag script will run right after it, but
    #it will fail to sort the records in the Learn window
    #by order number, which this script
    #(loadITemRecrodForTestTagMenu) is supposed
    #do everytime. The problem is a record for this
    #tag record will exist after the addtotag script has
    #run, but this script will not know that having run
    #first. So the user will be left wondering, "how is
    #that everytime I click on a new test or sample tag
    #record that has record tagged with it in the Learn
    #window, the Learn window is sorted by order number
    #except for this time? How did this fail to happen?"
    #Well, it failed for the reason given above and
    #the sollution below is to use the 'Halt Script"
    #command, which will force the user to click
    #the add to tag button a second time to add the
    #tag (the first time being when the user clicked
    #it to move the system focus to this record, which
    #triggered this loadItem... scirpt.
    Halt Script
    End If

Fields used in this script

    test::_Ltest
    TEMP::kctest
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kctest
    testlearn::date
    testlearn::timestamp
    TEMP::TLTestSort

Scripts used in this script

    sortTLRecordsByOrderNumber

Layouts used in this script

    learn1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadItemRecordForTestTagMenu]	Parent Folder: [tagMenu]	Next Script: [loadItemRecordForTestSetupTagMenu]
Script Name	addTagToTestSubject
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Get key for tag that is to be added to record.
    If [ Get (LayoutName) ≠ "defaultLocation" ]
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    Else If [ Get (LayoutName) = "defaultLocation" ]
    Set Variable [ $tag; Value:tagTestSubjectLocation::knode ]
    End If
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Conditionally format selected tag.
    If [ Get (LayoutName) ≠ "defaultLocation" ]
    Set Variable [ $$testSubject; Value:tagMenus::_Ltag ]
    Else If [ Get (LayoutName) = "defaultLocation" ]
    Set Variable [ $$testSubject; Value:tagTestSubjectLocation::knode ]
    End If
    #
    #Select reference, learn, or setup window.
    Select Window [ Name: "Setup"; Current file ]
    #
    #If test subject node is in use, then remove it.
    If [ tempSetup::kdefaultNodeTestSubject = $tag ]
    Set Field [ tempSetup::kdefaultNodeTestSubject; "" ]
    #
    #Finish removing the key.
    Set Variable [ $$testSubject ]
    #
    #If primary node is not in use add it.
    Else If [ tempSetup::kdefaultNodeTestSubject ≠ $tag ]
    Set Field [ tempSetup::kdefaultNodeTestSubject; $tag ]
    Set Variable [ $$testSubject; Value:tempSetup::kdefaultNodeTestSubject ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    tagMenus::_Ltag
    tagTestSubjectLocation::knode
    tempSetup::kdefaultNodeTestSubject

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addTagToTestSubject]	Parent Folder: [tagMenu]	Next Script: [defaultTestLocationMenu]
Script Name	loadItemRecordForTestSetupTagMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$ID = test::_Ltest or $$ID = "ignore" ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    Set Variable [ $item; Value:test::testName ]
    Set Field [ TEMP::ktest; test::_Ltest ]
    Set Field [ TEMP::testName; test::testName ]
    Set Field [ TEMP::ksection; test::ksection ]

Fields used in this script

    test::_Ltest
    test::testName
    TEMP::ktest
    TEMP::testName
    test::ksection
    TEMP::ksection

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadItemRecordForTestSetupTagMenu]	Parent Folder: [tagMenu]	Next Script: [setOrderForSampleOrTest]
Script Name	defaultTestLocationMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    returnToStep2
    printThingReport

Script Definition
Script Steps

    #
    If [ tempSetup::kdefaultNodePrimary = "" ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible for creating new records) by clicking the node button."; Buttons: “OK” ]
    Halt Script
    Else If [ tempSetup::kdefaultHealth = "" ]
    Show Custom Dialog [ Message: "Select the default copyright for any new records that you create by clicking the copyright button (you can always change your mind)."; Buttons: “OK” ]
    Halt Script
    End If
    #
    #A section must be selected before locations
    #can be assigned.
    If [ TEMP::ksection = "" ]
    Perform Script [ “defaultSectionMenu” ]
    Show Custom Dialog [ Message: "You must select a section prior to clicking the 'test' button. All tests belong to specific sections. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Make sure creator node's group is part of section group.
    Perform Script [ “addBackSectionCreatorNode” ]
    // #
    // #A test subject must be selected before locations
    // #be assigned.
    // If [ tempSetup::kdefaultNodeTestSubject = "" ]
    // Show Custom Dialog [ Message: "Select a test subject."; Buttons: “OK” ]
    // Perform Script [ “defaultNodeMenu” ]
    // Exit Script [ ]
    // End If
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"location" ]
    #
    #Locations are shown are the general locations
    #for a test. This menu will be used to create
    #specific locations for a specific test subject.
    #So in the Setup window the system highlights
    #the test subject for whom the locations are going
    #to be created.
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$citationitem ]
    Set Variable [ $$testSubject; Value:tempSetup::kdefaultNodeTestSubject ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Find all test location records.
    Go to Layout [ “defaultTest” (tagTestSubjectLocation) ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    // Set Field [ tagTestSubjectLocation::knode; TEMP::kdefaultNodeTestSubject ]
    Set Field [ tagTestSubjectLocation::ksection; TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort
    Sort Records [ Specified Sort Order: tagTestSubject::tag; ascending tagTestSubjectLocation::reportNumber; ascending tagTestSubjectLocation::order; based on value list: “order” tagTestSubjectLocation::focusName; ascending ] [ Restore; No dialog ]
    #
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Clear current temp field of location names in
    #case user has selected a section different from
    #the one previous, and thus with name that might
    #not match those in these temp fields.
    Set Field [ TEMP::LocationName; "" ]
    Set Field [ TEMP::modifier1name; "" ]
    Set Field [ TEMP::modifier2name; "" ]
    Set Field [ TEMP::kfocus; "" ]
    Set Field [ TEMP::kmodifier1; "" ]
    Set Field [ TEMP::kmodifier2; "" ]
    Set Field [ TEMP::orderLocation; "" ]
    Set Field [ TEMP::orderMod1; "" ]
    Set Field [ TEMP::orderMod2; "" ]
    #
    #Set reportnumber to a default of 1.
    Set Field [ TEMP::reportNumber; 1 ]
    #
    #Set temp keys to unlock pulldown lists for
    #section locations.
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::ksection; TEMP::ksection ]
    Set Field [ groupTest::match; "location" ]
    Perform Find [ ]
    Set Field [ TEMP::locationSection; groupTest::_Lgroup ]
    #
    #Set temp keys to unlock pulldown lists for
    #section attributes.
    Enter Find Mode [ ]
    Set Field [ groupTest::ksection; TEMP::ksection ]
    Set Field [ groupTest::match; "attribute" ]
    Perform Find [ ]
    Set Field [ TEMP::pulldownAttribute; groupTest::_Lgroup ]
    #
    #Return to tag menu layout.
    Go to Layout [ “defaultTest” (tagTestSubjectLocation) ]

Fields used in this script

    tempSetup::kdefaultNodePrimary
    tempSetup::kdefaultHealth
    TEMP::ksection
    tempSetup::kdefaultNodeTestSubject
    TEMP::kdefaultNodeTestSubject
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    tagTestSubject::tag
    tagTestSubjectLocation::reportNumber
    tagTestSubjectLocation::order
    tagTestSubjectLocation::focusName
    TEMP::LocationName
    TEMP::modifier1name
    TEMP::modifier2name
    TEMP::kfocus
    TEMP::kmodifier1
    TEMP::kmodifier2
    TEMP::orderLocation
    TEMP::orderMod1
    TEMP::orderMod2
    TEMP::reportNumber
    groupTest::ksection
    groupTest::match
    groupTest::_Lgroup
    TEMP::locationSection
    TEMP::pulldownAttribute

Scripts used in this script

    defaultSectionMenu
    addBackSectionCreatorNode
    defaultNodeMenu

Layouts used in this script

    defaultTest
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [defaultTestLocationMenu]	Parent Folder: [tagMenu]	Next Script: [testAddTestItemTextOrKey]
Script Name	setOrderForSampleOrTest
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Get order number user has selected then exit
    #the order field.
    Go to Field [ ]
    Set Variable [ $order; Value:testlearn::orderTest ]
    #
    #If record is not part of a sample or test exit script.
    If [ $$citationMatch = "sample" and testlearn::kcsample = "" ]
    Set Field [ testlearn::orderTest; "" ]
    Show Custom Dialog [ Message: "You can apply an order number to this record when you make it part of a sample by clicking any square button in Tag Menus window next to a sample tag."; Buttons: “OK” ]
    Exit Script [ ]
    Else If [ $$citationMatch = "test" and testlearn::kctest = "" ]
    Set Field [ testlearn::orderTest; "" ]
    Show Custom Dialog [ Message: "You can apply an order number to this record when you make it part of a test by clicking any square button in Tag Menus window next to a test tag."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #The order number is the left three digits of a
    #sample or test record lock number. ( Remember
    #each record in the database has lock number or
    #ID number. To open the lock and see any record's
    #contents requires a key number that fits the lock.
    #So if a lock number is 123, then the key that will
    #fit this lock is 123 too. ) Because the sample
    #and test key fields (think of key chains) may
    #have several keys, because any one learn record
    #may be part of more than one sample or test.
    #the system must check each learn record's keys
    #one at a time to see if any fit the current sample
    #or test's lock. So beginning with number one
    #the system checks each key. The left most 3 numbers
    #are order numbers so below you will note that
    #they system starts the check on the 4th number
    #from the left.
    Set Variable [ $number; Value:1 ]
    If [ $$citationMatch = "sample" ]
    Loop
    If [ Middle ( GetValue ( testlearn::kcsample ; $number ) ; 4 ; 42 ) & "¶" = $$tagSample & ¶ ]
    Set Variable [ $replacementValue; Value:Replace ( GetValue ( testlearn::kcsample ; $number ) ; 1 ; 3 ; $order ) ]
    #
    #When and if a key is found that fits the current
    #sample or test record's lock, the order number
    #the user has selected overwrites the left most
    #3 digits which by default are 999.
    Set Field [ testlearn::kcsample; Substitute ( $$sample ; GetValue ( testlearn::kcsample ; $number ) & "¶" ; $replacementValue & ¶) ]
    #
    #The 'sample' variable is resset to reflect this change
    Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Variable [ $$citationItem ]
    #
    #The 'number' variable is made blank to trigger
    #the exit from this loop, the key having been found.
    Set Variable [ $number ]
    End If
    Exit Loop If [ $number = "" ]
    #
    #Exit the script if the current record is not part
    #of the selected sample or test after checking
    #all of its keys.
    If [ GetValue ( testlearn::kcsample ; $number ) = "" ]
    Set Field [ testlearn::orderTest; "" ]
    Show Custom Dialog [ Message: "You can apply an order number to this record when you make it part of the selected sample by clicking the square button in Tag Menus window next to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Add 1 to the 'number' varaible after each key
    #in the key field is checked, to direct the system
    #to check the next key.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    #
    Else If [ $$citationMatch = "test" ]
    Loop
    If [ Middle ( GetValue ( testlearn::kctest ; $number ) ; 4 ; 42 ) & "¶" = $$tagtest & ¶ ]
    Set Variable [ $replacementValue; Value:Replace ( GetValue ( testlearn::kctest ; $number ) ; 1 ; 3 ; $order ) ]
    #
    #When and if a key is found that fits the current
    #sample or test record's lock, the order number
    #the user has selected overwrites the left most
    #3 digits which by default are 999.
    Set Field [ testlearn::kctest; Substitute ( $$test ; GetValue ( testlearn::kctest ; $number ) & "¶" ; $replacementValue & ¶) ]
    #
    #The 'test' variable is resset to reflect this change
    Set Variable [ $$test; Value:testlearn::kctest ]
    Set Variable [ $$citationItem ]
    #
    #The 'number' variable is made blank to trigger
    #the exit from this loop, the key having been found.
    Set Variable [ $number ]
    End If
    Exit Loop If [ $number = "" ]
    #
    #Exit the script if the current record is not part
    #of the selected sample or test after checking
    #all of its keys.
    If [ GetValue ( testlearn::kctest ; $number ) = "" ]
    Set Field [ testlearn::orderTest; "" ]
    Show Custom Dialog [ Message: "You can apply an order number to this record when you make it part of the selected test by clicking the square button in Tag Menus window next to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Add 1 to the 'number' varaible after each key
    #in the key field is checked, to direct the system
    #to check the next key.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    End If
    Sort Records [ ] [ No dialog ]

Fields used in this script

    testlearn::orderTest
    testlearn::kcsample
    testlearn::kctest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [setOrderForSampleOrTest]	Parent Folder: [tagMenu]	Next Script: [moveTagToNewGroupStep1]
Script Name	testAddTestItemTextOrKey
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #If text is selected then the user wants to add
    #the text of the test item to the caption field.
    If [ TEMP::textORcheck = "text" ]
    Set Variable [ $tag; Value:tagMenus::tag ]
    #
    Select Window [ Name: "Test"; Current file ]
    Set Variable [ $caption; Value:testlearn::Caption ]
    Set Field [ testlearn::Caption; $caption & ¶ & $tag ]
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    Exit Script [ ]
    End If
    #
    #If check is selected then the user wants to add
    #the key of the test item to the discovery record's
    #keychain.
    #
    #Get key for tag that is to be added to record.
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    #
    #If test item is in use, then remove it.
    Select Window [ Name: "Test"; Current file ]
    Set Variable [ $number; Value:1 ]
    Loop
    If [ FilterValues ( GetValue ( testlearn::kctestItem ; $number ) ; $tag & "¶" ) = $tag & ¶ ]
    Set Field [ testlearn::kctestItem; Substitute ( $$testItem ; GetValue ( testlearn::kctestItem ; $number ) & "¶" ; "" ) ]
    Set Variable [ $$testItem; Value:testlearn::kctestItem ]
    Set Variable [ $number; Value:"exit" ]
    #
    #Remove one item from inuse items for this group.
    #This is essential for the unlink script on the test setup
    #module. A group that has items in use cannot be
    #unlinked until all inuse items are unlinked.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $inUseNumberOfTimes; Value:ruleTagMenuGroups::CaptionORinuseCheck ]
    Set Field [ ruleTagMenuGroups::CaptionORinuseCheck; If ( $inUseNumberOfTimes - 1 = 0 ; "" ; $inUseNumberOfTimes - 1 ) ]
    End If
    #
    #If number was set to exit or if no keys exist, then
    #exit loop.
    Exit Loop If [ GetValue ( testlearn::kctestItem ; $number ) = "" ]
    #
    #Not sure how this could happen, but leaving it in and
    #wishing I had made a comment when I added it.
    Exit Loop If [ $number = "" ]
    #
    #If variable looked at did not match then raise the number
    #to view the next variable.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    #
    If [ $number ≠ "exit" ]
    #
    #Start by looking at the first variable on the keychain.
    Set Variable [ $number; Value:1 ]
    Loop
    #If test item is not in use add it.
    If [ FilterValues ( GetValue ( testlearn::kctestItem ; $number ) ; $tag & "¶" ) ≠ $tag & ¶ ]
    Set Field [ testlearn::kctestItem; $tag & ¶ & $$testItem ]
    Set Variable [ $$testItem; Value:testlearn::kctestItem ]
    Set Variable [ $number ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    #
    #
    #Add one item from inuse items for this group.
    #This is essential for the unlink script on the test setup
    #module. A group that has items in use cannot be
    #unlinked until all inuse items are unlinked.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $inUseNumberOfTimes; Value:ruleTagMenuGroups::CaptionORinuseCheck ]
    Set Field [ ruleTagMenuGroups::CaptionORinuseCheck; $inUseNumberOfTimes + 1 ]
    End If
    #
    #If number was set to exit or if no keys exist, then
    #exit loop.
    Exit Loop If [ FilterValues ( GetValue ( testlearn::kctestItem ; $number ) ; $tag & "¶" ) = "" ]
    #
    #Not sure how this could happen, but leaving it in and
    #wishing I had made a comment when I added it.
    Exit Loop If [ $number = "" ]
    #
    #If variable looked at did not match then raise the number
    #to view the next variable.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    End If
    // Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    Go to Field [ ]

Fields used in this script

    TEMP::textORcheck
    tagMenus::tag
    testlearn::Caption
    tagMenus::_Ltag
    testlearn::kctestItem
    ruleTagMenuGroups::CaptionORinuseCheck

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [testAddTestItemTextOrKey]	Parent Folder: [tagMenu]	Next Script: [moveTagToNewGroupStep1b ]
Script Name	moveTagToNewGroupStep1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ nodeLockTagMenus::orderOrLock ≠ "" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTagMenus::tag & " -- in the setup tag window and enter the password to unlock it so that you can move it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ tagMenus::orderOrLock = "lock" ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    If [ ValueCount ( ruleTagMenuGroups::ksection ) > 1 ]
    #
    #If group user is moving tag from is in more than
    #one section of the database, then stop the move.
    #The problem is that if this tag is in use, and the
    #user moves it to a section that does not exist
    #in one of the sections using it, then in that section
    #the user will not be able to find by this tag or
    #or remove it. The remedy would be to add
    #the group being moved to to all the sections using
    #the tag. I leaving this remedy for another day.
    Go to Field [ ]
    Show Custom Dialog [ Title: "!"; Message: tagMenus::tag & " cannot be moved because its group belongs to more than one section. Tags can be moved as long as the groups they are being moved from belong to only one section."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $$groupOLD; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $$moveItem; Value:tagMenus::_Ltag ]
    Refresh Window

Fields used in this script

    nodeLockTagMenus::orderOrLock
    nodeLockTagMenus::tag
    tagMenus::orderOrLock
    ruleTagMenuGroups::ksection
    tagMenus::tag
    tagMenus::kGroupOrTest
    tagMenus::_Ltag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [moveTagToNewGroupStep1]	Parent Folder: [tagMenu]	Next Script: [moveTagToNewGroupStep2]
Script Name	moveTagToNewGroupStep1b
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$groupOLD ]
    Set Variable [ $$moveItem ]
    Refresh Window

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [moveTagToNewGroupStep1b ]	Parent Folder: [tagMenu]	Next Script: [defaultNodeMenu]
Script Name	moveTagToNewGroupStep2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    // If [ ValueCount ( ruleTagMenuGroups::ksection ) > 1 ]
    // Exit Script [ ]
    // End If
    #
    #Stop test record load script to speed up script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Get the newly selected group's ID number.
    Set Variable [ $newGroup; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $$moveItem; Value:tagMenus::_Ltag ]
    Refresh Window
    Sort Records [ ] [ No dialog ]
    #
    If [ ValueCount ( ruleTagMenuGroups::ksection ) > 1 ]
    #
    #If group user is moving tag onto is in more than
    #one section of the database, then warn user that
    #if the go ahead with the move, they will be unable
    #to reverse their decision after moving.
    Go to Field [ ]
    Show Custom Dialog [ Title: "!"; Message: "WARNING: Once the " & tagMenus::tag & " move is finished it cannot be undone. The group it is being moved to is in more than one section of this database. Tags cannot be moved out of these types of groups. So are you really sure about this move?"; Buttons: “undo move”, “I am sure!” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    #
    #Reset the tag's group ID with its old group ID
    #number grabbed by the system in part 1 of
    #this script.
    Set Field [ tagMenus::kGroupOrTest; $$groupOLD ]
    Set Variable [ $$moveItem ]
    Set Variable [ $$groupOLD ]
    Refresh Window
    Go to Field [ ]
    #
    #Turn back on the loadrecord script. The current
    #record's info does not need to be reloaded of course
    #because it is still the current record.
    Set Variable [ $$stopLoadTagRecord ]
    Halt Script
    End If
    End If
    #
    #Reset the tag's group ID with its old group ID
    #number grabbed by the system in part 1 of
    #this script, just in case the user decides to cancel
    #move and the test needs to stay put.
    Set Field [ tagMenus::kGroupOrTest; $$groupOLD ]
    Sort Records [ ] [ No dialog ]
    Go to Field [ ]
    #
    #Check if this is the last test in the test group.
    New Window [ ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::kGroupOrTest; $$groupOLD ]
    Perform Find [ ]
    If [ Get (FoundCount) = 1 ]
    Close Window [ Current Window ]
    Set Variable [ $group; Value:$$groupOLD ]
    Refresh Window
    #
    #If it is the last item inform user that after the move
    #the old group will be deleted unless the user
    #creates a new item for this group before moving
    #the old item.
    Show Custom Dialog [ Title: "!"; Message: "After " & tagMenus::tag & " is moved its old group will be deleted. If you want to keep this group then create a new tag for the old group before the last tag out of it."; Buttons: “Cancel”, “move” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $newGroup ]
    Set Variable [ $$groupOLD ]
    Set Variable [ $$moveItem ]
    Refresh Window
    #
    #Turn back on the loadrecord script. The current
    #record's info does not need to be reloaded of course
    #because it is still the current record.
    Set Variable [ $$stopLoadTagRecord ]
    Halt Script
    End If
    #
    #If the user decides to go ahead with the move,
    #first delete the old group.
    New Window [ ]
    #
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $$groupOLD ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    #
    End If
    #
    #Close window opened to perform find, and then
    #set group ID of test with the new groups ID number.
    Close Window [ Current Window ]
    Set Field [ tagMenus::kGroupOrTest; $newGroup ]
    Set Variable [ $$groupOLD ]
    Set Variable [ $$moveItem ]
    Set Variable [ $category ]
    Refresh Window
    Go to Field [ ]
    #
    #Turn back on the loadrecord script. The current
    #record's info does not need to be reloaded of course
    #because it is still the current record.
    Set Variable [ $$stopLoadTagRecord ]
    #
    Halt Script
    #

Fields used in this script

    ruleTagMenuGroups::ksection
    tagMenus::kGroupOrTest
    tagMenus::_Ltag
    tagMenus::tag
    tagTable::kGroupOrTest
    groupTest::_Lgroup

Scripts used in this script

Layouts used in this script

    tableTag
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [moveTagToNewGroupStep2]	Parent Folder: [tagMenu]	Next Script: [defaultHealthMenu]
Script Name	defaultNodeMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    startDatabase
    update
    createEmptyLibrary
    defaultTestLocationMenu
    addLinksPicturesToTagsMode

Script Definition
Script Steps

    #
    #A section must be selected before nodes
    #can be assigned.
    If [ TEMP::ksection = "" ]
    Perform Script [ “defaultSectionMenu” ]
    Show Custom Dialog [ Message: "All nodes are assigned to a library. You need to go the backup layout in admin mode and type in the words New Library, and then restart this database."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Make sure creator node's group is part of section group.
    Perform Script [ “addBackSectionCreatorNode” ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"node" ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$citationitem; Value:tempSetup::kdefaultNodePrimary ]
    Set Variable [ $$testSubject; Value:tempSetup::kdefaultNodeTestSubject ]
    Set Variable [ $$node; Value:tempSetup::kdefaultNodeOther ]
    Set Field [ TEMP::mTag; "node" ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Find all node records.
    If [ tempSetup::DefaultmoreORLessLayoutNode = "" ]
    Go to Layout [ “defaultNode1” (tagMenus) ]
    Set Field [ TEMP::DefaultmoreORLessLayoutNode; "more" & Get (LayoutName) ]
    Else If [ tempSetup::DefaultmoreORLessLayoutNode ≠ "" ]
    Go to Layout [ Middle ( TEMP::DefaultmoreORLessLayoutNode ; 5 ; 42 ) ]
    End If
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortNode = "cat" or TEMP::sortNode = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Set Field [ TEMP::sortNode; "cat" ]
    Else If [ TEMP::sortNode = "abc" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$citationitem = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$citationitem ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    #
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    #

Fields used in this script

    TEMP::ksection
    tempSetup::kdefaultNodePrimary
    tempSetup::kdefaultNodeTestSubject
    tempSetup::kdefaultNodeOther
    TEMP::mTag
    tempSetup::DefaultmoreORLessLayoutNode
    TEMP::DefaultmoreORLessLayoutNode
    tagMenus::match
    ruleTagMenuGroups::ksection
    TEMP::sortNode
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    ruleTagSectionName::name
    tagMenus::_Ltag

Scripts used in this script

    defaultSectionMenu
    addBackSectionCreatorNode

Layouts used in this script

    defaultNode1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [defaultNodeMenu]	Parent Folder: [tagMenu]	Next Script: [defaultSectionMenu]
Script Name	defaultHealthMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ tempSetup::kdefaultNodePrimary = "" ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible for creating new records) by clicking the node button."; Buttons: “OK” ]
    Halt Script
    End If
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"health" ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$citationitem; Value:tempSetup::kdefaultHealth ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Find all node records.
    Go to Layout [ “defaultHealth” (tagMenus) ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #Upate language for locked health tags.
    Perform Script [ “CHUNKHealthLockedFields” ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortHealth = "cat" or TEMP::sortHealth = "" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortHealth = "abc" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$citationitem = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$citationitem ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    #
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    #

Fields used in this script

    tempSetup::kdefaultNodePrimary
    tempSetup::kdefaultHealth
    tagMenus::match
    TEMP::sortHealth
    ruleTagSectionName::name
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagMenus::_Ltag

Scripts used in this script

    CHUNKHealthLockedFields

Layouts used in this script

    defaultHealth

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [defaultHealthMenu]	Parent Folder: [tagMenu]	Next Script: [checkIfLockedOnLearnTagMenus]
Script Name	defaultSectionMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    startDatabase
    deleteSection
    returnToSetup
    defaultTestLocationMenu
    defaultNodeMenu
    backToLearnOrDefaultSetup

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"section" ]
    Set Variable [ $$stopAddTagToCitation; Value:1 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$citationitem; Value:TEMP::ksection ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “defaultSections” (ruleSection) ]
    #
    #
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ ruleSection::match; "section" ]
    Perform Find [ ]
    #
    Sort Records [ Specified Sort Order: ruleSection::name; ascending ] [ Restore; No dialog ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ TEMP::ksection = ruleSection::ksection ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ TEMP::ksection ≠ ruleSection::ksection ]
    Go to Record/Request/Page [ First ]
    End If
    #
    Set Variable [ $$stopAddTagToCitation ]

Fields used in this script

    TEMP::ksection
    ruleSection::match
    ruleSection::name
    ruleSection::ksection

Scripts used in this script

Layouts used in this script

    defaultSections

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [defaultSectionMenu]	Parent Folder: [tagMenu]	Next Script: [menuReferenceNodesOrEditors]
Script Name	checkIfLockedOnLearnTagMenus
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    loadTagRecord

Script Definition
Script Steps

    #
    If [ $$citationMatch = "key" //or $$citationMatch = "node" or $$citationMatch = "health" or $$citationMatch = "medium" or $$citationMatch = "path" ]
    Exit Script [ ]
    End If
    #Used on learn tag menus to keep user out of any
    #locked fields.
    If [ nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" ]
    Set Field [ tagMenus::tag; tagMenus::tagSpelling ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTagMenus::tag & " -- and enter the password to unlock it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ nodeLockTagGroup::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "name" ]
    // Set Variable [ $$stopChangeSpellingOfTagCategory; Value:1 ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "This group name is locked. Go the node that created it -- " & nodeLockTestTagGroup::tag & " -- and enter the password to unlock it."; Buttons: “OK” ]
    Exit Script [ ]
    End If

Fields used in this script

    nodeLockTagMenus::orderOrLock
    tagMenus::tagSpelling
    tagMenus::tag
    nodeLockTagMenus::tag
    nodeLockTagGroup::orderOrLock
    ruleTagMenuGroups::nameSpelling
    ruleTagMenuGroups::name
    nodeLockTestTagGroup::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [checkIfLockedOnLearnTagMenus]	Parent Folder: [tagMenu]	Next Script: [loadItemRecordForSampleTagMenu]
Script Name	menuReferenceNodesOrEditors
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationLock to color menu button with inUse color.
    If [ Get ( ActiveFieldName ) = "referenceNodes" ]
    Set Variable [ $$citationMatch; Value:"referenceNodes" ]
    Else If [ Get ( ActiveFieldName ) = "compilationEditors" ]
    Set Variable [ $$citationMatch; Value:"editors" ]
    Else If [ Get ( ActiveFieldName ) = "governmentAuthor" ]
    Set Variable [ $$citationMatch; Value:"governmentAuthor" ]
    End If
    #
    Refresh Window
    Perform Script [ “clearCitationMatch” ]

Fields used in this script

Scripts used in this script

    clearCitationMatch

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuReferenceNodesOrEditors]	Parent Folder: [tagMenu]	Next Script: [toggleTagMenuWindowView]
Script Name	loadItemRecordForSampleTagMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuSample
    newCitationMenuGroup
    duplicateTheory

Script Definition
Script Steps

    #
    #Capture recordID to conditionally format current record.
    If [ $$stopLoadTagRecord ≠ 1 ]
    Go to Field [ ]
    #
    #The 'sample' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally format all
    #learn window records tagged with it.
    Set Variable [ $$tagsample; Value:tagMenus::_Ltag ]
    Set Field [ TEMP::kcsample; tagMenus::_Ltag ]
    Set Variable [ $$SampleOrTestID; Value:Get (RecordID) ]
    #
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Window [ ]
    Move/Resize Window [ Current Window; Height: 3; Width: 3; Top: -1000; Left: -1000 ]
    Go to Layout [ “learn1” (testlearn) ]
    #Prepare system to stop error message about no
    #records being found as the user may not have
    #yet tagged any learn records with this test tag.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" ]
    Perform Find [ ]
    Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: testlearn::kcsample: “=” ] [ Restore ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $number; Value:1 ]
    Loop
    Exit Loop If [ (FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 1 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 2 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 3 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 4 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 5 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 6 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 7 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 8 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 9 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 10 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ ) = 1 ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $atLeastOneRecord; Value:If ( (FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 1 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 2 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 3 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 4 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 5 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 6 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 7 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 8 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 9 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ or FilterValues ( Middle ( GetValue ( testlearn::kcsample ; 10 ) ; 4 ; 42 ) ; $$tagsample & "¶" ) = $$tagsample & ¶ ) = 1 ; 1 ; "" ) ]
    Go to Layout [ original layout ]
    Close Window [ Current Window ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #This won't work without going through every
    #record on the main window to check if it is tagged
    #with this record, and that could take a really long
    #time.
    #So if there are no records tagged with this test item
    #then make sure the Main window is sorted by
    #date and not by test item sort order.
    If [ $atLeastOneRecord ≠ 1 ]
    #
    #The 'sample' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally format all
    #learn window records tagged with it.
    Set Variable [ $$tagsample; Value:tagMenus::_Ltag ]
    #
    Select Window [ Name: "Learn"; Current file ]
    Refresh Window
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Set Field [ TEMP::TLSampleSort; "" ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    Else If [ $atLeastOneRecord = 1 ]
    #
    #The 'sample' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally format all
    #learn window records tagged with it.
    Set Variable [ $$tagsample; Value:tagMenus::_Ltag ]
    Set Field [ TEMP::kcsample; tagMenus::_Ltag ]
    Set Variable [ $$SampleOrTestID; Value:Get (RecordID) ]
    If [ $$add = 1 and $$citationMatch = $$addCitationMatch ]
    Else If [ $$add = "" ]
    End If
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    // If [ TEMP::TLTestSort = "" ]
    Set Field [ TEMP::TLSampleSort; "order" ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Select Window [ Name: "Learn"; Current file ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Set Variable [ $$tagsample; Value:tagMenus::_Ltag ]
    // End If
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If
    #
    #Unlike exit script, halt scripts will halt all scripts
    #currently active. So if user was on another tag
    #record and then clicked on the add tag button
    #to for another record, this script will launch.
    #Problem is, because the user may want to really
    #want to add this tag to the current item in the
    #Learn window, after this script runs and finds
    #zero records for example (which could happen)
    #the add to tag script will run right after it, but
    #it will fail to sort the records in the Learn window
    #by order number, which this script
    #(loadITemRecrodForTestTagMenu) is supposed
    #do everytime. The problem is a record for this
    #tag record will exist after the addtotag script has
    #run, but this script will not know that having run
    #first. So the user will be left wondering, "how is
    #that everytime I click on a new test or sample tag
    #record that has record tagged with it in the Learn
    #window, the Learn window is sorted by order number
    #except for this time? How did this fail to happen?"
    #Well, it failed for the reason given above and
    #the sollution below is to use the 'Halt Script"
    #command, which will force the user to click
    #the add to tag button a second time to add the
    #tag (the first time being when the user clicked
    #it to move the system focus to this record, which
    #triggered this loadItem... scirpt.
    Halt Script
    End If

Fields used in this script

    tagMenus::_Ltag
    TEMP::kcsample
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kcsample
    testlearn::date
    testlearn::timestamp
    TEMP::TLSampleSort
    TEMP::TLTestSort

Scripts used in this script

    sortTLRecordsByOrderNumber

Layouts used in this script

    learn1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadItemRecordForSampleTagMenu]	Parent Folder: [tagMenu]	Next Script: [TgotoCitationMenu]
Script Name	toggleTagMenuWindowView
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Reveal more or fewer pictures and links for tag.
    #
    #First toggle from current view to next view.
    If [ Left (Get (LayoutName) ; 1) = "l" and $$citationMatch = "key" ]
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutLtagK ; 4 ) = "more" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs2” (tagMenus) ]
    End If
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagK ; 4 ) = "more" ]
    Go to Layout [ “ltagNK3” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs3” (tagMenus) ]
    End If
    #from 3 to 4
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagK ; 4 ) = "more" ]
    Go to Layout [ “ltagNK4” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs4” (tagMenus) ]
    End If
    #from 4 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 4 and Left ( TEMP::layoutLtagK ; 4 ) = "less" ]
    Go to Layout [ “ltagNK3” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs3” (tagMenus) ]
    End If
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagK ; 4 ) = "less" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs2” (tagMenus) ]
    End If
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagK ; 4 ) = "less" ]
    Go to Layout [ “ltagNK1” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs1” (tagMenus) ]
    End If
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "l" and $$citationMatch = "node" ]
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutLtagN ; 4 ) = "more" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs2” (tagMenus) ]
    End If
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagN ; 4 ) = "more" ]
    Go to Layout [ “ltagNK3” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs3” (tagMenus) ]
    End If
    #from 3 to 4
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagN ; 4 ) = "more" ]
    Go to Layout [ “ltagNK4” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs4” (tagMenus) ]
    End If
    #from 4 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 4 and Left ( TEMP::layoutLtagN ; 4 ) = "less" ]
    Go to Layout [ “ltagNK3” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs3” (tagMenus) ]
    End If
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagN ; 4 ) = "less" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs2” (tagMenus) ]
    End If
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagN ; 4 ) = "less" ]
    Go to Layout [ “ltagNK1” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ltagNKs1” (tagMenus) ]
    End If
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "r" and $$citationMatch = "key" ]
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutRtagK ; 4 ) = "more" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNode2” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNode2” (tagMenus) ]
    End If
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagK ; 4 ) = "more" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode3” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNode3” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNode3” (tagMenus) ]
    End If
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutRtagK ; 4 ) = "less" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNode2” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNode2” (tagMenus) ]
    End If
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagK ; 4 ) = "less" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNode1” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    End If
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "r" and $$citationMatch = "node" ]
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutRtagN ; 4 ) = "more" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode2” (tagMenus) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagN ; 4 ) = "more" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode3” (tagMenus) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutRtagN ; 4 ) = "less" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode2” (tagMenus) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagN ; 4 ) = "less" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "d" ]
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "more" ]
    Go to Layout [ “defaultNode2” (tagMenus) ]
    #from 2 to 3
    Else If [ Left (Get (LayoutName) ; 1) = "d" and Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "more" ]
    Go to Layout [ “defaultNode3” (tagMenus) ]
    #from 3 to 2
    Else If [ Left (Get (LayoutName) ; 1) = "d" and Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "less" ]
    Go to Layout [ “defaultNode2” (tagMenus) ]
    #from 2 to 1
    Else If [ Left (Get (LayoutName) ; 1) = "d" and Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "less" ]
    Go to Layout [ “defaultNode1” (tagMenus) ]
    End If
    End If
    #
    #
    #
    #
    #Remember layout user is on so they can be
    #returned to correct view.
    If [ $$citationMatch = "node" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    #
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagN ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLtagN; "more" & Get (LayoutName) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagN ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLtagN; "more" & Get (LayoutName) ]
    #from 3 to 4
    Else If [ Right ( Get (LayoutName) ; 1) = 4 and Left ( TEMP::layoutLtagN ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLtagN; "less" & Get (LayoutName) ]
    #from 4 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagN ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLtagN; "less" & Get (LayoutName) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagN ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLtagN; "less" & Get (LayoutName) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutLtagN ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLtagN; "more" & Get (LayoutName) ]
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    #
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagN ; 4 ) = "more" ]
    Set Field [ TEMP::layoutRtagN; "more" & Get (LayoutName) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutRtagN ; 4 ) = "more" ]
    Set Field [ TEMP::layoutRtagN; "less" & Get (LayoutName) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagN ; 4 ) = "less" ]
    Set Field [ TEMP::layoutRtagN; "less" & Get (LayoutName) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutRtagN ; 4 ) = "less" ]
    Set Field [ TEMP::layoutRtagN; "more" & Get (LayoutName) ]
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "d" ]
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "more" ]
    Set Field [ TEMP::DefaultmoreORLessLayoutNode; "more" & Get (LayoutName) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "more" ]
    Set Field [ TEMP::DefaultmoreORLessLayoutNode; "less" & Get (LayoutName) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "less" ]
    Set Field [ TEMP::DefaultmoreORLessLayoutNode; "less" & Get (LayoutName) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::DefaultmoreORLessLayoutNode ; 4 ) = "less" ]
    Set Field [ TEMP::DefaultmoreORLessLayoutNode; "more" & Get (LayoutName) ]
    End If
    End If
    #
    #
    Else If [ $$citationMatch = "key" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    #
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagK ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLtagK; "more" & Get (LayoutName) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagK ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLtagK; "more" & Get (LayoutName) ]
    #from 3 to 4
    Else If [ Right ( Get (LayoutName) ; 1) = 4 and Left ( TEMP::layoutLtagK ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLtagK; "less" & Get (LayoutName) ]
    #from 4 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLtagK ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLtagK; "less" & Get (LayoutName) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLtagK ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLtagK; "less" & Get (LayoutName) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutLtagK ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLtagK; "more" & Get (LayoutName) ]
    End If
    #
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    #
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagK ; 4 ) = "more" ]
    Set Field [ TEMP::layoutRtagK; "more" & Get (LayoutName) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutRtagK ; 4 ) = "more" ]
    Set Field [ TEMP::layoutRtagK; "less" & Get (LayoutName) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutRtagK ; 4 ) = "less" ]
    Set Field [ TEMP::layoutRtagK; "less" & Get (LayoutName) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutRtagK ; 4 ) = "less" ]
    Set Field [ TEMP::layoutRtagK; "more" & Get (LayoutName) ]
    End If
    #
    End If
    End If

Fields used in this script

    TEMP::layoutLtagK
    TEMP::InventoryLibaryYN
    TEMP::layoutLtagN
    TEMP::layoutRtagK
    TEMP::layoutRtagN
    TEMP::DefaultmoreORLessLayoutNode

Scripts used in this script

Layouts used in this script

    ltagNK2
    ltagNKs2
    ltagNK3
    ltagNKs3
    ltagNK4
    ltagNKs4
    ltagNK1
    ltagNKs1
    ReferenceMenu2SkeywordOrNode2
    ReferenceMenu2keywordOrNode2
    ReferenceMenu2keywordOrNode3
    ReferenceMenu2SkeywordOrNode3
    ReferenceMenu2SkeywordOrNode1
    ReferenceMenu2keywordOrNode1
    defaultNode2
    defaultNode3
    defaultNode1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [toggleTagMenuWindowView]	Parent Folder: [tagMenu]	Next Script: [showTag]
Script Name	TgotoCitationMenu
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    loadCitation
    loadCitation OLD

Script Definition
Script Steps

    If [ Get ( ActiveFieldContents ) = "" ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    If [ $$add = 1 and Get ( ActiveFieldName ) = "kcitation" or $$add = 1 and Get ( ActiveFieldName ) = "kcReference" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    // If [ TEMP::ksection & "¶" ≠ FilterValues ( reference::kcsection ; TEMP::ksection & "¶" ) ]
    // Go to Field [ ]
    // Show Custom Dialog [ Message: "This reference belongs to the " & ruleRefLibraryName::name & " section." & " You can add pictures and links from any reference record to any tag, but you can only add tags to the current default section's records (name shown top left)."; Buttons: “OK” ]
    // Exit Script [ ]
    // End If
    If [ $$findMode ≠ "" ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    #Conditionally format selected item and button on menu screen.
    Set Variable [ $$citationItem; Value:Get (ActiveFieldContents) ]
    Set Variable [ $$citationMatch; Value:Get (ActiveFieldName) ]
    If [ $$citationMatch = "referenceShort" ]
    Set Variable [ $$citationMatch; Value:"kcitation" ]
    Set Variable [ $$citationItem; Value:refReference::_Lreference ]
    End If
    If [ Left (Get (ActiveFieldName); 4) = "kkey" or Get (ActiveFieldName) = "" ]
    Set Variable [ $$citationMatch; Value:"key" ]
    Else If [ Left (Get (ActiveFieldName); 5) = "knode" ]
    Set Variable [ $$citationMatch; Value:"node" ]
    End If
    Refresh Window
    #
    #Exit field so blinking cursor doesn't show up in empty field.
    Go to Field [ ]
    Set Variable [ $window; Value:Get (WindowName) ]
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 2 ]
    End If
    #
    #set citationMatch to color menu button with inUse color.
    If [ $window = "Learn" ]
    If [ $$citationMatch = "kfolderpath" ]
    Go to Layout [ “learnMenu1” (tagMenus) ]
    Perform Script [ “menuPath” ]
    Else If [ $$citationMatch = "kmedium" ]
    Set Variable [ $$medium; Value:reference::kmedium ]
    Go to Layout [ “learnMenu1” (tagMenus) ]
    Perform Script [ “menuMedium” ]
    Else If [ $$citationMatch = "khealth" ]
    Go to Layout [ “learnMenuHealth” (tagMenus) ]
    Perform Script [ “menuHealth” ]
    Else If [ $$citationMatch = "key" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Perform Script [ “menuKey” ]
    Else If [ $$citationMatch = "node" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Perform Script [ “menuNode” ]
    Else If [ $$citationMatch = "kcitation" ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenuRefStuff” (reference) ]
    Perform Script [ “externalReferences” ]
    Else
    Go to Layout [ “learnMenu3Cite” (reference) ]
    Perform Script [ “menuCitation” ]
    End If
    #
    #Go to citation record's current selection or to first record.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ FilterValues ( $$citationItem ; reference::_Lreference ) = reference::_Lreference & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ FilterValues ( $$citationItem ; reference::_Lreference ) ≠ reference::_Lreference & ¶ ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ First ]
    End If
    Set Variable [ $$citationMatch; Value:"ref" ]
    Refresh Window
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Select Window [ Name: "Learn"; Current file ]
    Refresh Window
    End If
    #
    #
    #
    #
    Else If [ $window = "References" or $window = "Setup" ]
    #
    #If in add mode, prevent menu scripts from changing
    #the main window's set of records.
    #Unlike learn records, reference records or created
    #for specific uses such as providing a picture
    #or link for a specific set of tags, say keyword tags.
    #So, in add mode, when clicking on a menu item
    #the system finds all the records in the main
    #reference window for that menu item. This
    #is not helpful when the user is trying to create
    #a new record to add to a tag. So this next script
    #step stops the records shown, including and most
    #importantly the record the user is working on
    #from disappearing when the system finds only
    #records assigned to that menu item. This then
    #allows the user to add tags to the item neccessary
    #to make it addable to the the tag menu item the
    #user is creating it for!
    If [ $$add = 1 ]
    Set Variable [ $$add; Value:2 ]
    End If
    #
    If [ $$citationMatch = "kfolderpath" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    Perform Script [ “menuPath” ]
    Else If [ $$citationMatch = "kmedium" ]
    Set Variable [ $$medium; Value:reference::kmedium ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    Perform Script [ “menuMedium” ]
    Else If [ $$citationMatch = "khealth" ]
    Go to Layout [ “ReferenceMenuHealth” (tagMenus) ]
    Perform Script [ “menuHealth” ]
    Else If [ $$citationMatch = "korgan" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    Perform Script [ “menuOrgan” ]
    Else If [ $$citationMatch = "kcopyist" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    Perform Script [ “menuCopyist” ]
    Else If [ $$citationMatch = "key" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Perform Script [ “menuKey” ]
    Else If [ $$citationMatch = "node" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Perform Script [ “menuNode” ]
    Else If [ $$citationMatch = "kcitation" ]
    Go to Layout [ “ReferenceMenu3Cite” (reference) ]
    Perform Script [ “menuRefAddKeyWords” ]
    End If
    End If
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If in add mode, allow menu scripts to once again
    #change main window records.
    If [ $$add = 2 ]
    Set Variable [ $$add; Value:1 ]
    End If

Fields used in this script

    TEMP::ksection
    reference::kcsection
    ruleRefLibraryName::name
    refReference::_Lreference
    reference::kmedium
    TEMP::InventoryLibaryYN
    reference::_Lreference

Scripts used in this script

    menuPath
    menuMedium
    menuHealth
    menuKey
    menuNode
    externalReferences
    menuCitation
    menuOrgan
    menuCopyist
    menuRefAddKeyWords

Layouts used in this script

    learnMenu1
    learnMenuHealth
    ltagNK2
    learnMenuRefStuff
    learnMenu3Cite
    ReferenceMenu1
    ReferenceMenuHealth
    ReferenceMenu2keywordOrNode1
    ReferenceMenu3Cite

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [TgotoCitationMenu]	Parent Folder: [tagMenu]	Next Script: [duplicateTheory]
Script Name	showTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Commit Records/Requests
    If [ TEMP::kfocus = "" ]
    Set Field [ TEMP::LocationName; "" ]
    Exit Script [ ]
    End If
    #
    #the pulldown menu action selects the id number,
    #but not the name. To put the name into the TEMP
    #global field we will need to find it which is what the
    #rest of the script does.
    Set Variable [ $tag; Value:TEMP::kfocus ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::_Ltag; $tag ]
    Perform Find [ ]
    Set Variable [ $name; Value:tagTable::tag ]
    Go to Layout [ original layout ]
    Set Field [ TEMP::LocationName; $name ]
    Go to Field [ ]
    #
    // #Tells user to select an order number not in use
    // #if the order field is blank.
    // If [ TEMP::orderLocation = "" ]
    // Show Custom Dialog [ Message: "Order number required. It can be used to place location before or after any modifiers: small location or location upstairs for example."; Buttons: “OK” ]
    // Go to Field [ TEMP::orderLocation ]
    // End If

Fields used in this script

    TEMP::kfocus
    TEMP::LocationName
    tagTable::_Ltag
    tagTable::tag
    TEMP::orderLocation

Scripts used in this script

Layouts used in this script

    tableTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showTag]	Parent Folder: [tagMenu]	Next Script: [addTagToMainRecord]
Script Name	duplicateTheory
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ tempSetup::kdefaultNodePrimary = "" ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible) from Tag Menus window."; Buttons: “OK” ]
    Halt Script
    End If
    If [ Get (FoundCount) = 0 ]
    Perform Script [ “newCitationMenuGroup” ]
    Exit Script [ ]
    End If
    #
    #Duplicate name and copyright of old theory.
    Set Variable [ $theoryName; Value:tagMenus::tag & " " & tagMenus::_Ltag ]
    Set Variable [ $theoryHealth; Value:tagMenus::notesOrHealth ]
    #
    #Prepare to find old tags at bottom of script.
    Set Variable [ $theoryOld; Value:tagMenus::_Ltag ]
    #
    #Stop spelling check script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Record/Request
    Set Field [ tagMenus::kGroupOrTest; GetNthRecord ( tagMenus::kGroupOrTest ; Get (RecordNumber) - 1 ) ]
    Set Field [ tagMenus::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ tagMenus::tag; $theoryName ]
    Set Field [ tagMenus::tagSpelling; $theoryName ]
    Set Field [ tagMenus::notesOrHealth; $theoryHealth ]
    #
    #Prepare to add new theory key to old theories points
    #and evidence records.
    Set Variable [ $theoryNew; Value:tagMenus::_Ltag ]
    Set Field [ tagMenus::match; "sample" ]
    Go to Object [ Object Name: "tag" ]
    #
    #Go to the other window and start the find process.
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::kcsample; "*" & $theoryOld & ¶ ]
    Perform Find [ ]
    #
    #Add new theory key to old theories points and evidence.
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $allPointsEvidence; Value:testlearn::kcsample ]
    Set Field [ testlearn::kcsample; testlearn::orderTest & $theoryNew & ¶ & $allPointsEvidence ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Refind all section records.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $$citationRecord ]
    Go to Record/Request/Page [ Next ]
    End Loop
    Set Variable [ $$stoploadCitation ]
    #
    #Load new theory.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Perform Script [ “loadItemRecordForSampleTagMenu” ]
    Show Custom Dialog [ Message: "Change the tag ID number to the current verson number (v2, v3, v4, etc.) of this theory."; Buttons: “OK” ]
    #

Fields used in this script

    TEMP::nodeLock
    tempSetup::kdefaultNodePrimary
    tagMenus::tag
    tagMenus::_Ltag
    tagMenus::notesOrHealth
    tagMenus::kGroupOrTest
    TEMP::kdefaultNodePrimary
    tagMenus::kRecordCreatorNode
    tagMenus::tagSpelling
    tagMenus::match
    TEMP::ksection
    testlearn::kcsection
    testlearn::kcsample
    testlearn::orderTest
    testlearn::_Ltestlearn

Scripts used in this script

    newCitationMenuGroup
    loadItemRecordForSampleTagMenu

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [duplicateTheory]	Parent Folder: [tagMenu]	Next Script: [setDefaultSection]
Script Name	addTagToMainRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    createEmptyLibrary
    gotoDefaultsOrReport
    addORremoveRefTagStep1

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    // #Due to the fact that users click the add tag button
    // #when they want to find records tagged with a tag,
    // #I'm making it so that users can only add tags in edit mode.
    // If [ Left (Get (LayoutName) ; 3 ) = "ref" and $$stopAdd ≠ 1 ]
    // Show Custom Dialog [ Message: "Click the edit button in the References window (but not in Learn window) to add/change tags. This inconvience was put in place because users kept forgetting to click find before click the P or O buttons."; Buttons: “OK” ]
    // Exit Script [ ]
    // End If
    #
    // #Because I keep forgetting to press find mode, this
    // #bit of script is to confirm that the user really wants
    // #to add or change the tag of the first record instead of
    // #finding records with selected tag.
    // If [ $$referenceRecordOne = 1 ]
    // Show Custom Dialog [ Message: "Did you mean to ADD this tag to the first record or FIND reference records with this tag?"; Buttons: “ADD”, “FIND”, “Cancel” ]
    // If [ Get ( LastMessageChoice ) = 2 ]
    // #This variable is needed becasue message choice 2
    // #gets carried over to the Find Mode Script, which then
    // #activates tag instead of reference record find mode.
    // Set Variable [ $$ClearMessageChoice; Value:1 ]
    // Perform Script [ “findMode” ]
    // Else If [ Get ( LastMessageChoice ) = 3 ]
    // Set Variable [ $$referenceRecordOne ]
    // Exit Script [ ]
    // Else If [ Get ( LastMessageChoice ) = 1 ]
    // Set Variable [ $$referenceRecordOne ]
    // End If
    // End If
    #
    #
    #This script adds tags to main reference or learn
    #primary tag fields, and a chunk of it adds section
    #keys found in the learn or reference record to
    #the keyword or node tag group of the tag just
    #added, to insure that this tag shows up in every
    #section in which the record it tagged shows up.
    #There may be sections where this keyword or
    #node tag shows up, and this newly tagged
    #reference or learn record does not, which is OK.
    #Reference and learn records do not require all
    #the section keys the added tag has.
    #
    #NOTE: Most of these tags except keyword and node
    #tags are universal, and so there are no section keys
    #to add to them. In the case of sample and test
    #tags, because these tags are section specific, there
    #is no reason to add keys from other sections to
    #them.
    #
    If [ $$stopAddTagToCitation = 1 ]
    Exit Script [ ]
    End If
    #
    #Stop script if user is looking at item/detail tags
    #in add mode, as these tags cannot be applied
    #to reference records.
    If [ $$add = 1 and $$citationMatch = "testSetup" ]
    Show Custom Dialog [ Message: "You cannot tag reference records with item tags. So why then are there buttons? The buttons show up because I have not made time to create a separate layout just for item tags. This issue has been logged as a minor irritation."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    // #Stop script if user trying to add reference or learn record
    // #that has references or citations added to it.
    // #In the future this will be possible, but for now I need
    // #to focus on other things to get the beta released.
    // If [ reference::_Lreference ≠ $$cite ]
    // If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" or reference::kcitation ≠ "" ]
    // Show Custom Dialog [ Message: "For now, you cannot use a record that has its own citation or references added to it as a citation or reference for another record. This is a known issue, and in a future release it will be resolved. "; Buttons: “OK” ]
    // Exit Script [ ]
    // End If
    // End If
    #
    #
    #
    #If reference or learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the tag's group
    #keychain so when this tag record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    If [ Get ( LayoutTableName ) = "testlearn" or Get ( LayoutTableName ) = "reference" ]
    Perform Script [ “CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain” ]
    #
    #Check main checkbox if record is not already
    #a main record. This is because when going to
    #edit cite or reference records, only main records
    #are shown by default.
    If [ "main" & ¶ ≠ FilterValues ( testlearn::filterFind ; "main" & ¶ ) and Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "main" & ¶ & $filterFind ]
    Else If [ "main" & ¶ ≠ FilterValues ( reference::filterFind ; "main" & ¶ ) and Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "main" & ¶ & $filterFind ]
    End If
    #
    Else If [ 1 = 1 ]
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain” ]
    End If
    #
    #Set variable to note table name in case tag is from
    #testLearn table, in which case an 'L' will need to be
    #added to the tag to conditionally format the buttons
    #for Learn Ref and Learn citations in the Tag Menus window.
    Set Variable [ $tableName; Value:Get ( LayoutTableName ) ]
    #
    #
    #Get key for tag that is to be added to record.
    If [ Right ( Get (LayoutName) ; 4 ) = "test" ]
    Set Variable [ $tag; Value:test::_Ltest ]
    Set Variable [ $tagName; Value:ruleSection::name ]
    Else If [ Right ( Get (LayoutName) ; 5 ) = "3cite" ]
    Set Variable [ $tag; Value:reference::_Lreference ]
    Else If [ Right ( Get (LayoutName) ; 7 ) = "refcite" ]
    Set Variable [ $tag; Value:testlearn::_Ltestlearn ]
    Else If [ Right ( Get (LayoutName) ; 8 ) = "sections" ]
    Set Variable [ $tag; Value:ruleSection::_Lgroup ]
    Set Variable [ $tagName; Value:ruleSection::name ]
    #
    #Stop check spelling script as this script is triggered
    #on section layout by record load trigger, and
    #so before user can change the spelling.
    Set Variable [ $$stopChangeSectionName; Value:1 ]
    Else If [ Right ( Get (LayoutName) ; 4 ) ≠ "cite" ]
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    Set Variable [ $lock; Value:tagMenus::orderOrLock ]
    End If
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #If removing a discovery record, the database
    #will jump to the next records tag menu selection.
    #So to keep the users focus on the tag they orginally
    #selected, the system must record this record's
    #number now. This will be be used below
    #for test records only.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #Conditionally format selected tag.
    If [ Right ( Get (LayoutName) ; 4 ) ≠ "cite" ]
    Set Variable [ $$citationItem; Value:tagMenus::_Ltag ]
    Else If [ Right ( Get (LayoutName) ; 5 ) = "3cite" ]
    Set Variable [ $$citationItem; Value:reference::_Lreference ]
    Set Variable [ $citeHealth; Value:reference::kHealth ]
    Set Variable [ $citeCopyrightDate; Value:reference::CopyrightYear ]
    Set Variable [ $citekeywordOther; Value:reference::kkeywordOther ]
    Set Variable [ $citekeywordOtherWords; Value:reference::OtherKeyWords ]
    Set Variable [ $citekeywordPrimary; Value:reference::kkeywordPrimary ]
    #
    Set Variable [ $filename; Value:reference::fileName ]
    Set Variable [ $fileLocation; Value:reference::kfileLocation ]
    Set Variable [ $folderpath; Value:reference::kfolderpath ]
    Set Variable [ $medium; Value:reference::kmedium ]
    Set Variable [ $URL; Value:reference::URL ]
    Set Variable [ $URLdate; Value:reference::URLdate ]
    Else If [ Right ( Get (LayoutName) ; 7 ) = "refcite" ]
    Set Variable [ $$citationItem; Value:testlearn::_Ltestlearn ]
    Set Variable [ $citeHealth; Value:testlearn::kHealth ]
    Set Variable [ $citeCopyrightDate; Value:testlearn::copyrightYear ]
    Set Variable [ $citekeywordOther; Value:testlearn::kcKeywordOther ]
    Set Variable [ $citekeywordOtherWords; Value:testlearn::OtherKeyWords ]
    Set Variable [ $citekeywordPrimary; Value:testlearn::kKeywordPrimary ]
    End If
    #
    // New Window [ Name: "Add Tag" ]
    #
    #Select reference, learn, or setup window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    #
    #Check which tag user is looking at and then...
    If [ $$citationMatch = "node" ]
    #
    #If primary node is in use, then remove it.
    If [ tempSetup::kdefaultNodePrimary = $tag ]
    Set Field [ tempSetup::kdefaultNodePrimary; "" ]
    Set Field [ tempSetup::DEFAULTNodePrimaryName; "" ]
    #
    #Finish removing the key.
    Set Variable [ $$citationItem ]
    Set Variable [ $$PrimaryNode ]
    #
    #If primary node is not in use add it and set
    #variables to see if it was in the other node
    #field so it can be removed from there thus
    #preventing the same node showing up twice.
    Else If [ tempSetup::kdefaultNodePrimary ≠ $tag ]
    Set Field [ tempSetup::kdefaultNodePrimary; $tag ]
    Set Field [ tempSetup::nodeLock; $lock ]
    Set Field [ tempSetup::DEFAULTNodePrimaryName; tagDefaultNodePrimary::tag ]
    Set Variable [ $$node; Value:tempSetup::kdefaultNodeOther ]
    Set Field [ tempSetup::kdefaultNodeOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$node ) ≠ ValueCount ( Substitute ( $$node ; $$citationItem & "¶" ; "" ) ) ; Substitute ( $$node ; $$citationItem & "¶" ; "" ) ; Substitute ( $$node ; $$citationItem ; "" ) ) ]
    Set Variable [ $$PrimaryNode; Value:testlearn::kNodePrimary ]
    Set Variable [ $$node; Value:tempSetup::kdefaultNodeOther ]
    Set Variable [ $$skipFirstPartOfScript; Value:1 ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    Perform Script [ “addORremoveTagFromCitationStep2node” ]
    Close Window [ Name: "reorder"; Current file ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "health" ]
    If [ tempSetup::kdefaultHealth = $tag ]
    Set Field [ tempSetup::kdefaultHealth; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$health ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    Else If [ testlearn::kHealth ≠ $tag ]
    Set Variable [ $$health; Value:tempSetup::kdefaultHealth ]
    Set Field [ tempSetup::kdefaultHealth; $tag ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    #Since sections are required, the deselect script
    #steps are not needed. When the user clicks on
    #a new record on the section layout this script
    #is triggered and that section set as the default
    #section.
    Else If [ $$citationMatch = "section" ]
    Set Field [ tempSetup::ksection; $tag ]
    Set Field [ tempSetup::sectionName; $tagName ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Allow duplicate tag check script to operate.
    Set Variable [ $$stopChangeSectionName ]
    Exit Script [ ]
    #
    End If
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    #
    #Refresh the windows so changed conditional formatting
    #will show up.
    Refresh Window
    #
    Set Variable [ $$stoploadCitation ]
    #
    #
    #
    #
    #
    Else If [ Get (LastError) ≠ 112 ]
    #
    #
    #
    #
    #
    #Check which tag user is looking at and then...
    If [ $$citationMatch = "node" ]
    #
    #If primary node is in use, then remove it.
    If [ testlearn::kNodePrimary = $tag ]
    Set Field [ testlearn::kNodePrimary; "" ]
    #
    #Finish removing the key.
    Set Variable [ $$citationItem ]
    Set Variable [ $$PrimaryNode ]
    #
    #If primary node is not in use add it and set
    #variables to see if it was in the other node
    #field so it can be removed from there thus
    #preventing the same node showing up twice.
    Else If [ testlearn::kNodePrimary ≠ $tag ]
    Set Field [ testlearn::kNodePrimary; $tag ]
    Set Field [ testlearn::kNodeOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$node ) ≠ ValueCount ( Substitute ( $$node ; $$citationItem & "¶" ; "" ) ) ; Substitute ( $$node ; $$citationItem & "¶" ; "" ) ; Substitute ( $$node ; $$citationItem ; "" ) ) ]
    Set Variable [ $$node; Value:testlearn::kNodeOther ]
    Set Variable [ $$PrimaryNode; Value:testlearn::kNodePrimary ]
    Set Variable [ $$skipFirstPartOfScript; Value:1 ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    Perform Script [ “addORremoveTagFromCitationStep2node” ]
    Close Window [ Name: "reorder"; Current file ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "medium" ]
    If [ testlearn::kmedium = $tag ]
    Set Field [ testlearn::kmedium; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$medium ]
    Else If [ testlearn::kmedium ≠ $tag ]
    Set Field [ testlearn::kmedium; $tag ]
    Set Variable [ $$medium; Value:$tag ]
    End If
    #
    Else If [ $$citationMatch = "ref" ]
    If [ testlearn::kcreference= $tag ]
    Set Field [ testlearn::kcreference; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$ref ]
    Else If [ testlearn::kcreference ≠ $tag ]
    Set Field [ testlearn::kcreference; $tag ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Perform Script [ “CHUNKaddReferenceNodesAndKeywords” ]
    End If
    #
    Else If [ $$citationMatch = "health" ]
    If [ testlearn::kHealth = $tag ]
    Set Field [ testlearn::kHealth; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$health ]
    Else If [ testlearn::kHealth ≠ $tag ]
    Set Field [ testlearn::kHealth; $tag ]
    Set Variable [ $$health; Value:testlearn::kHealth ]
    End If
    #
    Else If [ $$citationMatch = "path" ]
    If [ testlearn::kfolderPath = $tag ]
    Set Field [ testlearn::kfolderPath; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$Path ]
    Else If [ testlearn::kfolderPath ≠ $tag ]
    Set Field [ testlearn::kfolderPath; $tag ]
    Set Variable [ $$Path; Value:testlearn::kfolderPath ]
    End If
    #
    Else If [ $$citationMatch = "cite" ]
    If [ Case ( $tableName = "testLearn" ; testlearn::kcitation = $tag & "L" ; testlearn::kcitation = $tag ) ]
    Set Field [ testlearn::kcitation; "" ]
    #
    // #Ask user if OK to remove keywords.
    // Show Custom Dialog [ Message: "Use the citation record's keywords? (This will replace this records keywords if there are any.)"; Buttons: “cancel”, “OK” ]
    // If [ Get ( LastMessageChoice ) = 2 ]
    // End If
    // Set Field [ testlearn::kHealth; "" ]
    // Set Field [ testlearn::copyrightYear; "" ]
    // Set Field [ testlearn::kKeywordPrimary; "" ]
    // Set Field [ testlearn::kcKeywordOther; "" ]
    // Set Field [ testlearn::OtherKeyWords; "" ]
    // #
    // Set Field [ testlearn::filename; "" ]
    // Set Field [ testlearn::kfileLocation; "" ]
    // Set Field [ testlearn::kfolderPath; "" ]
    // Set Field [ testlearn::kmedium; "" ]
    // Set Field [ testlearn::URL; "" ]
    // Set Field [ testlearn::URLPubDate; "" ]
    #
    Set Variable [ $$citationItem ]
    Set Variable [ $$cite ]
    // Set Variable [ $citeHealth ]
    // Set Variable [ $citeCopyrightYear ]
    // Set Variable [ $citekeywordOther ]
    // Set Variable [ $citekeywordOtherWords ]
    // Set Variable [ $citekeywordPrimary ]
    #The 'L' allows system to learn and reference records apart.
    Else If [ testlearn::kcitation & "L" ≠ $tag ]
    Set Field [ testlearn::kcitation; Case ( $tableName = "testLearn" ; $tag & "L" ; $tag ) ]
    Set Variable [ $$cite; Value:Case ( $tableName = "testLearn" ; $tag & "L" ; $tag ) ]
    Refresh Window
    #
    #Ask user if OK to replace keywords.
    Select Window [ Name: "Tag Menus"; Current file ]
    Show Custom Dialog [ Message: "Use citation record's keywords: " & //KEYWORDS Case ( tagKeywordPrimary::tag = "" ; "" ; tagKeywordPrimary::tag ; Bold & ", " ) & reference::OtherKeyWords & "? (This will replace keywords for this record, if there are any.)"; Buttons: “no”, “yes” ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ testlearn::kKeywordPrimary; $citekeywordPrimary ]
    Set Field [ testlearn::kcKeywordOther; $citekeywordOther ]
    Set Field [ testlearn::OtherKeyWords; $citekeywordOtherWords ]
    End If
    #
    #Health should blank and take copyright of cited record.
    Set Field [ testlearn::kHealth; "" ]
    #
    #Decided that user needs to go to tag window to get
    #link info, because if changed, it will not change here
    #because these items not linked to citation record.
    // Set Field [ testlearn::copyrightYear; $citeCopyrightDate ]
    // Set Field [ testlearn::filename; $filename ]
    // Set Field [ testlearn::kfileLocation; $fileLocation ]
    // Set Field [ testlearn::kfolderPath; $folderpath ]
    // Set Field [ testlearn::kmedium; $medium ]
    // Set Field [ testlearn::URL; $URL ]
    // Set Field [ testlearn::URLPubDate; $URLdate ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “CHUNKaddReferenceNodesAndKeywords” ]
    End If
    #
    Else If [ $$citationMatch = "key" ]
    #
    #If primary keyword is in use, then remove it.
    If [ testlearn::kKeywordPrimary = $tag ]
    Set Field [ testlearn::kKeywordPrimary; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$PrimaryKey ]
    #
    #If primary keyword is not in use add it and set
    #variables to see if it was in the other keyword
    #field so it can be removed from there thus
    #preventing the same keyword showing up twice.
    Else If [ testlearn::kKeywordPrimary ≠ $tag ]
    Set Field [ testlearn::kKeywordPrimary; $tag ]
    Set Field [ testlearn::kcKeywordOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$key ) ≠ ValueCount ( Substitute ( $$key ; $$citationItem & "¶" ; "" ) ) ; Substitute ( $$key ; $$citationItem & "¶" ; "" ) ; Substitute ( $$key ; $$citationItem ; "" ) ) ]
    Set Variable [ $$key; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$skipFirstPartOfScript; Value:1 ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    Perform Script [ “addORremoveTagFromCitationStep2keyword” ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "test" ]
    #
    #
    #If test item is in use, then remove it.
    #
    #But first determine if it is a discovery record.
    #Because discovery records are created in the
    #test module, and then end up here via the
    #info check box on the discovery tag menu, these
    #records only reason for showing up here in the
    #learn module is because of this link. Once
    #the user clears this link, the record will be omitted
    #and so to not surprise the user with this omission,
    #a warning is given to both inform and allow
    #the user to cancel clearing this link.
    If [ testlearn::ktest ≠ "" and GetValue ( testlearn::kctest ; 2 ) = "" ]
    Show Custom Dialog [ Message: "This discovery record will be removed from this section of your database: learn section. It will still be available in the " & TEMP::sectionName & " test section as a discovery record for " & TEMP::testName & ", report " & testlearn::kreportNumber & "."; Buttons: “OK”, “Cancel” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    End If
    Set Variable [ $number; Value:1 ]
    Loop
    If [ FilterValues ( Middle ( GetValue ( testlearn::kctest ; $number ) ; 4 ; 42 ) ; $tag & "¶" ) = $tag & ¶ ]
    Set Field [ testlearn::kctest; Substitute ( $$test ; GetValue ( testlearn::kctest ; $number ) & "¶" ; "" ) ]
    Set Field [ testlearn::orderTest; "" ]
    #
    #If as discussed above this is a discovery record,
    #clear the filterfind field to prevent it from being
    #part of the learn record set and then omit it.
    If [ testlearn::ktest ≠ "" and testlearn::kctest = "" ]
    Set Field [ testlearn::filterFind; "" ]
    Omit Record
    End If
    Set Variable [ $$test; Value:testlearn::kctest ]
    Set Variable [ $$citationItem ]
    Set Variable [ $number; Value:"exit" ]
    End If
    Exit Loop If [ GetValue ( testlearn::kctest ; $number ) = "" ]
    Exit Loop If [ $number = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    #
    #If test item is not in use add it.
    If [ $number ≠ "exit" ]
    Set Variable [ $number; Value:1 ]
    Loop
    If [ FilterValues ( Middle ( GetValue ( testlearn::kctest ; $number ) ; 4 ; 42 ) ; $$test & "¶" ) ≠ $tag & ¶ ]
    Set Field [ testlearn::kctest; "100" & $tag & ¶ & $$test ]
    Set Field [ testlearn::orderTest; "100" ]
    Set Variable [ $$test; Value:testlearn::kctest ]
    Set Variable [ $number ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    End If
    Exit Loop If [ FilterValues ( Middle ( GetValue ( testlearn::kctest ; $number ) ; 4 ; 42 ) ; $$test & "¶" ) = "" ]
    Exit Loop If [ $number = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    #
    #If the system is currently sorting test records
    #by order number, then give this newly tagged
    #record the number 100, and then sort it the records
    #so that it shows up as part of the current tag's
    #record set.
    Set Field [ testlearn::orderTest; "100" ]
    Set Field [ TEMP::TLTestSort; "order" ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    End If
    #
    Else If [ $$citationMatch = "sample" ]
    #
    #If sample item is in use, then remove it.
    Set Variable [ $number; Value:1 ]
    Loop
    If [ FilterValues ( Middle ( GetValue ( testlearn::kcsample ; $number ) ; 4 ; 42 ) ; $tag & "¶" ) = $tag & ¶ ]
    Set Field [ testlearn::kcsample; Substitute ( $$sample ; GetValue ( testlearn::kcsample ; $number ) & "¶" ; "" ) ]
    Set Field [ testlearn::orderTest; "" ]
    Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Variable [ $$citationItem ]
    Set Variable [ $number; Value:"exit" ]
    End If
    Exit Loop If [ GetValue ( testlearn::kcsample ; $number ) = "" ]
    Exit Loop If [ $number = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    #
    If [ $number ≠ "exit" ]
    Set Variable [ $number; Value:1 ]
    Loop
    #If sample item is not in use add it.
    If [ FilterValues ( Middle ( GetValue ( testlearn::kcsample ; $number ) ; 4 ; 42 ) ; $tagS & "¶" ) ≠ $tag & ¶ ]
    // Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Field [ testlearn::kcsample; "100" & $tag & ¶ & $$sample ]
    // Set Field [ testlearn::orderTest; "100" ]
    Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Variable [ $number ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    End If
    Exit Loop If [ FilterValues ( Middle ( GetValue ( testlearn::kcsample ; $number ) ; 4 ; 42 ) ; $tagS & "¶" ) = "" ]
    Exit Loop If [ $number = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    #
    #If the system is currently sorting test records
    #by order number, then give this newly tagged
    #record the number 100, and then sort it the records
    #so that it shows up as part of the current tag's
    #record set.
    Set Field [ testlearn::orderTest; "100" ]
    Set Field [ TEMP::TLTestSort; "order" ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    End If
    End If
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    #
    #Refresh the windows so changed conditional formatting
    #will show up.
    Refresh Window
    #
    Set Variable [ $$stoploadCitation ]
    End If
    #
    #
    #
    #
    #
    #
    #
    #
    #
    Else If [ Get (LastError) ≠ 112 ]
    #Check which tag user is looking at and then...
    If [ $$citationMatch = "node" ]
    #
    #If primary node is in use, then remove it.
    If [ reference::knodePrimary = $tag ]
    Set Field [ reference::knodePrimary; "" ]
    #
    #Get the keys currently unlocking who is a
    #copyright holder.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Remove key from keychain if it is on
    #the copyright holder keychain.
    If [ reference::knodeOther = "" and reference::knodePrimary = "" ]
    Set Field [ reference::kcopyrightHolder; Substitute ( $keyChain ; "node738fds8ef" & "¶" ; "" ) ]
    End If
    #
    #Finish removing the key.
    Set Variable [ $$citationItem ]
    Set Variable [ $$PrimaryNode ]
    #
    #If primary node is not in use add it and set
    #variables to see if it was in the other node
    #field so it can be removed from there thus
    #preventing the same node showing up twice.
    Else If [ reference::knodePrimary ≠ $tag ]
    Set Field [ reference::knodePrimary; $tag ]
    Set Field [ reference::knodeOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$node ) ≠ ValueCount ( Substitute ( $$node ; $$citationItem & "¶" ; "" ) ) ; Substitute ( $$node ; $$citationItem & "¶" ; "" ) ; Substitute ( $$node ; $$citationItem ; "" ) ) ]
    Set Variable [ $$node; Value:reference::knodeOther ]
    Set Variable [ $$PrimaryNode; Value:reference::knodePrimary ]
    Set Variable [ $$skipFirstPartOfScript; Value:1 ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    Perform Script [ “addORremoveTagFromCitationStep2node” ]
    Close Window [ Name: "reorder"; Current file ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "medium" ]
    If [ reference::kmedium = $tag ]
    Set Field [ reference::kmedium; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$medium ]
    Else If [ reference::kmedium ≠ $tag ]
    Set Field [ reference::kmedium; $tag ]
    Set Variable [ $$medium; Value:reference::kmedium ]
    End If
    #
    Else If [ $$citationMatch = "health" ]
    If [ reference::kHealth = $tag ]
    Set Field [ reference::kHealth; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$health ]
    Else If [ reference::kHealth ≠ $tag ]
    Set Field [ reference::kHealth; $tag ]
    Set Variable [ $$health; Value:reference::kHealth ]
    End If
    #
    Else If [ $$citationMatch = "cite" ]
    If [ reference::kcitation = $tag ]
    Set Field [ reference::kcitation; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$cite ]
    Else If [ reference::kcitation ≠ $tag ]
    Set Field [ reference::kcitation; $tag ]
    Set Variable [ $$cite; Value:reference::kcitation ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “CHUNKaddReferenceNodesAndKeywords” ]
    End If
    #
    Else If [ $$citationMatch = "organ" ]
    If [ reference::korgan = $tag ]
    Set Field [ reference::korgan; "" ]
    #
    #Get the keys currently unlocking
    #copyright holder.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Remove key from keychain if it is on
    #the copyright holder keychain.
    Set Field [ reference::kcopyrightHolder; Substitute ( $keyChain ; $$citationItem & "¶" ; "" ) ]
    #Finish removing the key.
    Set Variable [ $$citationItem ]
    Set Variable [ $$organ ]
    #
    Else If [ reference::korgan ≠ $tag ]
    #
    #Get the keys currently unlocking
    #copyright holder if on the chain.
    Set Variable [ $oldCopyrightKey; Value:reference::korgan ]
    If [ FilterValues ( reference::kcopyrightHolder ; $oldCopyrightKey & ¶ ) = $oldCopyrightKey & ¶ ]
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Remove old key from keychain if it is on
    #the copyright holder keychain.
    Set Field [ reference::kcopyrightHolder; Substitute ( $keyChain ; $oldCopyrightKey & "¶" ; "" ) ]
    #
    #Add new key to copyright keychain.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    Set Field [ reference::kcopyrightHolder; $tag & "¶" & $keyChain ]
    End If
    Set Field [ reference::korgan; $tag ]
    Set Variable [ $$organ; Value:reference::korgan ]
    End If
    #
    Else If [ $$citationMatch = "copyist" ]
    If [ reference::kcopyist = $tag ]
    Set Field [ reference::kcopyist; "" ]
    #
    #Get the keys currently unlocking
    #copyright holder.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Remove key from keychain if it is on
    #the copyright holder keychain.
    Set Field [ reference::kcopyrightHolder; Substitute ( $keyChain ; $$citationItem & "¶" ; "" ) ]
    #Finish removing the key.
    Set Variable [ $$citationItem ]
    Set Variable [ $$copyist ]
    #
    Else If [ reference::kcopyist ≠ $tag ]
    #
    #Get the keys currently unlocking
    #copyright holder if on the chain.
    Set Variable [ $oldCopyrightKey; Value:reference::kcopyist ]
    If [ FilterValues ( reference::kcopyrightHolder ; $oldCopyrightKey & ¶ ) = $oldCopyrightKey & ¶ ]
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Remove old key from keychain if it is on
    #the copyright holder keychain.
    Set Field [ reference::kcopyrightHolder; Substitute ( $keyChain ; $oldCopyrightKey & "¶" ; "" ) ]
    #
    #Add new key to copyright keychain.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    Set Field [ reference::kcopyrightHolder; $tag & "¶" & $keyChain ]
    End If
    #
    Set Field [ reference::kcopyist; $tag ]
    Set Variable [ $$copyist; Value:reference::kcopyist ]
    End If
    #
    Else If [ $$citationMatch = "Path" ]
    If [ reference::kfolderpath = $tag ]
    Set Field [ reference::kfolderpath; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$Path ]
    Else If [ reference::kfolderpath ≠ $tag ]
    Set Field [ reference::kfolderpath; $tag ]
    Set Variable [ $$Path; Value:reference::kfolderpath ]
    End If
    #
    Else If [ $$citationMatch = "key" ]
    #
    #If primary keyword is in use, then remove it.
    If [ reference::kkeywordPrimary = $tag ]
    Set Field [ reference::kkeywordPrimary; "" ]
    Set Variable [ $$citationItem ]
    Set Variable [ $$PrimaryKey ]
    #
    #If primary keyword is not in use add it and set
    #variables to see if it was in the other keyword
    #field so it can be removed from there thus
    #preventing the same keyword showing up twice.
    Else If [ reference::kkeywordPrimary ≠ $tag ]
    Set Field [ reference::kkeywordPrimary; $tag ]
    Set Field [ reference::kkeywordOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$key ) ≠ ValueCount ( Substitute ( $$key ; $$citationItem & "¶" ; "" ) ) ; Substitute ( $$key ; $$citationItem & "¶" ; "" ) ; Substitute ( $$key ; $$citationItem ; "" ) ) ]
    Set Variable [ $$key; Value:reference::kkeywordOther ]
    Set Variable [ $$PrimaryKey; Value:reference::kkeywordPrimary ]
    Set Variable [ $$skipFirstPartOfScript; Value:1 ]
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    Perform Script [ “addORremoveTagFromCitationStep2keyword” ]
    Exit Script [ ]
    End If
    #
    End If
    #
    #Record must be committed if user decides to
    #perform a script on it right after this one or
    #perform a find requiring the newly added key.
    Commit Records/Requests
    #
    #Refresh the windows so changed conditional formatting
    #will show up.
    Refresh Window
    #
    #Since references can only be tagged in edit mode
    #this next part of the script is not needed, and actually
    #causes problems.
    // #Take user to where record sorts to.
    // #will show up.
    // Set Variable [ $$stoploadCitation; Value:1 ]
    // Set Variable [ $record; Value:reference::_Lreference ]
    // If [ $$citationMatch = "node" ]
    // Go to Record/Request/Page [ First ]
    // Sort Records [ ] [ No dialog ]
    // Loop
    // Exit Loop If [ reference::_Lreference = $record ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // Else If [ $$citationMatch = "medium" ]
    // Go to Record/Request/Page [ First ]
    // Sort Records [ ] [ No dialog ]
    // Loop
    // Exit Loop If [ reference::_Lreference = $record ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // Else If [ $$citationMatch = "Path" ]
    // Go to Record/Request/Page [ First ]
    // Sort Records [ ] [ No dialog ]
    // Loop
    // Exit Loop If [ reference::_Lreference = $record ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // Else If [ $$citationMatch = "key" ]
    // Go to Record/Request/Page [ First ]
    // Sort Records [ ] [ No dialog ]
    // Loop
    // Exit Loop If [ reference::_Lreference = $record ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // End If
    Set Variable [ $$stoploadCitation ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    #
    #Check if any Learn records are tagged with this
    #test item (if currently in test mode), and if
    #not then sort Learn records by date.
    If [ $$citationMatch = "test" and (FilterValues ( Middle ( GetValue ( $$test ; 1 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 2 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 3 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 4 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 5 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 6 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 7 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 8 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 9 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or FilterValues ( Middle ( GetValue ( $$test ; 10 ) ; 4 ; 42 ) ; test::_Ltest & "¶" ) = test::_Ltest & ¶ ) = 0 ]
    Perform Script [ “loadItemRecordForTestTagMenu” ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    reference::_Lreference
    testlearn::kcitation
    testlearn::kcreference
    reference::kcitation
    testlearn::filterFind
    reference::filterFind
    test::_Ltest
    ruleSection::name
    testlearn::_Ltestlearn
    ruleSection::_Lgroup
    tagMenus::_Ltag
    tagMenus::orderOrLock
    reference::kHealth
    reference::CopyrightYear
    reference::kkeywordOther
    reference::OtherKeyWords
    reference::kkeywordPrimary
    reference::fileName
    reference::kfileLocation
    reference::kfolderpath
    reference::kmedium
    reference::URL
    reference::URLdate
    testlearn::kHealth
    testlearn::copyrightYear
    testlearn::kcKeywordOther
    testlearn::OtherKeyWords
    testlearn::kKeywordPrimary
    tempSetup::kdefaultNodePrimary
    tempSetup::DEFAULTNodePrimaryName
    tempSetup::nodeLock
    tagDefaultNodePrimary::tag
    tempSetup::kdefaultNodeOther
    testlearn::kNodePrimary
    tempSetup::kdefaultHealth
    tempSetup::ksection
    tempSetup::sectionName
    testlearn::kNodeOther
    testlearn::kmedium
    testlearn::kfolderPath
    testlearn::filename
    testlearn::kfileLocation
    testlearn::URL
    testlearn::URLPubDate
    tagKeywordPrimary::tag
    testlearn::ktest
    testlearn::kctest
    TEMP::sectionName
    TEMP::testName
    testlearn::kreportNumber
    testlearn::orderTest
    TEMP::TLTestSort
    testlearn::kcsample
    reference::knodePrimary
    reference::kcopyrightHolder
    reference::knodeOther
    reference::korgan
    reference::kcopyist

Scripts used in this script

    findMode
    CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain
    CHUNKaddMainSectionKeysToTagRecordKeychain
    addORremoveTagFromCitationStep2node
    CHUNKaddReferenceNodesAndKeywords
    addORremoveTagFromCitationStep2keyword
    sortTLRecordsByOrderNumber
    loadItemRecordForTestTagMenu

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addTagToMainRecord]	Parent Folder: [tagMenu]	Next Script: [addBackSectionCreatorNode]
Script Name	setDefaultSection
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    startDatabase
    newSectionOnSectionLayout

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Get key for tag that is to be added to record.
    Set Variable [ $tag; Value:ruleSection::_Lgroup ]
    Set Variable [ $tagName; Value:ruleSection::name ]
    #
    #Stop check spelling script as this script is triggered
    #on section layout by record load trigger, and
    #so before user can change the spelling.
    Set Variable [ $$stopChangeSectionName; Value:1 ]
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #
    #Select setup window.
    Select Window [ Name: "Setup"; Current file ]
    #
    #Since sections are required, the deselect script
    #steps are not needed. When the user clicks on
    #a new record on the section layout this script
    #is triggered and that section set as the default
    #section.
    Set Field [ tempSetup::ksection; $tag ]
    Set Field [ tempSetup::sectionName; $tagName ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Allow duplicate tag check script to operate.
    Set Variable [ $$stopChangeSectionName ]
    #
    #
    #
    #TURN INTO CHUNK!!!!!
    #TURN INTO CHUNK!!!!!
    #CHUNKaddReferenceNodesAndKeywords
    #
    #Check if nodes selected -- primary, other, and
    #test subject -- are in the current section.
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $nodePrimary; Value:tempSetup::kdefaultNodePrimary ]
    Set Variable [ $nodeOther; Value:tempSetup::kdefaultNodeOther ]
    Set Variable [ $nodeTestSubject; Value:tempSetup::kdefaultNodeTestSubject ]
    #
    #Find all nodes assigned to this section.
    Go to Layout [ “defaultNode1” (tagMenus) ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #PRIMARY NODE
    #Loop thru records to find primary node.
    Go to Record/Request/Page [ First ]
    #
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    Exit Loop If [ $nodePrimary = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the primary key being tested, then add its
    #group to the current section. ( Node groups are
    # are assigned to sections, not individual nodes.
    # So if the user wants one node to be assigned
    # to a new section, its group and all nodes in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # nodes by catergory requires that each group
    # have a unique name and that each node belong
    # to a group. For the node to be the same node
    # The group key it holds has to be the same as
    # well, which means the group has to appear
    # with the node, and with the group comes
    # all the nodes assigned to it. )
    If [ $nodePrimary ≠ tagMenus::_Ltag and $nodePrimary ≠ "" ]
    #
    #Find the node to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $nodePrimary ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all nodes, which now includes the
    #node just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    End If
    #
    #TEST SUBJECT
    #Loop thru records to find test subject node.
    Go to Record/Request/Page [ First ]
    #
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    Exit Loop If [ $nodeTestSubject = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the test subject key being tested, then add its
    #group to the current section. ( Node groups are
    # are assigned to sections, not individual nodes.
    # So if the user wants one node to be assigned
    # to a new section, its group and all nodes in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # nodes by catergory requires that each group
    # have a unique name and that each node belong
    # to a group. For the node to be the same node
    # The group key it holds has to be the same as
    # well, which means the group has to appear
    # with the node, and with the group comes
    # all the nodes assigned to it. )
    If [ $nodeTestSubject ≠ tagMenus::_Ltag and $nodeTestSubject ≠ "" ]
    #
    #Find the node to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $nodeTestSubject ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all nodes, which now includes the
    #node just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    End If
    #
    #OTHER NODES
    #Determine how many keys there are to find for
    #on the other nodes' keychain.
    Set Variable [ $numberOfNodes; Value:ValueCount ( $nodeOther ) ]
    #
    #Loop thru each node record, with every key
    #in the keychain.
    Loop
    Go to Record/Request/Page [ First ]
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfNodes = 0 ]
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    #( The get value calculation works by going to the
    # key in the list specified by the numberOfNodes
    # variable, set before entering the loops.
    # The system starts with the last key and with each
    # loop moves to the next key up, until there are
    # no more keys to check. )
    Exit Loop If [ GetValue ( $nodeOther ; $numberOfNodes ) = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the other node key being tested, then add its
    #group to the current section. ( Node groups are
    # are assigned to sections, not individual nodes.
    # So if the user wants one node to be assigned
    # to a new section, its group and all nodes in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # nodes by catergory requires that each group
    # have a unique name and that each node belong
    # to a group. For the node to be the same node
    # The group key it holds has to be the same as
    # well, which means the group has to appear
    # with the node, and with the group comes
    # all the nodes assigned to it. )
    If [ GetValue ( $nodeOther ; $numberOfNodes ) ≠ tagMenus::_Ltag and $nodeOther ≠ "" ]
    #
    #Find this node to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; GetValue ( $nodeOther ; $numberOfNodes ) ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all nodes, which now includes the
    #node just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfNodes; Value:$numberOfNodes - 1 ]
    End Loop
    Go to Layout [ “defaultSetup” (tempSetup) ]
    #
    #
    #
    #

Fields used in this script

    ruleSection::_Lgroup
    ruleSection::name
    tempSetup::ksection
    tempSetup::sectionName
    tempSetup::kdefaultNodePrimary
    tempSetup::kdefaultNodeOther
    tempSetup::kdefaultNodeTestSubject
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    tagMenus::_Ltag

Scripts used in this script

Layouts used in this script

    defaultNode1
    defaultSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [setDefaultSection]	Parent Folder: [tagMenu]	Next Script: [loadTagRecord]
Script Name	addBackSectionCreatorNode
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    defaultTestLocationMenu
    defaultNodeMenu
    editCitation
    learn

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    If [ $$stopAddBack = 1 ]
    Exit Script [ ]
    End If
    #
    #Make section creator key.
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; TEMP::ksection ]
    Perform Find [ ]
    #
    #Check if nodes selected -- primary, other, and
    #test subject -- are in the current section.
    Set Variable [ $nodePrimary; Value:groupTest::kRecordCreatorNode ]
    Set Variable [ $nodeCreator; Value:groupTest::kSectionCreatorNodesCreator ]
    Set Variable [ $groupName; Value:groupTest::defaultSectionInfo ]
    Set Variable [ $nodeName; Value:groupTest::CaptionORinuseCheck ]
    #
    #If node record has been deleted then create a new one.
    Go to Layout [ “defaultNode1” (tagMenus) ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $nodePrimary ]
    Set Field [ tagMenus::match; "node" ]
    Perform Find [ ]
    If [ Get (FoundCount) = 0 ]
    #
    #Find all node records.
    Go to Layout [ “defaultNode1” (tagMenus) ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    #Create a new node group.
    Go to Layout [ “tableGroupTag” (groupTest) ]
    #
    New Record/Request
    Set Field [ groupTest::ksection; TEMP::ksection ]
    Set Field [ groupTest::kRecordCreatorNode; $nodePrimary ]
    #
    Set Field [ groupTest::match; "node" ]
    Set Field [ groupTest::name; $groupName ]
    Set Field [ groupTest::nameSpelling; $groupName ]
    Set Variable [ $group; Value:groupTest::_Lgroup ]
    #
    #Re-create section's creator node.
    Go to Layout [ “defaultNode1” (tagMenus) ]
    New Record/Request
    Set Field [ tagMenus::kGroupOrTest; $group ]
    Set Field [ tagMenus::ksection; TEMP::ksection ]
    Set Field [ tagMenus::kRecordCreatorNode; $nodeCreator ]
    Set Field [ tagMenus::_Ltag; $nodePrimary ]
    Set Field [ tagMenus::tag; $nodeName ]
    Set Field [ tagMenus::tagSpelling; $nodeName ]
    Set Field [ tagMenus::match; "node" ]
    #
    #Return to defaultSection layout.
    Go to Layout [ original layout ]
    #
    #Inform user node was added back.
    Show Custom Dialog [ Message: "The creator node for this default section was added back. If you want to keep it deleted, you will have to delete the section it created right after you delete the section's creator node."; Buttons: “OK” ]
    #
    Exit Script [ ]
    End If
    #
    #Find all nodes assigned to this section.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #PRIMARY NODE
    #Loop thru records to find primary node.
    Go to Record/Request/Page [ First ]
    #
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    Exit Loop If [ $nodePrimary = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the primary key being tested, then add its
    #group to the current section. ( Node groups are
    # are assigned to sections, not individual nodes.
    # So if the user wants one node to be assigned
    # to a new section, its group and all nodes in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # nodes by catergory requires that each group
    # have a unique name and that each node belong
    # to a group. For the node to be the same node
    # The group key it holds has to be the same as
    # well, which means the group has to appear
    # with the node, and with the group comes
    # all the nodes assigned to it. )
    If [ $nodePrimary ≠ tagMenus::_Ltag and $nodePrimary ≠ "" ]
    #
    #Set variable to trigger Message to user.
    Set Variable [ $nodeAddedBack; Value:1 ]
    #
    #Find the node to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $nodePrimary ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all nodes, which now includes the
    #node just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    End If
    #
    #Return to defaultSection layout.
    Go to Layout [ original layout ]
    #
    #Inform user node was added back.
    If [ $nodeAddedBack = 1 ]
    Show Custom Dialog [ Message: "The creator node for this default section was added back. If you want to keep it deleted, you will have to delete the section it created right after you delete the section's creator node."; Buttons: “OK” ]
    End If
    #

Fields used in this script

    TEMP::ksection
    groupTest::_Lgroup
    groupTest::kRecordCreatorNode
    groupTest::kSectionCreatorNodesCreator
    groupTest::defaultSectionInfo
    groupTest::CaptionORinuseCheck
    tagMenus::_Ltag
    tagMenus::match
    ruleTagMenuGroups::ksection
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    groupTest::ksection
    groupTest::match
    groupTest::name
    groupTest::nameSpelling
    tagMenus::kGroupOrTest
    tagMenus::ksection
    tagMenus::kRecordCreatorNode
    tagMenus::tagSpelling

Scripts used in this script

Layouts used in this script

    tableGroupTag
    defaultNode1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addBackSectionCreatorNode]	Parent Folder: [tagMenu]	Next Script: [addORremoveTagFromCitationStep1]
Script Name	loadTagRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuNode
    menuKey
    loadCitation
    loadCitation OLD
    returnToAddRecordPUTONHOLD!!!!

Script Definition
Script Steps

    If [ $$stopLoadTagRecord ≠ 1 ]
    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #Capture recordID to conditionally format current record.
    Set Variable [ $$tagRecordID; Value:Get (RecordID) ]
    #
    // #If in add mode, capture the recordID to loop
    // #back to it if user navigates away from original
    // #add window.
    // If [ $$add = 1 and $$citationMatch = $$addCitationMatch ]
    // Set Variable [ $$addRecord; Value:tagMenus::_Ltag ]
    // Else If [ $$add = "" ]
    // Set Variable [ $$addRecord ]
    // End If
    Refresh Window
    Perform Script [ “checkIfLockedOnLearnTagMenus” ]
    Go to Field [ ]
    End If
    #
    #NOTE: this script is used on the Tag Menus window
    #for Learn records to exit field when a record is
    #is first entered, which is a real problem on the
    #iPhone as the text edit box opens when the user
    #may have clicked only to select the record rather
    #than edit it.
    # This field exit command is in the citation load
    #script along with a lot of other commands which
    #are not needed in this case. Thus I choose the
    #smaller script, which also has conditional formatting
    #step which is not used here, but is needed on
    #on other layouts.
    # SO...light script with unused command instead
    #of heavy script orginally written for loading these
    #records when they are main records (here they
    #are just tag records).

Fields used in this script

    tagMenus::_Ltag

Scripts used in this script

    checkIfLockedOnLearnTagMenus

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadTagRecord]	Parent Folder: [tagMenu]	Next Script: [addORremoveTagFromCitationStep2keyword]
Script Name	addORremoveTagFromCitationStep1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Stop script if user is looking at item/detail tags
    #in add mode, as these tags cannot be applied
    #to reference records.
    If [ $$add = 1 and $$citationMatch = "testItem" ]
    Show Custom Dialog [ Message: "You cannot tag reference records with item tags. So why then are there buttons? The buttons show up because I have not made time to create a separate layout just for item tags. This issue has been logged as a minor irritation."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    // #Due to the fact that users click the add tag button
    // #when they want to find records tagged with a tag,
    // #I'm making it so that users can only add tags in edit mode.
    // If [ Left (Get (LayoutName) ; 3 ) = "ref" and $$stopAdd = "" ]
    // Show Custom Dialog [ Message: "Click the edit button in the References window (but not in Learn window) to add/change tags. This inconvience was put in place because users kept forgetting to click find before click the P or O buttons."; Buttons: “OK” ]
    // Exit Script [ ]
    // End If
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Determine if user is looking at nodes or keywords.
    If [ $$citationMatch = "key" ]
    Perform Script [ “addORremoveTagFromCitationStep2keyword” ]
    Else If [ $$citationMatch = "node" ]
    Perform Script [ “addORremoveTagFromCitationStep2node” ]
    Close Window [ Name: "reorder"; Current file ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Get the keys currently unlocking who is a
    #copyright holder.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Remove key from keychain if it is on
    #the copyright holder keychain.
    If [ reference::knodeOther = "" and reference::knodePrimary = "" ]
    Set Field [ reference::kcopyrightHolder; Substitute ( $keyChain ; "node738fds8ef" & "¶" ; "" ) ]
    End If
    #
    Select Window [ Name: "Tag Menus Change Back When Done"; Current file ]
    If [ Get ( WindowName ) = "Tag Menus Change Back When Done" ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    End If
    Refresh Window
    End If

Fields used in this script

    reference::kcopyrightHolder
    reference::knodeOther
    reference::knodePrimary

Scripts used in this script

    addORremoveTagFromCitationStep2keyword
    addORremoveTagFromCitationStep2node

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addORremoveTagFromCitationStep1]	Parent Folder: [tagMenu]	Next Script: [addORremoveTagFromCitationStep2node]
Script Name	addORremoveTagFromCitationStep2keyword
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addTagToMainRecord
    addORremoveTagFromCitationStep1

Script Definition
Script Steps

    #
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    #This script adds tags to main reference or learn
    #other tag fields.
    If [ $$skipFirstPartOfScript ≠ 1 ]
    #
    #Get current reference or learn record key.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$key; Value:testlearn::kcKeywordOther ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$key; Value:reference::kkeywordOther ]
    End If
    #
    Select Window [ Name: "Tag Menus" ]
    #
    #Create a new window in order to perform the next part
    #without moving the focus around on the tag window.
    #To do this, as this is being added after the script below
    #was written, a hack is needed (so not the best way to
    #accomplish this). Rename the current window and then
    #call the new window Tag Menus. Then when done undo
    #the renaming.
    Set Variable [ $currentSelectedTag; Value:tagMenus::_Ltag ]
    Set Variable [ $closeWindowWhenDone; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Window Title [ Current Window; New Title: "Tag Menus Change Back When Done" ]
    New Window [ Name: "Tag Menus"; Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    #Make sure all tags are showing. User may be only
    #showing a few of the tags after performing a find.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Now loop to user selected tag.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $currentSelectedTag = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If tag user clicked has not been added, then add it.
    If [ tagMenus::_Ltag & "¶" ≠ FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    #
    #
    #Check for duplicates, prior to adding to a record.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $tagName; Value:tagMenus::tag ]
    Set Variable [ $tagKey; Value:tagMenus::_Ltag ]
    New Window [ ]
    Enter Find Mode [ Specified Find Requests: Find Records; Criteria: tagMenus::match: “key” AND ruleTagMenuGroups::ksection: “==7052011234235374” ] [ Restore ]
    Set Field [ tagMenus::tag; "==" & $tagName ]
    Set Field [ TEMP::ksection ]
    Perform Find [ ]
    Go to Record/Request/Page [ First ]
    If [ Get ( FoundCount ) > 1 ]
    Loop
    Exit Loop If [ tagMenus::_Ltag = $tagKey ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Field [ tagMenus::tag; $tagName & tagMenus::_Ltag ]
    Set Field [ tagMenus::tagSpelling; $tagName & tagMenus::_Ltag ]
    #
    Close Window [ Current Window ]
    Show Custom Dialog [ Message: "Keywords must have different spellings in each section. The ID number has been added to this keyword to make it different from its duplicate. Please do change it to something meaningful."; Buttons: “OK” ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Else If [ Get ( FoundCount ) ≤ 1 ]
    Close Window [ Current Window ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    End If
    #
    #
    #
    Set Variable [ $newKey; Value:tagMenus::_Ltag ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #Add keyword in reference or observation window.
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kcKeywordOther; $newKey & "¶" & $$key ]
    Set Variable [ $$key; Value:testlearn::kcKeywordOther ]
    If [ testlearn::kKeywordPrimary = $newKey ]
    Set Field [ testlearn::kKeywordPrimary; "" ]
    Set Variable [ $$citationItem ]
    End If
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::kkeywordOther; $newKey & "¶" & $$key ]
    Set Variable [ $$key; Value:reference::kkeywordOther ]
    If [ reference::kkeywordPrimary = $newKey ]
    Set Field [ reference::kkeywordPrimary; "" ]
    Set Variable [ $$citationItem ]
    End If
    Go to Field [ ]
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Now re-alphabetize and add new keyword to citation.
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Go to Record/Request/Page [ First ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    End If
    #
    #
    #Find and set first value in keyword list.
    #It will not have a comma in front like the other items.
    Select Window [ Name: "Tag Menus"; Current file ]
    Loop
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    Set Variable [ $newKey; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::OtherKeyWords; $newKey ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::OtherKeyWords; $newKey ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    End If
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Loop If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Now add remaining keywords to list.
    Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    Set Variable [ $newKey; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::OtherKeyWords; $otherKeys & ", " & $newKey ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::OtherKeyWords; $otherKeys & ", " & $newKey ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    End If
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    End Loop
    #
    #Commit records so user can change spelling.
    #Without commit records the system will not find
    #the newly added tag.
    Commit Records/Requests
    Go to Field [ ]
    #
    #Sort records according to users wishes.
    If [ TEMP::sortKey = "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    Set Variable [ $$stopLoadTagRecord ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    #
    #If reference or learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the tag's group
    #keychain so when this tag record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain” ]
    #
    #Now close working Tag Menus window and rename
    #users Tag Menus window to Tag Menus.
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    #
    #
    #
    #
    #If tag has been selected, then remove it.
    Set Variable [ $removeKey; Value:tagMenus::_Ltag ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kcKeywordOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$key ) ≠ ValueCount ( Substitute ( $$key ; $removekey & "¶" ; "" ) ) ; Substitute ( $$key ; $removekey & "¶" ; "" ) ; Substitute ( $$key ; $removekey ; "" ) ) ]
    Set Variable [ $$key; Value:testlearn::kcKeywordOther ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::kkeywordOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$key ) ≠ ValueCount ( Substitute ( $$key ; $removekey & "¶" ; "" ) ) ; Substitute ( $$key ; $removekey & "¶" ; "" ) ; Substitute ( $$key ; $removekey ; "" ) ) ]
    Set Variable [ $$key; Value:reference::kkeywordOther ]
    Go to Field [ ]
    End If
    End If
    #
    #
    #
    #
    #This next part of the script checks to see if
    #the otherKey field was affected.
    #
    If [ $$skipFirstPartOfScript = 1 ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $removeKey; Value:testlearn::kKeywordPrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $removeKey; Value:reference::kkeywordPrimary ]
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Else If [ $$skipFirstPartOfScript ≠ 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $removeKey; Value:tagMenus::tag ]
    End If
    Refresh Window
    #
    #Now re-alphabetize after removing keyword.
    #
    #
    #
    If [ $$skipFirstPartOfScript = 1 ]
    Set Variable [ $$skipFirstPartOfScript ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $removeKey; Value:testlearn::kKeywordPrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $removeKey; Value:reference::kkeywordPrimary ]
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    End If
    #
    #
    #
    #Order list alphabetically to re-construct otherKey
    #field belonging to the citation record.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Window [ Name: "reorder"; Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    Go to Layout [ “ltagSCRIPTloops” (tagMenus) ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Set Variable [ $testLearnRecordKey; Value:testlearn::_Ltestlearn ]
    #
    #Clear the field now in case all tags have been de-selected.
    Set Field [ testlearn::OtherKeyWords; "" ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    #
    #Clear the field now in case all tags have been de-selected.
    Set Field [ reference::OtherKeyWords; "" ]
    End If
    #
    #
    #Find and set first value in keyword list.
    #It will not have a comma in front like the other items.
    Select Window [ Name: "reorder"; Current file ]
    Loop
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) and tagMenus::tag ≠ $removeKey ]
    Set Variable [ $newKey; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    // Select Window [ Name: "Learn"; Current file ]
    Go to Layout [ “learnSCRIPTloops” (testlearn) ]
    If [ $testLearnRecordKey ≠ testlearn::_Ltestlearn ]
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; $testLearnRecordKey ]
    Perform Find [ ]
    End If
    Set Field [ testlearn::OtherKeyWords; $newKey ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::OtherKeyWords; $newKey ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    End If
    End If
    #
    #
    Select Window [ Name: "reorder"; Current file ]
    Exit Loop If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) and tagMenus::tag ≠ $removeKey ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Now add remaining keys to list.
    Go to Layout [ “ltagSCRIPTloops” (tagMenus) ]
    If [ Get (LastError) ≠ 101 ]
    Go to Record/Request/Page [ Next ]
    If [ Get (LastError) = 101 ]
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Name: "reorder"; Current file ]
    Set Variable [ $$skipFirstPartOfScript ]
    #
    #Now close working Tag Menus window and rename
    #users Tag Menus window to Tag Menus.
    If [ $closeWindowWhenDone = 1 ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    Loop
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) and tagMenus::tag ≠ $removeKey ]
    Set Variable [ $newKey; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    // Select Window [ Name: "Learn"; Current file ]
    Go to Layout [ “learnSCRIPTloops” (testlearn) ]
    Set Field [ testlearn::OtherKeyWords; $otherKeys & ", " & $newKey ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Go to Layout [ “ltagSCRIPTloops” (tagMenus) ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::OtherKeyWords; $otherKeys & ", " & $newKey ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    End If
    End If
    #
    #
    Select Window [ Name: "reorder"; Current file ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    // #Sort records according to users wishes.
    // If [ TEMP::sortKey = "cat" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortKey = "abc" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    Set Variable [ $$stopLoadTagRecord ]
    // Go to Record/Request/Page [ First ]
    // Scroll Window [ Home ]
    // Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Close Window [ Name: "reorder"; Current file ]
    Set Variable [ $$skipFirstPartOfScript ]
    #
    #Now close working Tag Menus window and rename
    #users Tag Menus window to Tag Menus.
    If [ $closeWindowWhenDone = 1 ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    testlearn::kcKeywordOther
    reference::kkeywordOther
    tagMenus::_Ltag
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    tagMenus::tag
    tagMenus::tagSpelling
    testlearn::kKeywordPrimary
    reference::kkeywordPrimary
    testlearn::OtherKeyWords
    reference::OtherKeyWords
    TEMP::sortKey
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    testlearn::_Ltestlearn

Scripts used in this script

    CHUNKaddMainSectionKeysToTagRecordKeychain

Layouts used in this script

    ltagSCRIPTloops
    learnSCRIPTloops

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addORremoveTagFromCitationStep2keyword]	Parent Folder: [tagMenu]	Next Script: [changeSpellingOfCitationNodes]
Script Name	addORremoveTagFromCitationStep2node
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addTagToMainRecord
    addORremoveTagFromCitationStep1

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #This script adds tags to main reference or learn
    #other tag fields.
    If [ $$skipFirstPartOfScript ≠ 1 ]
    #
    #Get current record IDs in reference or
    #learn or setup window.
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$node; Value:tempSetup::kdefaultNodeOther ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$node; Value:testlearn::kNodeOther ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$node; Value:reference::knodeOther ]
    End If
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #
    #Create a new window in order to perform the next part
    #without moving the focus around on the tag window.
    #To do this, as this is being added after the script below
    #was written, a hack is needed (so not the best way to
    #accomplish this). Rename the current window and then
    #call the new window Tag Menus. Then when done undo
    #the renaming.
    Set Variable [ $currentSelectedTag; Value:tagMenus::_Ltag ]
    Set Variable [ $closeWindowWhenDone; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Window Title [ Current Window; New Title: "Tag Menus Change Back When Done" ]
    New Window [ Name: "Tag Menus"; Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    #Make sure all tags are showing. User may be only
    #showing a few of the tags after performing a find.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Now loop to user selected tag.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $currentSelectedTag = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #
    #If tag user clicked has not yet been selected, then add it.
    If [ tagMenus::_Ltag & "¶" ≠ FilterValues ( $$node ; tagMenus::_Ltag & "¶" ) ]
    #
    Set Variable [ $newNode; Value:tagMenus::_Ltag ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #
    #Add node in reference or observation window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Field [ tempSetup::kdefaultNodeOther; $newNode & "¶" & $$Node ]
    Set Variable [ $$Node; Value:tempSetup::kdefaultNodeOther ]
    If [ tempSetup::kdefaultNodePrimary = $newNode ]
    Set Field [ tempSetup::kdefaultNodePrimary; "" ]
    Set Variable [ $$citationItem ]
    End If
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ testlearn::kNodeOther; $newNode & "¶" & $$Node ]
    Set Variable [ $$Node; Value:testlearn::kNodeOther ]
    If [ testlearn::kNodePrimary = $newNode ]
    Set Field [ testlearn::kNodePrimary; "" ]
    Set Variable [ $$citationItem ]
    End If
    Go to Field [ ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::knodeOther; $newNode & "¶" & $$Node ]
    Set Variable [ $$Node; Value:reference::knodeOther ]
    If [ reference::knodePrimary = $newNode ]
    Set Field [ reference::knodePrimary; "" ]
    Set Variable [ $$citationItem ]
    End If
    Go to Field [ ]
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Now re-alphabetize and add new node to citation.
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Go to Record/Request/Page [ First ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $otherNodes; Value:tempSetup::DEFAULTNodeOtherNames ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $otherNodes; Value:testlearn::NodeOthers ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $otherNodes; Value:reference::NodeOthers ]
    End If
    #
    #
    #Find and set first value in node list.
    #It will not have a comma in front like the other items.
    Select Window [ Name: "Tag Menus"; Current file ]
    Loop
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$Node ; tagMenus::_Ltag & "¶" ) ]
    Set Variable [ $newNode; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Field [ tempSetup::DEFAULTNodeOtherNames; $newNode ]
    Set Variable [ $otherNodes; Value:tempSetup::DEFAULTNodeOtherNames ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ testlearn::NodeOthers; $newNode ]
    Set Variable [ $otherNodes; Value:testlearn::NodeOthers ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::NodeOthers; $newNode ]
    Set Variable [ $otherNodes; Value:reference::NodeOthers ]
    End If
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Loop If [ tagMenus::_Ltag & "¶" = FilterValues ( $$Node ; tagMenus::_Ltag & "¶" ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Now add remaining nodes to list.
    Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$Node ; tagMenus::_Ltag & "¶" ) ]
    Set Variable [ $newNode; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Field [ tempSetup::DEFAULTNodeOtherNames; $otherNodes & "; " & $newNode ]
    Set Variable [ $otherNodes; Value:tempSetup::DEFAULTNodeOtherNames ]
    Set Variable [ $setup; Value:1 ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ testlearn::NodeOthers; $otherNodes & "; " & $newNode ]
    Set Variable [ $otherNodes; Value:testlearn::NodeOthers ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::NodeOthers; $otherNodes & "; " & $newNode ]
    Set Variable [ $otherNodes; Value:reference::NodeOthers ]
    End If
    End If
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Commit records so user can change spelling.
    #Without commit, the system will not find
    #the newly added tag.
    Commit Records/Requests
    Go to Field [ ]
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    // #Sort records according to users wishes.
    // #Sort according to current users wishes. By default
    // #the sort will be by category which is set by editCitation script.
    // If [ TEMP::sortNode = "cat" and Left (Get (LayoutName) ; 11) = "defaultNode" or TEMP::sortNode = "" and Left (Get (LayoutName) ; 11) = "defaultNode" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortNode = "abc" and Left (Get (LayoutName) ; 11) = "defaultNode" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    // If [ TEMP::sortKey = "cat" and Get (LayoutName) ≠ "defaultNode" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortKey = "abc" and Get (LayoutName) ≠ "defaultNode" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    Set Variable [ $$stopLoadTagRecord ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    #
    #If reference or learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the tag's group
    #keychain so when this tag record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    If [ $setup ≠ 1 ]
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain” ]
    End If
    #
    #Now close working Tag Menus window and rename
    #users Tag Menus window to Tag Menus.
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    Exit Script [ ]
    End If
    End If
    #
    #If tag has been selected, then remove it.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $removeNode; Value:tagMenus::_Ltag ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$Node; Value:tempSetup::kdefaultNodeOther ]
    Set Field [ tempSetup::kdefaultNodeOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$Node ) ≠ ValueCount ( Substitute ( $$Node ; $removeNode & "¶" ; "" ) ) ; Substitute ( $$Node ; $removeNode & "¶" ; "" ) ; Substitute ( $$Node ; $removeNode ; "" ) ) ]
    Set Variable [ $$Node; Value:tempSetup::kdefaultNodeOther ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ testlearn::kNodeOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$Node ) ≠ ValueCount ( Substitute ( $$Node ; $removeNode & "¶" ; "" ) ) ; Substitute ( $$Node ; $removeNode & "¶" ; "" ) ; Substitute ( $$Node ; $removeNode ; "" ) ) ]
    Set Variable [ $$Node; Value:testlearn::kNodeOther ]
    Go to Field [ ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::knodeOther; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$Node ) ≠ ValueCount ( Substitute ( $$Node ; $removeNode & "¶" ; "" ) ) ; Substitute ( $$Node ; $removeNode & "¶" ; "" ) ; Substitute ( $$Node ; $removeNode ; "" ) ) ]
    Set Variable [ $$Node; Value:reference::knodeOther ]
    Go to Field [ ]
    End If
    #
    #
    #
    #
    #
    #
    #
    #This next part of the script checks to see if
    #the otherNode field was affected.
    If [ $$skipFirstPartOfScript = 1 ]
    #
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $removeNode; Value:tempSetup::kdefaultNodePrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $removeNode; Value:testlearn::kNodePrimary ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $removeNode; Value:reference::knodePrimary ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Else If [ $$skipFirstPartOfScript ≠ 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $removeNode; Value:tagMenus::tag ]
    End If
    Refresh Window
    #
    #Now re-alphabetize after removing node.
    #
    #
    #
    If [ $$skipFirstPartOfScript = 1 ]
    Set Variable [ $$skipFirstPartOfScript ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $removeNode; Value:tempSetup::kdefaultNodePrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $removeNode; Value:testlearn::kNodePrimary ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $removeNode; Value:reference::knodePrimary ]
    End If
    #
    #
    End If
    #
    #
    #Order list alphabetically to re-construct otherNode
    #field belonging to the citation record.
    // Sort Records [ ] [ No dialog ]
    // Set Variable [ $$stopLoadTagRecord; Value:1 ]
    // Go to Record/Request/Page [ First ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    New Window [ Name: "reorder"; Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    Go to Layout [ “ltagSCRIPTloops” (tagMenus) ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $otherNodes; Value:tempSetup::DEFAULTNodeOtherNames ]
    #
    #Clear the field now in case all tags have been de-selected.
    Set Field [ tempSetup::DEFAULTNodeOtherNames; "" ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $otherNodes; Value:testlearn::NodeOthers ]
    #
    #Clear the field now in case all tags have been de-selected.
    Set Field [ testlearn::NodeOthers; "" ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $otherNodes; Value:reference::NodeOthers ]
    #
    #Clear the field now in case all tags have been de-selected.
    Set Field [ reference::NodeOthers; "" ]
    End If
    #
    #
    #Find and set first value in node list.
    #It will not have a comma in front like the other items.
    // Select Window [ Name: "Tag Menus"; Current file ]
    Select Window [ Name: "reorder"; Current file ]
    Go to Record/Request/Page [ First ]
    Loop
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$Node ; tagMenus::_Ltag & "¶" ) and tagMenus::tag ≠ $removeNode ]
    Set Variable [ $newNode; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    // Go to Layout [ “learnSCRIPTloops” (testlearn) ]
    Set Field [ testlearn::NodeOthers; $newNode ]
    Set Variable [ $otherNodes; Value:testlearn::NodeOthers ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ tempSetup::DEFAULTNodeOtherNames; $newNode ]
    Set Variable [ $otherNodes; Value:tempSetup::DEFAULTNodeOtherNames ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::NodeOthers; $newNode ]
    Set Variable [ $otherNodes; Value:reference::NodeOthers ]
    End If
    End If
    #
    #
    // Select Window [ Name: "Tag Menus"; Current file ]
    Select Window [ Name: "reorder"; Current file ]
    Exit Loop If [ tagMenus::_Ltag & "¶" = FilterValues ( $$Node ; tagMenus::_Ltag & "¶" ) and tagMenus::tag ≠ $removeNode ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Now add remaining nodes to alphabetical list.
    Go to Layout [ “ltagSCRIPTloops” (tagMenus) ]
    If [ Get (LastError) ≠ 101 ]
    Go to Record/Request/Page [ Next; Exit after last ]
    If [ Get (LastError) = 101 ]
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Name: "reorder"; Current file ]
    Set Variable [ $$skipFirstPartOfScript ]
    #
    #Now close working Tag Menus window and rename
    #users Tag Menus window to Tag Menus.
    If [ $closeWindowWhenDone = 1 ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Exit Script [ ]
    End If
    Loop
    If [ tagMenus::_Ltag & "¶" = FilterValues ( $$Node ; tagMenus::_Ltag & "¶" ) and tagMenus::tag ≠ $removeNode ]
    Set Variable [ $newNode; Value:tagMenus::tag ]
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Set Field [ tempSetup::DEFAULTNodeOtherNames; $otherNodes & "; " & $newNode ]
    Set Variable [ $otherNodes; Value:tempSetup::DEFAULTNodeOtherNames ]
    Else If [ Get (LastError) ≠ 112 ]
    // Go to Layout [ “learnSCRIPTloops” (testlearn) ]
    Set Field [ testlearn::NodeOthers; $otherNodes & "; " & $newNode ]
    Set Variable [ $otherNodes; Value:testlearn::NodeOthers ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::NodeOthers; $otherNodes & "; " & $newNode ]
    Set Variable [ $otherNodes; Value:reference::NodeOthers ]
    End If
    End If
    #
    #
    // Select Window [ Name: "Tag Menus"; Current file ]
    Select Window [ Name: "reorder"; Current file ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    // #Sort records according to users wishes.
    // #Sort according to current users wishes. By default
    // #the sort will be by category which is set by editCitation script.
    // If [ TEMP::sortNode = "cat" and Get (LayoutName) = "defaultNode" or TEMP::sortNode = "" and Get (LayoutName) = "defaultNode" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortNode = "abc" and Get (LayoutName) = "defaultNode" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    // If [ TEMP::sortKey = "cat" and Get (LayoutName) ≠ "defaultNode" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortKey = "abc" and Get (LayoutName) ≠ "defaultNode" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    Set Variable [ $$stopLoadTagRecord ]
    // Go to Record/Request/Page [ First ]
    // Scroll Window [ Home ]
    // Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Close Window [ Name: "reorder"; Current file ]
    Set Variable [ $$skipFirstPartOfScript ]
    #
    #Now close working Tag Menus window and rename
    #users Tag Menus window to Tag Menus.
    If [ $closeWindowWhenDone = 1 ]
    Close Window [ Name: "Tag Menus"; Current file ]
    Set Window Title [ Of Window: "Tag Menus Change Back When Done"; Current file; New Title: "Tag Menus" ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    tempSetup::kdefaultNodeOther
    testlearn::kNodeOther
    reference::knodeOther
    tagMenus::_Ltag
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    tempSetup::kdefaultNodePrimary
    testlearn::kNodePrimary
    reference::knodePrimary
    tagMenus::tag
    tempSetup::DEFAULTNodeOtherNames
    testlearn::NodeOthers
    reference::NodeOthers
    TEMP::sortNode
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    TEMP::sortKey

Scripts used in this script

    CHUNKaddMainSectionKeysToTagRecordKeychain

Layouts used in this script

    ltagSCRIPTloops
    learnSCRIPTloops

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addORremoveTagFromCitationStep2node]	Parent Folder: [tagMenu]	Next Script: [sortTags]
Script Name	changeSpellingOfCitationNodes
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $key; Value:reference::referenceNodes ]
    Set Variable [ $keyOLD; Value:reference::referenceNodesOLD ]
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #
    If [ $keyOLD & "¶" = FilterValues ( $keychain ; $keyOLD & "¶" ) and $key = "" ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $keyOLD & "¶" ; "" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    Else If [ $keyOLD & "¶" = FilterValues ( $keychain ; $keyOLD & "¶" ) ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $keyOLD & "¶" ; $key & "¶" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    End If
    Set Field [ reference::referenceNodesOLD; $key ]

Fields used in this script

    reference::referenceNodes
    reference::referenceNodesOLD
    reference::kcopyrightHolder

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSpellingOfCitationNodes]	Parent Folder: [tagMenu]	Next Script: [addORremoveRefTagStep1]
Script Name	sortTags
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Sort records and save sort state for future visits.
    If [ $$citationMatch = "key" and TEMP::sortKey = "abc" ]
    Set Field [ TEMP::sortKey; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "node" and TEMP::sortNode = "abc" ]
    Set Field [ TEMP::sortNode; "cat" ]
    #Disabled this sort because the order lock puts the
    #creator node when lock is active at bottom of list v
    #in alpha order within category list.
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "medium" and TEMP::sortMedium = "abc" ]
    Set Field [ TEMP::sortMedium; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "copyist" and TEMP::sortCopyist = "abc" ]
    Set Field [ TEMP::sortCopyist; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "path" and TEMP::sortPath = "abc" ]
    Set Field [ TEMP::sortPath; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "health" and TEMP::sortHealth = "abc" ]
    Set Field [ TEMP::sortHealth; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "organ" and TEMP::sortOrgan = "abc" ]
    Set Field [ TEMP::sortOrgan; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "sample" and TEMP::sortSample = "abc" ]
    Set Field [ TEMP::sortSample; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "location" and TEMP::sortLocation = "abc" ]
    Set Field [ TEMP::sortLocation; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "test" and TEMP::sortTest = "abc" or Left ( Get ( LayoutName ) ; 4 ) = "test" and TEMP::sortTest = "abc" ]
    Set Field [ TEMP::sortTest; "cat" ]
    Sort Records [ Specified Sort Order: groupTest::order; based on value list: “order” groupTest::name; ascending tagMenus::orderOrLock; based on value list: “order” test::order; ascending test::testName; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "cite" and TEMP::sortCite = "abc" ]
    Set Field [ TEMP::sortCite; "cat" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "ref" and TEMP::sortRef = "abc" ]
    Set Field [ TEMP::sortRef; "cat" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "testItem" and TEMP::sortTestItem = "abc" ]
    Set Field [ TEMP::sortTestItem; "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::_Lgroup; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    End If
    #
    #
    #
    #Sort records and save sort state for future visits.
    If [ $$citationMatch = "key" ]
    Set Field [ TEMP::sortKey; "abc" ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ TEMP::sortNode; "abc" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "medium" ]
    Set Field [ TEMP::sortMedium; "abc" ]
    Else If [ $$citationMatch = "copyist" ]
    Set Field [ TEMP::sortCopyist; "abc" ]
    Else If [ $$citationMatch = "path" ]
    Set Field [ TEMP::sortPath; "abc" ]
    Else If [ $$citationMatch = "health" ]
    Set Field [ TEMP::sortHealth; "abc" ]
    Else If [ $$citationMatch = "organ" ]
    Set Field [ TEMP::sortOrgan; "abc" ]
    Else If [ $$citationMatch = "sample" ]
    Set Field [ TEMP::sortSample; "abc" ]
    Else If [ $$citationMatch = "location" ]
    Set Field [ TEMP::sortLocation; "abc" ]
    Else If [ $$citationMatch = "testItem" ]
    Set Field [ TEMP::sortTestItem; "abc" ]
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::name; ascending test::testName; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "test" or Left ( Get ( LayoutName ) ; 4 ) = "test" ]
    Set Field [ TEMP::sortTest; "abc" ]
    Sort Records [ Specified Sort Order: test::testName; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "cite" ]
    Set Field [ TEMP::sortCite; "abc" ]
    Sort Records [ Specified Sort Order: reference::referenceShort; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    Else If [ $$citationMatch = "ref" ]
    Set Field [ TEMP::sortRef; "abc" ]
    Sort Records [ Specified Sort Order: reference::referenceShort; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    End If
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]

Fields used in this script

    TEMP::sortKey
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    TEMP::sortNode
    TEMP::sortMedium
    TEMP::sortCopyist
    TEMP::sortPath
    TEMP::sortHealth
    TEMP::sortOrgan
    TEMP::sortSample
    TEMP::sortLocation
    TEMP::sortTest
    groupTest::order
    groupTest::name
    test::order
    test::testName
    TEMP::sortCite
    tagKeywordPrimary::orderOrLock
    tagKeywordPrimary::tag
    reference::referenceShort
    TEMP::sortRef
    TEMP::sortTestItem
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::_Lgroup
    ruleTagSectionName::name
    ruleTagMenuTestGroups::name

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sortTags]	Parent Folder: [tagMenu]	Next Script: [CHUNKaddMainSectionKeysToTagRecordKeychain_addMode]
Script Name	addORremoveRefTagStep1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Determine if user is looking at cite or ref.
    #NOTE: The cite idea is no longer being used. So,
    #when here is time to properly test, these cite script
    #steps need to be removed. END NOTE
    If [ $$citationMatch = "cite" ]
    Perform Script [ “addTagToMainRecord” ]
    Else If [ $$citationMatch = "ref" ]
    If [ Right ( Get (LayoutName) ; 7 ) = "RefCite" ]
    #
    #Check if tagging would cause record to reference itself.
    If [ testlearn::_Ltestlearn = $$citation ]
    Show Custom Dialog [ Message: "Records cannot reference themselves."; Buttons: “OK” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Halt Script
    End If
    #
    #Complete process.
    Perform Script [ “addORremoveCiteOrRefTLTag” ]
    Select Window [ Name: "Learn"; Current file ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    End If
    Perform Script [ “addORremoveCitationOrReferenceRefTag” ]
    End If

Fields used in this script

    testlearn::_Ltestlearn

Scripts used in this script

    addTagToMainRecord
    addORremoveCiteOrRefTLTag
    addORremoveCitationOrReferenceRefTag

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addORremoveRefTagStep1]	Parent Folder: [tagMenu]	Next Script: [CHUNKaddMainSectionKeysToTagRecordKeychain]
Script Name	CHUNKaddMainSectionKeysToTagRecordKeychain_addMode
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    CHUNKaddReferenceNodesAndKeywords

Script Definition
Script Steps

    #
    #Add any section keys just added to the main record
    #that are not in this tag's section group keychain, so that
    #this tag will show up in all sections the main record
    #shows up in. ( Section tags
    # are assigned to groups, not individual tags.
    # So if the user wants one tag to be assigned
    # to a new section, its group and all tags in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # tags by group requires that each group
    # have a unique name and that each tag belong
    # to a group. )
    #
    #Determine how many keys there are.
    Set Variable [ $numberOfKeys; Value:ValueCount ( $$mainKeychain ) ]
    #
    #Loop thru each key to see if any do not match
    #keys in the tag group's keychain.
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeys = 0 ]
    #
    If [ GetValue ( $$mainKeychain ; $numberOfKeys ) ≠ GetValue ( FilterValues ( ruleTagMenuGroups::ksection & ¶ ; GetValue ( $$mainKeychain ; $numberOfKeys ) & ¶ ) ; 1 ) ]
    #
    #Next, add the current section key to this
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; GetValue ( $$mainKeychain ; $numberOfKeys ) & ¶ & $groupSectionKeychain ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    End Loop
    #

Fields used in this script

    ruleTagMenuGroups::ksection

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKaddMainSectionKeysToTagRecordKeychain_addMode]	Parent Folder: [tagMenu]	Next Script: [CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain]
Script Name	CHUNKaddMainSectionKeysToTagRecordKeychain
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addTagToMainRecord
    addORremoveTagFromCitationStep2keyword
    addORremoveTagFromCitationStep2node

Script Definition
Script Steps

    #
    #If reference or learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the tag's group
    #keychain so when this tag record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    #NOTE: Add only section keys to keyword and node tags.
    If [ $$citationMatch = "node" or $$citationMatch = "key" ]
    Select Window [ Name: "References"; Current file ]
    Set Variable [ $keychain; Value:reference::kcsection ]
    Select Window [ Name: "Learn"; Current file ]
    #
    #If the user was not looking at Refernce records
    #then the keychain variable will be blank and need
    #to be filled in. But if they were then filling it in
    #as if Learn records where showing would blank
    #the just filled in keychain variable.
    If [ $keychain = "" ]
    Set Variable [ $keychain; Value:testlearn::kcsection ]
    End If
    #
    #Determine how many keys there are.
    Set Variable [ $numberOfKeys; Value:ValueCount ( $keychain ) ]
    #
    #Loop thru each key to see if any do not match
    #keys in the tag group's keychain.
    Select Window [ Name: "Tag Menus"; Current file ]
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeys = 0 ]
    #
    If [ GetValue ( $keychain ; $numberOfKeys ) ≠ GetValue ( FilterValues ( ruleTagMenuGroups::ksection & ¶ ; GetValue ( $keychain ; $numberOfKeys ) & ¶ ) ; 1 ) ]
    #
    #Next, add the current section key to this
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; GetValue ( $keychain ; $numberOfKeys ) & ¶ & $groupSectionKeychain ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    End Loop
    End If
    #

Fields used in this script

    reference::kcsection
    testlearn::kcsection
    ruleTagMenuGroups::ksection

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKaddMainSectionKeysToTagRecordKeychain]	Parent Folder: [tagMenu]	Next Script: [addORremoveCiteOrRefTLTag]
Script Name	CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addTagToMainRecord
    addORremoveCiteOrRefTLTag
    addORremoveCitationOrReferenceRefTag

Script Definition
Script Steps

    #
    #If learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the learn or reference
    #keychain so when this learn record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    #NOTE: Once a learn record is tagged with reference
    #records -- other learn and reference records --
    #it is prevented in add mode from acquiring new keys
    #which would need to be passed along to these added
    #records, and then to all of their references, and so on.
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 0 ]
    Set Variable [ $keychain; Value:testlearn::kcsection ]
    If [ testlearn::kcitation ≠ "" and $$citationMatch = "ref" ]
    Show Custom Dialog [ Message: "References can be added after the citation is removed. (Cite the source of an unchanged copy, clip, quote, etc. from one source. Reference the sources of your rewording/remixing of one or more texts, movies, etc.)"; Buttons: “OK” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Halt Script
    Else If [ testlearn::kcreference ≠ "" and $$citationMatch = "cite" ]
    If [ ValueCount ( testlearn::kcreference ) = 1 ]
    Show Custom Dialog [ Message: "A citiation can be added after the referene is removed. (Cite the source of an unchanged copy, clip, quote, etc. from one source. Reference the sources of your rewording/remixing of one or more texts, movies, etc.)"; Buttons: “OK” ]
    Else
    Show Custom Dialog [ Message: "A citiation can be added after referenes are removed. (Cite the source of an unchanged copy, clip, quote, etc. from one source. Reference the sources of your rewording/remixing of one or more texts, movies, etc.)"; Buttons: “OK” ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Halt Script
    End If
    Else If [ Get (LastError) ≠ 0 ]
    Select Window [ Name: "References"; Current file ]
    Set Variable [ $keychain; Value:reference::kcsection ]
    End If
    #
    #Determine how many keys there are.
    Set Variable [ $numberOfKeys; Value:ValueCount ( $keychain ) ]
    #
    #Loop thru each key to see if any do not match
    #keys in the main record's keychain.
    Select Window [ Name: "Tag Menus"; Current file ]
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeys = 0 ]
    #
    #If main record being tagged does not have
    #one or more of the tag's keys in its keychain then
    #add the missing keys.
    If [ Get ( LayoutTableName ) = "testlearn" and GetValue ( $keychain ; $numberOfKeys ) ≠ GetValue ( FilterValues ( testlearn::kcsection & ¶ ; GetValue ( $keychain ; $numberOfKeys ) & ¶ ) ; 1 ) ]
    #
    #Stop script if user trying to add reference or learn record
    #that has references or citations added to it.
    #Records being added to have to share their section
    #keys with all records being added to them. But
    #when a record is addd that is missing some of its
    #is added AND that record has records added to it
    #as a citation or reference life gets really complicated.
    #So to simplify things for now, tag adding cannot happen
    #once a record aquires references and tags. A record
    #can be added as a reference or a citation as long as
    #it is has all the tags of the record it is being added to.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" or reference::kcitation ≠ "" ]
    Show Custom Dialog [ Message: "This record you wish to add can be added if you first remove the citation or references that are linked to it. Once added, these removed records can be added back."; Buttons: “OK” ]
    Halt Script
    End If
    #
    #Next, add the current section key to this
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:testlearn::kcsection ]
    Set Field [ testlearn::kcsection; GetValue ( $keychain ; $numberOfKeys ) & ¶ & $groupSectionKeychain ]
    #
    Else If [ Get ( LayoutTableName ) = "reference" and GetValue ( $keychain ; $numberOfKeys ) ≠ GetValue ( FilterValues ( reference::kcsection & ¶ ; GetValue ( $keychain ; $numberOfKeys ) & ¶ ) ; 1 ) ]
    #
    #Stop script if user trying to add reference or learn record
    #that has references or citations added to it.
    #Records being added to have to share their section
    #keys with all records being added to them. But
    #when a record is addd that is missing some of its
    #is added AND that record has records added to it
    #as a citation or reference life gets really complicated.
    #So to simplify things for now, tag adding cannot happen
    #once a record aquires references and tags. A record
    #can be added as a reference or a citation as long as
    #it is has all the tags of the record it is being added to.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" or reference::kcitation ≠ "" ]
    Show Custom Dialog [ Message: "This record you wish to add can be added if you first remove the citation or references that are linked to it. Once added, these removed records can be added back."; Buttons: “OK” ]
    Halt Script
    End If
    #
    #
    #Next, add the current section key to this
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:reference::kcsection ]
    Set Field [ reference::kcsection; GetValue ( $keychain ; $numberOfKeys ) & ¶ & $groupSectionKeychain ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    End Loop
    #

Fields used in this script

    testlearn::kcsection
    testlearn::kcitation
    testlearn::kcreference
    reference::kcsection
    reference::kcitation

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain]	Parent Folder: [tagMenu]	Next Script: [changeSpellingOfKeywordOrNodeTag]
Script Name	addORremoveCiteOrRefTLTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addORremoveRefTagStep1

Script Definition
Script Steps

    #
    #Conditionally format field in learn or
    #observation window.
    Set Variable [ $$refTestLearn; Value:1 ]
    #
    #If reference or learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the tag's group
    #keychain so when this tag record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    Perform Script [ “CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain” ]
    #
    #Check main checkbox if record is not already
    #a main record. This is because when going to
    #edit cite or reference records, only main records
    #are shown by default.
    If [ "main" & ¶ ≠ FilterValues ( testlearn::filterFind ; "main" & ¶ ) and Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "main" & ¶ & $filterFind ]
    End If
    #
    #Get current record IDs in reference or
    #observation window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$ref; Value:reference::lock ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If tag user clicked has not yet been selected, then add it.
    #The 'L' is added to all Tag Menu to conditional format
    #the Learn menu button.
    If [ testlearn::_Ltestlearn & "L¶" ≠ FilterValues ( $$ref ; testlearn::_Ltestlearn & "L¶" ) ]
    #
    Set Variable [ $newRef; Value:testlearn::_Ltestlearn & "L" ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #Add reference in reference or observation window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kcreference; $newRef & "¶" & $$ref ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::lock; $newRef & "¶" & $$ref ]
    Set Variable [ $$ref; Value:reference::lock ]
    Go to Field [ ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Sort records according to users wishes.
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Set Variable [ $$stopLoadTagRecord ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Exit Script [ ]
    End If
    #
    #If tag has been selected, then remove it.
    Set Variable [ $removeRef; Value:testlearn::_Ltestlearn & "L" ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kcreference; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$ref) ≠ ValueCount ( Substitute ( $$ref ; $removeRef & "¶" ; "" ) ) ; Substitute ( $$ref ; $removeRef & "¶" ; "" ) ; Substitute ( $$ref ; $removeRef; "" ) ) ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::lock; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$ref ) ≠ ValueCount ( Substitute ( $$ref ; $removeRef& "¶" ; "" ) ) ; Substitute ( $$ref ; $removeRef & "¶" ; "" ) ; Substitute ( $$ref ; $removeRef ; "" ) ) ]
    Set Variable [ $$ref; Value:reference::lock ]
    Go to Field [ ]
    End If
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #Sort records according to users wishes.
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    Set Variable [ $$stopLoadTagRecord ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Set Variable [ $$skipFirstPartOfScript ]

Fields used in this script

    testlearn::filterFind
    testlearn::kcreference
    reference::lock
    testlearn::_Ltestlearn
    testlearn::date
    testlearn::timestamp

Scripts used in this script

    CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addORremoveCiteOrRefTLTag]	Parent Folder: [tagMenu]	Next Script: [changeSpellingOfTagCategory]
Script Name	changeSpellingOfKeywordOrNodeTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    changeSpellingOfKeywordOrNodeTag
    noCommasAllowed

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    #
    If [ $$stopTest = 1 //or $$citationMatch = "key" //or $$citationMatch = "node" //or $$citationMatch = "health" or $$citationMatch = "path" ]
    Exit Script [ ]
    End If
    #
    #First turn back any spelling changes made by dragging
    #text into field.
    Set Variable [ $$tag; Value:tagMenus::_Ltag ]
    Set Variable [ $tagSpelling; Value:tagMenus::tagSpelling ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    Set Variable [ $$tag ]
    Set Field [ tagMenus::tagSpelling; $tagSpelling ]
    #
    #If user approved spelling for this tag and no
    #changes have been made then cancel the script.
    If [ tagMenus::tag = tagMenus::tagSpelling and tagMenus::tag ≠ "" ]
    Exit Script [ ]
    End If
    #
    #If blank, put in ID number.
    If [ tagMenus::tag = "" ]
    If [ $$citationMatch = "key" ]
    Set Field [ tagMenus::tag; "keyword" & tagMenus::_Ltag ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ tagMenus::tag; "node" & tagMenus::_Ltag ]
    End If
    Show Custom Dialog [ Message: "Blank tag records are not allowed."; Buttons: “OK” ]
    End If
    #
    Perform Script [ “removeTextFormattingAndCommas” ]
    #
    #Get the key for this record for later in script
    #when it will be used to change the spelling in
    #any records tagged with this key, but of course
    #showing the old spelling of the tag. The spellling
    #unlike the key is belongs to the tagged record
    #not the tag, and so the spelling must be changed
    #in every record tagged.
    Set Variable [ $$key; Value:tagMenus::_Ltag ]
    #
    #Commit changes to the spellling.
    Commit Records/Requests
    Set Variable [ $newSpelling; Value:tagMenus::tag ]
    #
    #Get library name for use in comment below.
    Set Variable [ $libraryName; Value:TEMP::sectionName ]
    #
    #
    #
    #
    #
    #
    #BEGIN A - Check if a tag with this spelling
    #already exists in this section of the library.
    Loop
    New Window [ ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::tag; "==" & $newSpelling ]
    // Set Field [ tagMenus::ksection; TEMP::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    Exit Loop If [ Get (FoundCount) ≤ 1 ]
    If [ Get (FoundCount) > 1 ]
    Close Window [ Current Window ]
    Set Variable [ $turnRed; Value:$newSpelling ]
    Refresh Window
    #
    #If change was made to a new tag do this:
    If [ tagMenus::tagSpelling = "" ]
    If [ $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "A node with this exact spelling already exists. The system allows this, though for your sake add an initial and a picture to help you tell these nodes apart."; Buttons: “OK” ]
    Else If [ $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "Every tag in this library section must have a unique name. Change the spelling of the newly created tag or delete it."; Buttons: “change”, “delete”; Input #1: tagMenus::tag, "change spelling" ]
    End If
    #
    #If change was made to an old tag do this:
    Else If [ tagMenus::tagSpelling ≠ "" ]
    If [ $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "A node with this exact spelling already exists."; Buttons: “OK” ]
    Else If [ $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "Every tag in this library section must have a unique name. Change the spelling of current tag to something new or revert to its old spelling."; Buttons: “change”, “revert”; Input #1: tagMenus::tag, "change spelling" ]
    Commit Records/Requests
    End If
    End If
    Set Variable [ $turnRed ]
    #
    #Choice 2
    If [ Get ( LastMessageChoice ) = 2 ]
    #
    #Choice 2: node
    If [ $$citationMatch = "node" ]
    #If new tag, user has been informed and we can exit.
    If [ tagMenus::tagSpelling = "" ]
    Set Field [ tagMenus::tagSpelling; tagMenus::tag ]
    Refresh Window
    Exit Script [ ]
    #
    #If change is made to an existing tag, then go
    #to part B.
    Else If [ tagMenus::tagSpelling ≠ "" ]
    Set Variable [ $exit; Value:1 ]
    End If
    #
    #Choice 2: key
    Else If [ $$citationMatch = "key" ]
    If [ tagMenus::tagSpelling = "" ]
    #If user decided to delete new tag then delete it.
    Delete Record/Request [ No dialog ]
    Refresh Window
    Exit Script [ ]
    #
    #If change is made to an existing tag, then go
    #to part B.
    Else If [ tagMenus::tagSpelling ≠ "" ]
    Set Field [ tagMenus::tag; tagMenus::tagSpelling ]
    Refresh Window
    Exit Script [ ]
    End If
    End If
    #
    #Choice 1
    Else If [ Get ( LastMessageChoice ) = 1 ]
    #
    If [ $$citationMatch = "node" ]
    #
    #If new tag, user has been informed and we can exit.
    If [ tagMenus::tagSpelling = "" ]
    Set Field [ tagMenus::tagSpelling; tagMenus::tag ]
    Refresh Window
    Exit Script [ ]
    #
    #If change is made to an existing tag, then go
    #to part B.
    Else If [ tagMenus::tagSpelling ≠ "" ]
    Set Variable [ $exit; Value:1 ]
    End If
    #
    Else If [ $$citationMatch = "key" ]
    #If change was made to a new tag check if spelling
    #is already in use.
    Set Variable [ $newSpelling; Value:tagMenus::tag ]
    Refresh Window
    Perform Script [ “changeSpellingOfKeywordOrNodeTag” ]
    Exit Script [ ]
    #
    End If
    End If
    End If
    Exit Loop If [ $exit = 1 ]
    End Loop
    #
    #END A - Check if a tag with this spelling
    #already exists in this section of the library.
    #
    #
    #
    #
    #
    #
    #BEGIN B - Check if a tag with this spelling
    #already exists in the library.
    If [ $exit ≠ 1 ]
    Go to Layout [ “ReferenceMenu2keywordOrNodeSpellCheck” (tagMenus) ]
    #
    Enter Find Mode [ ]
    Set Field [ tagMenus::tag; "==" & $newSpelling ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #If duplicates exists ask user what they want to do.
    If [ Get (FoundCount) > 1 ]
    #
    #Show tags under their categories.
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    #Go to tag in question.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$key = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    // #Filemake has bug where if this commit records
    // #is not here, the comment box that comes up next
    // #will not allow the user to select option 2 until
    // #a few seconds after box appears. With commmit
    // #this hang up does not happen.
    // Commit Records/Requests
    #
    #Ask question.
    Show Custom Dialog [ Message: "'" & $newSpelling & "' already exists in library. Keep the new copy of it 1) under light grey category, or 2) remove it from there and add the dark grey category including its copy of '" & $newSpelling & "' to current library section, or"; Buttons: “3”, “2”, “1”; Input #1: tagMenus::tag, "3) Change spelling to make it unique." ]
    #
    #Choice 3, user wants to keep duplicate.
    If [ Get ( LastMessageChoice ) = 3 ]
    #Go on to Part C.
    #
    #
    #Choice 2, user wants to add orginal tag to
    #current library section and delete the
    #duplicate tag.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    #Make key being replaced the old key.
    Set Variable [ $$keyOLD; Value:$$key ]
    #
    #If there is more than one duplicate exit the scirpt
    #to allow the user to choose which duplicate to
    #to add to the current library.
    If [ Get (FoundCount) > 2 ]
    Pause/Resume Script [ Indefinitely ]
    Set Variable [ $$key; Value:tagMenus::_Ltag ]
    #
    #If user decided to use light grey category (the
    #category the new tag was created under instead
    #of using one of the old tags instead under one
    #of the dark grey categories) close window and
    #and exit the script.
    If [ $$key = $$keyOLD ]
    #
    Close Window [ Current Window ]
    #
    #Update spelling of word in case of future changes
    #to its spelling that would then trigger the first
    #part of this scirpt to udpate the spelling in the
    #tag list.
    Set Field [ tagMenus::tagSpelling; $newSpelling ]
    Set Variable [ $$key ]
    Set Variable [ $$keyOLD ]
    Exit Script [ ]
    End If
    #
    #Add category to current library section, which
    #of course includes the tag of interest.
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & ruleTagMenuGroups::ksection ]
    #
    #Go to duplicate and delete it.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$keyOLD = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Delete Record/Request [ No dialog ]
    Else If [ Get (FoundCount) = 2 ]
    #Go to new key and copy it.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$key ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$key; Value:tagMenus::_Ltag ]
    #
    #Add category to current library section, which
    #of course includes the tag/sujbect of interest.
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & ruleTagMenuGroups::ksection ]
    #
    #Go to duplicate and delete it.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$keyOLD = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Delete Record/Request [ No dialog ]
    End If
    #
    #Turn off recordLoad script and go to EDIT layout
    #to change keys in records tagged with old key.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Layout [ “Reference” (reference) ]
    #
    #Remove focus from other window so don't get
    #error 301: record in use, which prevents key from
    #being replaced.
    Set Variable [ $windowName; Value:Get (WindowName) ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    #The field selected does not matter. It serves
    #only to remove the focus.
    Go to Field [ tempSetup::kuserLocation ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    #The field selected does not matter. It serves
    #only to remove the focus.
    Go to Field [ testlearn::_Number ]
    Go to Field [ ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    #The field selected does not matter. It serves
    #only to remove the focus.
    Go to Field [ reference::_Number ]
    Go to Field [ ]
    End If
    Select Window [ Name: $windowName; Current file ]
    #
    #If user is consolidating a keyword.
    If [ $$citationMatch = "key" ]
    #
    #Replace old key with selected key to consolidate
    #primary records under one key.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ reference::kkeywordPrimary; $$keyOLD ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ reference::kkeywordPrimary; $$key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    Commit Records/Requests
    #
    #Replace old key with selected key to consolidate
    #other records under one key. Since the spelling
    #is the same only the key needs to be replaced.
    Enter Find Mode [ ]
    Set Field [ reference::kkeywordOther; $$keyOLD ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ reference::kkeywordOther; $$key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    #If user is consolidating a node.
    Else If [ $$citationMatch = "node" ]
    #
    #Replace old key with selected key to consolidate
    #primary records under one key.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ reference::knodePrimary; $$keyOLD ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ reference::knodePrimary; $$key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    #Replace old key with selected key to consolidate
    #other records under one key. Since the spelling
    #is the same only the key needs to be replaced.
    Enter Find Mode [ ]
    Set Field [ reference::knodeOther; $$keyOLD ]
    Perform Find [ ]
    If [ Get (LastError) ≠ 401 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ reference::knodeOther; $$key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    End If
    #
    #Return to original layout.
    Set Variable [ $$stoploadCitation ]
    #
    #Show added category to user with tag under it.
    Close Window [ Current Window ]
    #If earlier script took user to another window
    #to prevent 301 error, then closing the window
    #will put the focus on that window which is not
    #the correct window, thus this next step.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    Enter Find Mode [ ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #Sort records according to users wishes.
    If [ TEMP::sortKey = "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to newly added tag.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$key = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Highlight changes.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:tempSetup::kdefaultNodePrimary ]
    Set Variable [ $$key; Value:testlearn::kNodeOther ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    If [ $$citationMatch = "key" ]
    Set Variable [ $$citationItem; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $$node; Value:testlearn::kcKeywordOther ]
    Else If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Set Variable [ $$key; Value:testlearn::kNodeOther ]
    End If
    End If
    Else If [ Get (LastError) ≠ 112 ]
    If [ $$citationMatch = "key" ]
    Set Variable [ $$citationItem; Value:reference::kkeywordPrimary ]
    Set Variable [ $$node; Value:reference::kkeywordOther ]
    Else If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:reference::knodePrimary ]
    Set Variable [ $$key; Value:reference::knodeOther ]
    End If
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus" ]
    Refresh Window
    #
    #Clear variables only needed for this script.
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$key ]
    Set Variable [ $$keyOLD ]
    Set Variable [ $$keyOLD ]
    #
    #This halt step was placed after discovering when
    #adding a new group because it contains a tag that
    #is spelled the same as a tag already in this section,
    #the spell/duplicate check script ends with no field
    #selected, but then after the exit step was used the
    #the system would enter the field, even though no
    #scripts tell the system to take any further action after
    #the exit, and on scripts are waiting to finish after
    #the spell/duclicate check script finishes. This halt
    #script step takes care of the problem the exit does not.
    Go to Field [ ]
    Halt Script
    #
    #Choice 1, user wants to change spelling.
    Else If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $newSpelling ]
    Close Window [ Current Window ]
    Perform Script [ “changeSpellingOfKeywordOrNodeTag” ]
    Exit Script [ ]
    End If
    End If
    #
    #END B - Check if a tag with this spelling
    #already exists in the library.
    #
    #
    #
    #
    #
    #
    #BEGIN C - Change spelling of uniquely spelled tag.
    #
    Close Window [ Current Window ]
    #
    #If Part B was skipped due to spelling of node
    #clear the exit variable which is needed in Part C.
    End If
    Set Variable [ $exit ]
    #
    #
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #If the spellling of the tag has changed or if tag
    #is new do the following.
    If [ tagMenus::tag ≠ tagMenus::tagSpelling and tagMenus::tagSpelling ≠ "" ]
    #Commit records so user can change spelling.
    #Without commit records the system will not find
    #a newly added tag during the find part script.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Setup"; Current file ]
    Commit Records/Requests
    Else If [ Get (LastError) ≠ 112 ]
    Commit Records/Requests
    End If
    Else If [ Get (LastError) ≠ 112 ]
    Commit Records/Requests
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Replace the old spelling with the new one.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $oldSpelling; Value:tagMenus::tagSpelling ]
    Set Variable [ $$key; Value:tagMenus::_Ltag ]
    #Update spelling of word in case of future changes
    Set Field [ tagMenus::tagSpelling; $newSpelling ]
    #
    #Replace in Reference table.
    Go to Layout [ “Reference” (reference) ]
    #
    #
    #Error notification needs to be turned off in case
    #a tag that has never been used has its spelling
    #changed, in which case this unused tag will
    #will not be found and give the user a notification
    #to that effect.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    If [ $$citationMatch = "key" ]
    Set Field [ reference::kkeywordOther; $$key & ¶ ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ reference::knodeOther; $$key & ¶ ]
    End If
    Perform Find [ ]
    Loop
    #
    #Add comma to last item and before first item
    #in list for spelling changes script which has
    #to find words separated by commas.
    If [ $$citationMatch = "key" ]
    Set Variable [ $tags; Value:reference::OtherKeyWords ]
    Set Field [ reference::OtherKeyWords; ", ,, " & $tags & ", ,, " ]
    Set Variable [ $tags; Value:reference::OtherKeyWords ]
    Else If [ $$citationMatch = "node" ]
    #
    #Create list of values.
    Set Variable [ $tags; Value:reference::NodeOthers ]
    Set Field [ reference::NodeOthers; Substitute ( $tags ; "; " ; "¶" ) ]
    Set Variable [ $tags; Value:reference::NodeOthers ]
    #
    #Transfer list from variable to temporary list of records.
    #This list will be used next to change the spelling
    #of only one item. If there are two or more items
    #in this list with the same spelling, these other
    #items will not be affected. The user after all
    #only changed the spellling of one tag, not all the
    #tags spelled the same way.
    Go to Layout [ “TEMPnodeList” (TEMP) ]
    Set Variable [ $numberOfNodes; Value:ValueCount ( $tags ) ]
    Delete All Records [ No dialog ]
    Loop
    Exit Loop If [ $numberOfNodes = 0 ]
    New Record/Request
    Set Field [ TEMP::tempListNode; GetValue ( $tags ; $numberOfNodes ) ]
    Set Variable [ $numberOfNodes; Value:$numberOfNodes - 1 ]
    End Loop
    End If
    #
    #Change spelling of only one tag.
    If [ $$citationMatch = "key" ]
    Set Field [ reference::OtherKeyWords; Substitute ( $tags ; ", " & $oldSpelling & ", " ; ", " & $newSpelling & ", " ) ]
    Else If [ $$citationMatch = "node" ]
    #
    #Change spelling of one node. If two or more
    #nodes' spelling is identical leave others alone.
    #Reason: nodes can have same spelling and when
    #change spelling of one need to leave others alone
    #until user specfically changes their spelling too.
    Go to Record/Request/Page [ First ]
    Loop
    If [ TEMP::tempListNode = $oldSpelling ]
    Set Field [ TEMP::tempListNode; $newSpelling ]
    Set Variable [ $exit; Value:1 ]
    End If
    Exit Loop If [ $exit = 1 ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $exit ]
    #
    #Sort list alphabetically and recreate otherNode
    #field from list.
    Sort Records [ Specified Sort Order: TEMP::tempListNode; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ Last ]
    Set Variable [ $tags; Value:TEMP::tempListNode ]
    Loop
    Delete Record/Request [ No dialog ]
    Exit Loop If [ Get ( FoundCount ) = 0 ]
    Set Variable [ $list; Value:$tags ]
    Set Variable [ $tags; Value:TEMP::tempListNode & "; " & $list ]
    End Loop
    #
    #Now create one temp record. This is done because
    #the Setup window shows one temp record that
    #contains the current global default node, section, etc.
    #information. The system just deleted all temp
    #records, so unless one is now created, the user
    #will see a blank setup screen.
    New Record/Request
    #
    #Set the nodeOther field with new alphabetized list.
    Go to Layout [ “Reference” (reference) ]
    Set Field [ reference::NodeOthers; $tags ]
    End If
    #
    #Remove comma from front and back of list so it
    #looks nice.
    If [ $$citationMatch = "key" ]
    Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    Set Field [ reference::OtherKeyWords; Substitute ( $otherKeys ; ", ,, " ; "" ) ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Replace in TestLearn table.
    Go to Layout [ “learn4” (testlearn) ]
    #
    #
    #Error notification needs to be turned off in case
    #a tag that has never been used has its spelling
    #changed, in which case this unused tag will
    #will not be found and give the user a notification
    #to that effect.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    If [ $$citationMatch = "key" ]
    Set Field [ testlearn::kcKeywordOther; $$key & ¶ ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ testlearn::kNodeOther; $$key & ¶ ]
    End If
    Perform Find [ ]
    Loop
    #
    #Add comma to last item and before first item
    #in list for spelling changes script which has
    #to find words separated by commas.
    If [ $$citationMatch = "key" ]
    Set Variable [ $tags; Value:testlearn::OtherKeyWords ]
    Set Field [ testlearn::OtherKeyWords; ", ,, " & $tags & ", ,, " ]
    Set Variable [ $tags; Value:testlearn::OtherKeyWords ]
    Else If [ $$citationMatch = "node" ]
    #
    #Create list of values.
    Set Variable [ $tags; Value:testlearn::NodeOthers ]
    Set Field [ testlearn::NodeOthers; Substitute ( $tags ; "; " ; "¶" ) ]
    Set Variable [ $tags; Value:testlearn::NodeOthers ]
    #
    #Transfer list from variable to temporary list of records.
    #This list will be used next to change the spelling
    #of only one item. If there are two or more items
    #in this list with the same spelling, these other
    #items will not be affected. The user after all
    #only changed the spellling of one tag, not all the
    #tags spelled the same way.
    Go to Layout [ “TEMPnodeList” (TEMP) ]
    Set Variable [ $numberOfNodes; Value:ValueCount ( $tags ) ]
    Delete All Records [ No dialog ]
    Loop
    Exit Loop If [ $numberOfNodes = 0 ]
    New Record/Request
    Set Field [ TEMP::tempListNode; GetValue ( $tags ; $numberOfNodes ) ]
    Set Variable [ $numberOfNodes; Value:$numberOfNodes - 1 ]
    End Loop
    End If
    #
    #Change spelling.
    If [ $$citationMatch = "key" ]
    Set Field [ testlearn::OtherKeyWords; Substitute ( $tags ; ", " & $oldSpelling & ", " ; ", " & $newSpelling & ", " ) ]
    Else If [ $$citationMatch = "node" ]
    #
    #Change spelling of one node. If two or more
    #nodes spelling is identical leave others alone.
    #Reason: nodes can have same spelling and when
    #change spelling of one need to leave others alone
    #until user specfically changes their spelling too.
    Go to Record/Request/Page [ First ]
    Loop
    If [ TEMP::tempListNode = $oldSpelling ]
    Set Field [ TEMP::tempListNode; $newSpelling ]
    Set Variable [ $exit; Value:1 ]
    End If
    Exit Loop If [ $exit = 1 ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $exit ]
    #
    #Sort list alphabetically and recreate otherNode
    #field from list.
    Sort Records [ Specified Sort Order: TEMP::tempListNode; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ Last ]
    Set Variable [ $tags; Value:TEMP::tempListNode ]
    Loop
    Delete Record/Request [ No dialog ]
    Exit Loop If [ Get ( FoundCount ) = 0 ]
    Set Variable [ $list; Value:$tags ]
    Set Variable [ $tags; Value:TEMP::tempListNode & "; " & $list ]
    End Loop
    #
    #Now create one temp record. This is done because
    #the Setup window shows one temp record that
    #contains the current global default node, section, etc.
    #information. The system just deleted all temp
    #records, so unless one is now created, the user
    #will see a blank setup screen.
    New Record/Request
    #
    #Set the nodeOther field with new alphabetized list.
    Go to Layout [ “learn4” (testlearn) ]
    Set Field [ testlearn::NodeOthers; $tags ]
    End If
    #
    #Remove comma from front and back of list so it
    #looks nice.
    If [ $$citationMatch = "key" ]
    Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    Set Field [ testlearn::OtherKeyWords; Substitute ( $otherKeys ; ", ,, " ; "" ) ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Go to Layout [ original layout ]
    #Decided not to re-alaphabetize list as would
    #bog down system. User can do so by taking item
    #away and adding at back using the O button on
    #the Tag Menus window.
    // #Set record number so can return user to it when done.
    // Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    // #Now re-alphabetize and add new keyword to citation.
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Go to Record/Request/Page [ First ]
    // Select Window [ Name: "References"; Current file ]
    // If [ Get (LastError) = 112 ]
    // Select Window [ Name: "Learn"; Current file ]
    // Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    // Else If [ Get (LastError) ≠ 112 ]
    // Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    // End If
    // #
    // #Find and set first value in keyword list.
    // #It will not have a comma in front like the other items.
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Loop
    // If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    // Set Variable [ $newKey; Value:tagMenus::tag ]
    // #
    // Select Window [ Name: "References"; Current file ]
    // If [ Get (LastError) = 112 ]
    // Select Window [ Name: "Learn"; Current file ]
    // Set Field [ testlearn::OtherKeyWords; $newKey ]
    // Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    // Else If [ Get (LastError) ≠ 112 ]
    // Set Field [ reference::OtherKeyWords; $newKey ]
    // Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    // End If
    // End If
    // #
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Exit Loop If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // #
    // #Now add remaining keywords to list.
    // Go to Record/Request/Page [ Next; Exit after last ]
    // Loop
    // If [ tagMenus::_Ltag & "¶" = FilterValues ( $$key ; tagMenus::_Ltag & "¶" ) ]
    // Set Variable [ $newKey; Value:tagMenus::tag ]
    // #
    Select Window [ Name: "References"; Current file ]
    // If [ Get (LastError) = 112 ]
    // Select Window [ Name: "Learn"; Current file ]
    // Set Field [ testlearn::OtherKeyWords; $otherKeys & ", " & $newKey ]
    // Set Variable [ $otherKeys; Value:testlearn::OtherKeyWords ]
    // Else If [ Get (LastError) ≠ 112 ]
    // Set Field [ reference::OtherKeyWords; $otherKeys & ", " & $newKey ]
    // Set Variable [ $otherKeys; Value:reference::OtherKeyWords ]
    // End If
    // End If
    // #
    // Select Window [ Name: "Tag Menus"; Current file ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    #
    #Not sure why this update fails at this point.
    #The variable is correct, but the field fails to take
    #it, so I moved this this step up to right after old
    #spelling variable is created from tagSpelling field.
    // #Update spelling of word in case of future changes
    // #to its spelling that would then trigger the first
    // #part of this scirpt to udpate the spelling in the
    // #tag list.
    // Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    // Set Field [ tagMenus::tagSpelling; $newSpelling ]
    #
    #Sort records according to users wishes.
    If [ TEMP::sortKey = "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    #
    End If
    #
    #Update spelling of word in case of future changes
    #to its spelling that would then trigger the first
    #part of this scirpt to udpate the spelling in the
    #tag list.
    Set Field [ tagMenus::tagSpelling; $newSpelling ]
    #
    #END C - Change spelling of uniquely spelled tag.

Fields used in this script

    tagMenus::_Ltag
    tagMenus::tagSpelling
    tagMenus::tag
    TEMP::sectionName
    TEMP::ksection
    tagMenus::ksection
    ruleTagMenuGroups::ksection
    tagMenus::match
    <Missing Field>
    ruleTagSectionName::name
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tempSetup::kuserLocation
    testlearn::_Number
    reference::_Number
    reference::kkeywordPrimary
    reference::kkeywordOther
    reference::knodePrimary
    reference::knodeOther
    TEMP::sortKey
    tempSetup::kdefaultNodePrimary
    testlearn::kNodeOther
    testlearn::kKeywordPrimary
    testlearn::kcKeywordOther
    testlearn::kNodePrimary
    reference::OtherKeyWords
    reference::NodeOthers
    TEMP::tempListNode
    testlearn::OtherKeyWords
    testlearn::NodeOthers

Scripts used in this script

    insureEqualityOfSpellFields
    removeTextFormattingAndCommas
    changeSpellingOfKeywordOrNodeTag

Layouts used in this script

    ReferenceMenu2keywordOrNodeSpellCheck
    Reference
    TEMPnodeList
    learn4

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSpellingOfKeywordOrNodeTag]	Parent Folder: [tagMenu]	Next Script: [changeSpellingOfDetailCategory]
Script Name	changeSpellingOfTagCategory
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    changeSpellingOfTagCategory

Script Definition
Script Steps

    #
    #Stop script to speed up other scripts.
    If [ $$stopChangeSpellingOfTagCategory ≠ "" ]
    Set Variable [ $$stopChangeSpellingOfTagCategory ]
    Exit Script [ ]
    End If
    #
    #First turn back any spelling changes made by dragging
    #text into field.
    Set Variable [ $$tag; Value:ruleTagMenuGroups::_Lgroup ]
    Perform Script [ “CHUNKcheckForDragPasteChanges” ]
    Set Variable [ $$tag ]
    #
    #If node is currenlty locked then stop script, inform user.
    If [ nodeLockTagMenus::orderOrLock ≠ "" ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to edit records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user approved spelling for this tag and no
    #changes have been made then cancel the script.
    If [ ruleTagMenuGroups::name = ruleTagMenuGroups::nameSpelling ]
    Exit Script [ ]
    End If
    #
    #Commit changes to the spellling.
    Commit Records/Requests
    Set Variable [ $newSpelling; Value:ruleTagMenuGroups::name ]
    #
    #Check if a tag with this spelling already exists
    #in the library. Stop error capture in case spelling
    #is unique and thus no records will be found.
    New Window [ ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    Enter Find Mode [ ]
    Set Field [ groupTest::name; "==" & $newSpelling ]
    Set Field [ groupTest::match; $$citationMatch ]
    Perform Find [ ]
    #
    If [ Get (FoundCount) > 1 ]
    #Ask question.
    Close Window [ Current Window ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    Show Custom Dialog [ Message: "'" & $newSpelling & "' already exists in library. Each category in the " & $$citationMatch & " must have a unique name. Change the spelling or cancel the change."; Buttons: “change”, “cancel”; Input #1: ruleTagMenuGroups::name ]
    #
    #
    #Choice 1, user wants to change spelling.
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $newSpelling ]
    Perform Script [ “changeSpellingOfTagCategory” ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Exit Script [ ]
    End If
    End If
    #
    #If the spellling of the tag has changed or if new tag
    #update spelling of word in case of future changes
    #to its spelling that would then trigger the first
    #part of this scirpt to udpate the spelling in the
    #tag list.
    Close Window [ Current Window ]
    Set Field [ ruleTagMenuGroups::nameSpelling; $newSpelling ]

Fields used in this script

    ruleTagMenuGroups::_Lgroup
    nodeLockTagMenus::orderOrLock
    ruleTagMenuGroups::nameSpelling
    ruleTagMenuGroups::name
    groupTest::name
    groupTest::match
    <Missing Field>

Scripts used in this script

    CHUNKcheckForDragPasteChanges
    changeSpellingOfTagCategory

Layouts used in this script

    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSpellingOfTagCategory]	Parent Folder: [tagMenu]	Next Script: [noCommasAllowed]
Script Name	changeSpellingOfDetailCategory
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    changeSpellingOfDetailCategory

Script Definition
Script Steps

    #
    #If user approved spelling for this tag and no
    #changes have been made then cancel the script.
    If [ ruleTagMenuTestGroups::name = ruleTagMenuTestGroups::nameSpelling ]
    Exit Script [ ]
    End If
    #
    #Commit changes to the spellling.
    Commit Records/Requests
    Set Variable [ $newSpelling; Value:ruleTagMenuTestGroups::name ]
    Set Variable [ $match; Value:ruleTagMenuTestGroups::match ]
    #
    #Check if a tag with this spelling already exists
    #in the library.
    New Window [ ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    #
    Enter Find Mode [ ]
    Set Field [ groupTest::name; "==" & $newSpelling ]
    Set Field [ groupTest::match; $Match ]
    Perform Find [ ]
    #
    If [ Get (FoundCount) > 1 ]
    #Ask question.
    Close Window [ Current Window ]
    Set Field [ ruleTagMenuTestGroups::name; ruleTagMenuTestGroups::nameSpelling ]
    Show Custom Dialog [ Message: "'" & $newSpelling & "' already exists. Each category for " & TEMP::testName & " must have a unique name. Change the spelling or cancel the change."; Buttons: “change”, “cancel”; Input #1: ruleTagMenuTestGroups::name ]
    #
    #
    #Choice 1, user wants to change spelling.
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Variable [ $newSpelling ]
    Perform Script [ “changeSpellingOfDetailCategory” ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Exit Script [ ]
    End If
    End If
    #
    #If the spellling of the tag has changed or if new tag
    #update spelling of word in case of future changes
    #to its spelling that would then trigger the first
    #part of this scirpt to udpate the spelling in the
    #tag list.
    Close Window [ Current Window ]
    Set Field [ ruleTagMenuTestGroups::nameSpelling; $newSpelling ]

Fields used in this script

    ruleTagMenuTestGroups::name
    ruleTagMenuTestGroups::nameSpelling
    ruleTagMenuTestGroups::match
    groupTest::name
    groupTest::match
    TEMP::testName
    <Missing Field>

Scripts used in this script

    changeSpellingOfDetailCategory

Layouts used in this script

    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSpellingOfDetailCategory]	Parent Folder: [tagMenu]	Next Script: [deleteKeywordTag]
Script Name	noCommasAllowed
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Filter ( tagMenus::tag ; "," ) = "," and $$citationMatch = "key" ]
    Set Variable [ $tag; Value:tagMenus::tag ]
    Show Custom Dialog [ Message: "commas prevent system from keeping track of this item"; Buttons: “OK” ]
    Set Field [ tagMenus::tag; Substitute ( $tag ; "," ; "" ) ]
    Else If [ Filter ( tagMenus::tag ; ";" ) = ";" and $$citationMatch = "node" ]
    Set Variable [ $tag; Value:tagMenus::tag ]
    Show Custom Dialog [ Message: "semicolons prevent system from keeping track of this item"; Buttons: “OK” ]
    Set Field [ tagMenus::tag; Substitute ( $tag ; ";" ; "" ) ]
    End If
    If [ $$changeSpelling = 1 ]
    Set Variable [ $$changeSpelling; Value:2 ]
    Perform Script [ “changeSpellingOfKeywordOrNodeTag” ]
    End If

Fields used in this script

    tagMenus::tag

Scripts used in this script

    changeSpellingOfKeywordOrNodeTag

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [noCommasAllowed]	Parent Folder: [tagMenu]	Next Script: [deleteNodeTag]
Script Name	deleteKeywordTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    deleteNodeTag

Script Definition
Script Steps

    #
    #Decided to allow user to delete tags created by a locked
    #user, but not create tags using a locked user.
    #User needs full control over their tags.
    #If node is currenlty locked then stop script, inform user.
    If [ nodeLockTagMenus::orderOrLock ≠ "" ]
    // Show Custom Dialog [ Message: "FYI — This record is part of a set of records that can be updated. You can delete it, but if you update your library this record will be put back if it is part of the update."; Buttons: “OK” ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTagMenus::tag & " -- in the setup tag window and enter the password to unlock it so that you can delete it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user is looking at Node switch to that script.
    If [ $$citationMatch = "node" ]
    Perform Script [ “deleteNodeTag” ]
    Exit Script [ ]
    End If
    #
    #Exit field so user can see red delete
    #formatting later on.
    Go to Field [ ]
    #
    #Prevent all record load scripts (they slow down
    #this script and are uneccessary).
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Set variables to conditionally format section to
    #be deleted, and its record number so if the
    #user cancels the delete, the system can return
    #to this record.
    Set Variable [ $delete; Value:tagMenus::_Ltag ]
    Set Variable [ $deleteName; Value:tagMenus::tag ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $$addTagToCitation; Value:1 ]
    Set Variable [ $section; Value:TEMP::ksection ]
    Set Variable [ $group; Value:tagMenus::kGroupOrTest ]
    #
    #Because there may be no records found, stop
    #the system from informing the user of this.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Open a new window and look for tag in both
    #primary and other node fields.
    New Window [ ]
    #
    Loop
    Loop
    #
    #The delete variable is used only to identify the
    #node the user clicked the delete button for.
    #The check variable is for every keyword in a group
    #that the system needs to see if it is in use.
    Set Variable [ $check; Value:tagMenus::_Ltag ]
    #
    #Clear the inUse variable before each run thru
    #the loop. If not cleared, then last time thru
    #if this variable had a value in it, that value will
    #stay in it even if no finds are made, which then
    #tells the system that a no find keyword, has finds.
    #So the system must clear this variable before each
    #run thru the loop.
    Set Variable [ $inUse ]
    #
    #See if keyword is used by any learn records.
    #Look in main kprimary...
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kKeywordPrimary; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    #
    #Look in main kother...
    Enter Find Mode [ ]
    Set Field [ testlearn::kcKeywordOther; $check & ¶ ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Extend Found Set [ ]
    If [ Get (FoundCount) ≠ 0 ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " learn" ]
    End If
    #
    #See if keyword is used by any discovery records.
    #Check in discovery primary...
    Enter Find Mode [ ]
    Set Field [ testlearn::kKeywordPrimary; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::ktest; "*" ]
    Perform Find [ ]
    #
    #Check in other...
    Enter Find Mode [ ]
    Set Field [ testlearn::kcKeywordOther; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::ktest; "*" ]
    Extend Found Set [ ]
    #
    #See if keyword is used by any reference records.
    #Check in primary...
    Go to Layout [ “Reference” (reference) ]
    Enter Find Mode [ ]
    Set Field [ reference::kkeywordPrimary; $check ]
    Set Field [ reference::kcsection; $section ]
    Perform Find [ ]
    #
    #Check in other...
    Enter Find Mode [ ]
    Set Field [ reference::kkeywordOther; $check ]
    Set Field [ reference::kcsection; $section ]
    Extend Found Set [ ]
    If [ Get (FoundCount) ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " reference" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " reference" ]
    End If
    End If
    #
    #Return to keyword layout.
    Go to Layout [ “ltagNK1” (tagMenus) ]
    #
    #If the current keyword is in use in the section of
    #the database from which the delete was requested,
    #inform the user of this, and skip the next
    #steps of this loop and the next loop, which.
    #is for checking if keyword is in use in other sections.
    If [ tagMenus::_Ltag = $delete and $inUse ≠ "" ]
    #
    #If the keyword was in use in the current section
    #then do not look for it in other sections.
    Set Variable [ $section ]
    Exit Loop If [ tagMenus::_Ltag = $delete and $inUse ≠ "" ]
    End If
    #
    #If the current keyword is not in use in the section
    #of the database from which this delete was started,
    #capture this information.
    If [ $delete = tagMenus::_Ltag and $inUse = "" ]
    Set Variable [ $deleteNotInUse; Value:"not in use" ]
    End If
    #
    #Exit the loop if there is only 1 member of this group
    #or if the system just checked for the intial delete
    #keyword in all sections of the database, which
    #is why the section variable would be blank.
    #In the latter case, the loop would be coming round
    #after checking all sections in the database.
    #At first the loop is confined to looking at all keywords
    #in this section. Once it has done that, a script
    #step below exits the loop only to enter a loop
    #that clears the section variable and causes the
    #system to re-enter this loop, only with a blank
    #section variable so it will look in all sections of the
    #database. When it reaches this step, that blank
    #section variable will force it out of this loop and
    #a similar script step in the outer loop will do the
    #same thereby allowing the system to follow the
    #remainder of this script to report on the findings
    #made during these discovery loops.
    Exit Loop If [ ValueCount ( ruleTagMenuGroups::ksection ) = 1 or $section = "" ]
    #
    #If the current keyword is not in use in this section
    #then check if any of the other keywords in its group
    #are in use in this section. These next steps apply
    #to discovering inUse info about the other keywords
    #in the original keywords group.
    #
    #Make a list of all keywords in the group that are
    #linked to records in this section AND are in use
    #(thus the inUse variable will not be blank).
    If [ $delete ≠ tagMenus::_Ltag and $inUse ≠ "" ]
    Set Variable [ $add; Value:If ( $nodeName = "" ; "" ; $nodeName & "; " ) ]
    Set Variable [ $nodeName; Value:$add & tagMenus::tag ]
    End If
    #
    #Capture any InUse variable content for later use
    #use in the script.
    Set Variable [ $addToSectionInUse; Value:$sectionInUse ]
    Set Variable [ $sectionInUse; Value:$inUse & $addToSectionInUse ]
    #
    #Go the next record. As this delete may have
    #been started on a record in the middle of the group
    #these next steps insure that all records are checked
    #even if that requires going to the first record
    #in order to eventually loop thru all records in a
    #group back to the initial record.
    Go to Record/Request/Page [ Next ]
    If [ Get ( LastError ) = 101 ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #There may be more than one group of keywords
    #in a section, so this next loop insures that the
    #script bypasses other groups' nodes.
    If [ tagMenus::kGroupOrTest ≠ $group ]
    Loop
    Go to Record/Request/Page [ Next ]
    If [ Get ( LastError ) = 101 ]
    Go to Record/Request/Page [ First ]
    End If
    Exit Loop If [ tagMenus::kGroupOrTest = $group ]
    End Loop
    End If
    #
    #Exit the loop when the intial record is reached
    #for the second time.
    Exit Loop If [ $delete = tagMenus::_Ltag ]
    End Loop
    #
    #Exit the loop if the system is on the initial record
    #and this record is in use and all sections of
    #the database have been checked.
    Exit Loop If [ tagMenus::_Ltag = $delete and $inUse ≠ "" and $section = "" ]
    Exit Loop If [ ValueCount ( ruleTagMenuGroups::ksection ) = 1 or $section = "" ]
    #
    #If the current keyword is not in use in the section
    #of the database where the delete was started,
    #make sure it is not in use in any other section.
    Set Variable [ $section ]
    #
    End Loop
    #
    Close Window [ Current Window ]
    #
    #
    #
    #
    #Report on findings and if none delete keyword.
    #
    #
    #
    #
    #If the keyword in question was not found in the
    #section the user is deleting it from...
    If [ $deleteNotInUse ≠ "" ]
    #
    #But this keyword is in use in other sections...
    If [ $inUse ≠ "" ]
    #
    #If the other keywords in the keyword's group are in
    #use in this section, then they must be unlinked
    #from the records using them before the group
    #all these keywords belong to can be removed from
    #this section.
    If [ $nodeName ≠ "" ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Show Custom Dialog [ Message: "This keyword cannot be deleted as it in use in other sections of the database. You can remove it from this section after you unlink these other keywords from this group: " & $nodeName & "."; Buttons: “OK” ]
    Exit Script [ ]
    #
    #If the other keywords in the keyword's group are not
    #in use BUT some of the other default items
    #are part of this group, then this group cannot
    # be removed from this section of the database.
    Else If [ $nodeName = "" and $defaultNodeList ≠ "" ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Show Custom Dialog [ Message: "This keyword cannot be deleted as it in use in other sections of the database. You can remove it from this section after the following keywords from this group are unlinked as defaults: " & $defaultNodeList; Buttons: “OK” ]
    Exit Script [ ]
    #
    #If the other keywords in the keyword's group are not
    #in use and none of the other default items
    #are part of this group, then this group can be
    #removed from this section of the database.
    #The user is given the option to do this removal.
    Else If [ $nodeName = "" and $defaultNodeList = "" ]
    Refresh Window
    Show Custom Dialog [ Message: "This keyword cannot be deleted as it in use in other sections of the database. You can remove it from this section along with all the other keywords in its group. None of them are being used in this section."; Buttons: “cancel”, “remove” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    #
    #If the user chooses not to remove the group
    #everything goes back to the way it was.
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    #If the user choses to proceed with the removal,
    #the section key is removed from the keyword group's
    #key chain.
    Set Field [ ruleTagMenuGroups::ksection; Substitute ( ruleTagMenuGroups::ksection & ¶ ; TEMP::ksection & ¶ ; "" ) ]
    #
    #For some reason, Filemaker will not remove paragraph
    #character along with variable, so can end up with
    #huge list of blank variables if this next part of the
    #script is not performed to delete empty variables.
    Set Variable [ $sectionVariableNumber; Value:ValueCount ( ruleTagMenuGroups::ksection ) ]
    Loop
    If [ GetValue ( ruleTagMenuGroups::ksection ; $sectionVariableNumber ) ≠ "" ]
    Set Variable [ $sectionKeyMinusBlanks; Value:GetValue ( ruleTagMenuGroups::ksection ; $sectionVariableNumber ) & ¶ ]
    End If
    Set Variable [ $sectionVariableNumber; Value:$sectionVariableNumber - 1 ]
    Exit Loop If [ $sectionVariableNumber = 0 ]
    End Loop
    Set Field [ ruleTagMenuGroups::ksection; $sectionKeyMinusBlanks ]
    #
    #A find is performed to show the remaining keyword
    #groups for this section.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "key" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by group which is set by editCitation script.
    If [ TEMP::sortKey = "cat" or TEMP::sortKey = "" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ $$citationitem = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$citationitem ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    End If
    #
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    End If
    Exit Script [ ]
    End If
    End If
    #
    #If the keyword being deleted was not found in
    #use in any sections of the database then before
    #deleting it make sure the user really wants it deleted.
    Set Variable [ $group ]
    Refresh Window
    Show Custom Dialog [ Message: "Delete current keyword?"; Buttons: “cancel”, “delete” ]
    Set Variable [ $group; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $deleteGroup; Value:ruleTagMenuGroups::name ]
    #
    #If the user cancels, stop the delete.
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #If the user says yes, first make sure the record
    #is not the last record in a group. If it is and
    #the system deleted the record without deleting
    #the group too, this group would become
    #an orphan as only categories that have records
    #attached to them show up for the user to add
    #more records uner them. So the group
    #record must also be deleted if this is the last
    #record under it.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    New Window [ Name: "delete tag" ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::kGroupOrTest; $group ]
    Perform Find [ ]
    #
    #If there are more records under this cateogry
    #then the system deletes the current record without
    #any more user input.
    If [ Get (FoundCount) ≠ 1 ]
    Close Window [ Name: "Delete Tag"; Current file ]
    Delete Record/Request [ No dialog ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #BUT if only one record is found user is asked
    #if they want to delete the group too.
    Else If [ Get (FoundCount) = 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #The records are sorted by group to show
    #the user which group is going to be deleted.
    If [ TEMP::sortKey ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    Show Custom Dialog [ Title: "!"; Message: "Deleting " & $deleteName & " will also delete its group -- " & $deleteGroup & " -- as it is the last tag in this group."; Buttons: “Cancel”, “Delete” ]
    #
    #If the user says yes, then delete both the tag and
    #the group record.
    If [ Get ( LastMessageChoice ) = 2 ]
    #
    #Delete tag.
    Delete Record/Request [ No dialog ]
    #
    #Delete group.
    Select Window [ Name: "delete tag"; Current file ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $group ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    End If
    End If
    End If
    Close Window [ Name: "Delete Tag"; Current file ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    End If
    #
    #
    #
    #
    #
    If [ $inUse ≠ "" ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Show Custom Dialog [ Message: "This keyword cannot be deleted as it in use x number of times in the following modules (main windows): " & $inUse & "."; Buttons: “OK” ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    End If

Fields used in this script

    nodeLockTagMenus::orderOrLock
    nodeLockTagMenus::tag
    tagMenus::_Ltag
    tagMenus::tag
    TEMP::ksection
    tagMenus::kGroupOrTest
    testlearn::kKeywordPrimary
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kcKeywordOther
    testlearn::ktest
    reference::kkeywordPrimary
    reference::kcsection
    reference::kkeywordOther
    ruleTagMenuGroups::ksection
    tagMenus::match
    TEMP::sortKey
    ruleTagSectionName::name
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagTable::kGroupOrTest
    groupTest::_Lgroup

Scripts used in this script

    deleteNodeTag

Layouts used in this script

    tableTestLearn
    Reference
    ltagNK1
    tableTag
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteKeywordTag]	Parent Folder: [tagMenu]	Next Script: [deleteMHOCSPtags]
Script Name	deleteNodeTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    deleteKeywordTag

Script Definition
Script Steps

    #
    #If the node being checked for deletion is in use
    #as a default node then stop the script and inform
    #the user of this fact.
    If [ FilterValues ( TEMP::kdefaultNodeOther ; tagMenus::_Ltag & "¶" ) or TEMP::kdefaultNodePrimary = tagMenus::_Ltag or TEMP::kdefaultNodeTestSubject = tagMenus::_Ltag ]
    Show Custom Dialog [ Message: "This node is currently selected as a default and cannot be deleted."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user is looking at keyword switch to that script.
    If [ $$citationMatch = "key" ]
    Perform Script [ “deleteKeywordTag” ]
    Exit Script [ ]
    End If
    #
    #Exit field so user can see red delete
    #formatting later on.
    Go to Field [ ]
    #
    #Prevent all record load scripts (they slow down
    #this script and are uneccessary).
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Set variables to conditionally format section to
    #be deleted, and its record number so if the
    #user cancels the delete, the system can return
    #to this record.
    Set Variable [ $delete; Value:tagMenus::_Ltag ]
    Set Variable [ $deleteName; Value:tagMenus::tag ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $$addTagToCitation; Value:1 ]
    Set Variable [ $section; Value:TEMP::ksection ]
    Set Variable [ $group; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $groupName; Value:ruleTagMenuGroups::name ]
    #
    #Because there may be no records found, stop
    #the system from informing the user of this.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Open a new window and look for tag in both
    #primary and other node fields.
    New Window [ ]
    #
    #See if there is only one section and is so if this node
    #is the section's creator.
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::match; "section" ]
    Perform Find [ ]
    If [ Get (FoundCount) = 1 ]
    #
    #If the current node is the current section's creator note this.
    If [ groupTest::kRecordCreatorNode = $delete ]
    Set Variable [ $lastSectionCreatorNode; Value:1 ]
    Set Field [ groupTest::CaptionORinuseCheck; $deleteName ]
    Set Field [ groupTest::defaultSectionInfo; $groupName ]
    End If
    #
    #If the current node is not current section's creator
    #check the other sections.
    Else
    Enter Find Mode [ ]
    Set Field [ groupTest::match; "section" ]
    Set Field [ groupTest::kRecordCreatorNode; $delete ]
    Perform Find [ ]
    #
    #If the current node is creator of more than one
    #node note this.
    If [ Get (FoundCount) > 1 ]
    Set Variable [ $SectionCreatorNode; Value:1 ]
    Set Variable [ $deleteNotInUse; Value:"not in use" ]
    End If
    #
    #Update sections with current node and node group names.
    Go to Record/Request/Page [ First ]
    Loop
    Set Field [ groupTest::CaptionORinuseCheck; $deleteName ]
    Set Field [ groupTest::defaultSectionInfo; $groupName ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    End If
    Go to Layout [ “defaultNode1” (tagMenus) ]
    #
    #
    Loop
    Loop
    #
    #The delete variable is used only to identify the
    #node the user clicked the delete button for.
    #The check variable is for every node in a group
    #that the system needs to see if it is in use.
    Set Variable [ $check; Value:tagMenus::_Ltag ]
    #
    #If the node being checked for deletion is in use
    #as a default node then stop the script and inform
    #the user of this fact.
    If [ FilterValues ( TEMP::kdefaultNodeOther ; tagMenus::_Ltag & "¶" ) or TEMP::kdefaultNodePrimary = tagMenus::_Ltag or TEMP::kdefaultNodeTestSubject = tagMenus::_Ltag ]
    If [ $defaultNodeList = "" ]
    Set Variable [ $defaultNodeList; Value:tagMenus::tag & "." ]
    Else If [ $defaultNodeList ≠ "" ]
    Set Variable [ $addDefaultNodeName; Value:$defaultNodeList ]
    Set Variable [ $defaultNodeList; Value:tagMenus::tag & "; " & $addDefaultNodeName ]
    End If
    End If
    #
    #Clear the inUse variable before each run thru
    #the loop. If not cleared, then last time thru
    #if this variable had a value in it, that value will
    #stay in it even if no finds are made, which then
    #tells the system that a no find node, has finds.
    #So the system must clear this variable before each
    #run thru the loop.
    Set Variable [ $inUse ]
    #
    #See if node is used by any learn records.
    #Look in main kprimary...
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kNodePrimary; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    #
    #Look in main kother...
    Enter Find Mode [ ]
    Set Field [ testlearn::kNodeOther; $check & ¶ ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Extend Found Set [ ]
    If [ Get (FoundCount) ≠ 0 ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " learn" ]
    End If
    #
    #See if node is used by any discovery records.
    #Check in discovery primary...
    Enter Find Mode [ ]
    Set Field [ testlearn::kNodePrimary; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::ktest; "*" ]
    Perform Find [ ]
    #
    #Check in other...
    Enter Find Mode [ ]
    Set Field [ testlearn::kNodeOther; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::ktest; "*" ]
    Extend Found Set [ ]
    #
    #Check in testSubject...
    Enter Find Mode [ ]
    Set Field [ testlearn::ktestSubject; $check ]
    Set Field [ testlearn::kcsection; $section ]
    Set Field [ testlearn::ktest; "*" ]
    Extend Found Set [ ]
    If [ Get (FoundCount) ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " test discovery" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " test discovery" ]
    End If
    End If
    #
    #See if node is used by any reference records.
    #Check in primary...
    Go to Layout [ “Reference” (reference) ]
    Enter Find Mode [ ]
    Set Field [ reference::knodePrimary; $check ]
    Set Field [ reference::kcsection; $section ]
    Perform Find [ ]
    #
    #Check in other...
    Enter Find Mode [ ]
    Set Field [ reference::knodeOther; $check ]
    Set Field [ reference::kcsection; $section ]
    Extend Found Set [ ]
    If [ Get (FoundCount) ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " reference" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " reference" ]
    End If
    End If
    #
    #See if node is used by any test focus records.
    Go to Layout [ “tableTestSubjectFocus” (tagTestSubjectLocation) ]
    Enter Find Mode [ ]
    Set Field [ tagTestSubjectLocation::knode; $check ]
    Set Field [ tagTestSubjectLocation::ksection; $section ]
    Perform Find [ ]
    If [ Get (FoundCount) ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " test focus" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " test focus" ]
    End If
    End If
    #
    #See if node is used by any section records.
    #Check in primary...
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::defaultSectionInfo; $check ]
    Set Field [ groupTest::ksection; $section ]
    Perform Find [ ]
    #
    #Check in other...
    Enter Find Mode [ ]
    Set Field [ groupTest::CaptionORinuseCheck; $check ]
    Set Field [ groupTest::ksection; $section ]
    Extend Found Set [ ]
    If [ Get (FoundCount) ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " section" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " section" ]
    End If
    End If
    #
    #Return to node layout.
    Go to Layout [ “defaultNode1” (tagMenus) ]
    #
    #If the current node is in use in the section of
    #the database from which the delete was requested,
    #inform the user of this, and skip the next
    #steps of this loop and the next loop, which.
    #is for checking if node is in use in other sections.
    If [ tagMenus::_Ltag = $delete and $inUse ≠ "" ]
    #
    #If the node was in use in the current section
    #then do not look for it in other sections.
    Set Variable [ $section ]
    Exit Loop If [ tagMenus::_Ltag = $delete and $inUse ≠ "" ]
    End If
    #
    #If the current node is not in use in the section
    #of the database from which this delete was started,
    #capture this information.
    If [ $delete = tagMenus::_Ltag and $inUse = "" ]
    Set Variable [ $deleteNotInUse; Value:"not in use" ]
    End If
    #
    #Exit the loop if there is only 1 member of this group
    #or if the system just checked for the intial delete
    #node in all sections of the database, which
    #is why the section variable would be blank.
    #In the latter case, the loop would be coming round
    #after checking all sections in the database.
    #At first the loop is confined to looking at all nodes
    #in this section. Once it has done that, a script
    #step below exits the loop only to enter a loop
    #that clears the section variable and causes the
    #system to re-enter this loop, only with a blank
    #section variable so it will look in all sections of the
    #database. When it reaches this step, that blank
    #section variable will force it out of this loop and
    #a similar script step in the outer loop will do the
    #same thereby allowing the system to follow the
    #remainder of this script to report on the findings
    #made during these discovery loops.
    Exit Loop If [ ValueCount ( ruleTagMenuGroups::ksection ) = 1 or $section = "" ]
    #
    #If the current node is not in use in this section
    #then check if any of the other nodes in its group
    #are in use in this section. These next steps apply
    #to discovering inUse info about the other nodes
    #in the original nodes group.
    #
    #Make a list of all nodes in the group that are
    #linked to records in this section AND are in use
    #(thus the inUse variable will not be blank).
    If [ $delete ≠ tagMenus::_Ltag and $inUse ≠ "" ]
    Set Variable [ $add; Value:If ( $nodeName = "" ; "" ; $nodeName & "; " ) ]
    Set Variable [ $nodeName; Value:$add & tagMenus::tag ]
    End If
    #
    #Capture any InUse variable content for later use
    #use in the script.
    Set Variable [ $addToSectionInUse; Value:$sectionInUse ]
    Set Variable [ $sectionInUse; Value:$inUse & $addToSectionInUse ]
    #
    #Go the next record. As this delete may have
    #been started on a record in the middle of the group
    #these next steps insure that all records are checked
    #even if that requires going to the first record
    #in order to eventually loop thru all records in a
    #group back to the initial record.
    Go to Record/Request/Page [ Next ]
    If [ Get ( LastError ) = 101 ]
    Go to Record/Request/Page [ First ]
    End If
    #
    #There may be more than one group of nodes
    #in a section, so this next loop insures that the
    #script bypasses other groups' nodes.
    If [ tagMenus::kGroupOrTest ≠ $group ]
    Loop
    Go to Record/Request/Page [ Next ]
    If [ Get ( LastError ) = 101 ]
    Go to Record/Request/Page [ First ]
    End If
    Exit Loop If [ tagMenus::kGroupOrTest = $group ]
    End Loop
    End If
    #
    #Exit the loop when the intial record is reached
    #for the second time.
    Exit Loop If [ $delete = tagMenus::_Ltag ]
    End Loop
    #
    #Exit the loop if the system is on the initial record
    #and this record is in use and all sections of
    #the database have been checked.
    Exit Loop If [ tagMenus::_Ltag = $delete and $inUse ≠ "" and $section = "" ]
    Exit Loop If [ ValueCount ( ruleTagMenuGroups::ksection ) = 1 or $section = "" ]
    #
    #If the current node is not in use in the section
    #of the database where the delete was started,
    #make sure it is not in use in any other section.
    Set Variable [ $section ]
    #
    End Loop
    #
    Close Window [ Current Window ]
    #
    #
    #
    #
    #Report on findings and if none delete node.
    #
    #
    #
    #
    #If the node in question was not found in the
    #section the user is deleting it from...
    If [ $deleteNotInUse ≠ "" ]
    #
    #But this node is in use in other sections...
    If [ $inUse ≠ "" or $SectionCreatorNode = 1 ]
    #
    #If the other nodes in the node's group are in
    #use in this section, then they must be unlinked
    #from the records using them before the group
    #all these nodes belong to can be removed from
    #this section.
    If [ $nodeName ≠ "" ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Show Custom Dialog [ Message: "This node cannot be deleted as it in use in other sections of the database. You can remove it from this section after you unlink these other nodes from this group: " & $nodeName & "."; Buttons: “OK” ]
    Exit Script [ ]
    #
    #If the other nodes in the node's group are not
    #in use BUT some of the other default items
    #are part of this group, then this group cannot
    # be removed from this section of the database.
    Else If [ $nodeName = "" and $defaultNodeList ≠ "" ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Show Custom Dialog [ Message: "This node cannot be deleted as it in use in other sections of the database. You can remove it from this section after the following nodes from this group are unlinked as defaults: " & $defaultNodeList; Buttons: “OK” ]
    Exit Script [ ]
    #
    #If the other nodes in the node's group are not
    #in use and none of the other default items
    #are part of this group, then this group can be
    #removed from this section of the database.
    #The user is given the option to do this removal.
    Else If [ $nodeName = "" and $defaultNodeList = "" or $SectionCreatorNode = 1 ]
    Refresh Window
    Show Custom Dialog [ Message: "This node cannot be deleted as it in use in other sections of the database. You can remove it from this section along with all the other nodes in its group. None of them are being used in this section."; Buttons: “cancel”, “remove” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    #
    #If the user chooses not to remove the group
    #everything goes back to the way it was.
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    #If the user choses to proceed with the removal,
    #the section key is removed from the node group's
    #key chain.
    Set Field [ ruleTagMenuGroups::ksection; Substitute ( ruleTagMenuGroups::ksection & ¶ ; TEMP::ksection & "¶" ; "" ) ]
    #
    #For some reason, Filemaker will not remove paragraph
    #character along with variable, so can end up with
    #huge list of blank variables if this next part of the
    #script is not performed to delete empty variables.
    Set Variable [ $sectionVariableNumber; Value:ValueCount ( ruleTagMenuGroups::ksection ) ]
    Loop
    If [ GetValue ( ruleTagMenuGroups::ksection ; $sectionVariableNumber ) ≠ "" ]
    Set Variable [ $sectionKeyMinusBlanks; Value:GetValue ( ruleTagMenuGroups::ksection ; $sectionVariableNumber ) & ¶ ]
    End If
    Set Variable [ $sectionVariableNumber; Value:$sectionVariableNumber - 1 ]
    Exit Loop If [ $sectionVariableNumber = 0 ]
    End Loop
    Set Field [ ruleTagMenuGroups::ksection; $sectionKeyMinusBlanks ]
    #
    #A find is performed to show the remaining node
    #groups for this section.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by group which is set by editCitation script.
    If [ TEMP::sortNode = "cat" or TEMP::sortNode = "" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortNode = "abc" ]
    Sort Records [ Specified Sort Order: ruleTagSectionName::name; ascending tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to citation record's current selection or to first record.
    #Because user may click anywhere to go to a record
    #all keys for all menu items must uploaded
    #until one is found that matches and then the
    #$$citationItem variable can be set.
    #Like when the user clicks in a non field area
    #a space between fields that then tells filemaker
    #to go that record but not to field belonging to
    #that record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$citationitem = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$citationitem ≠ tagMenus::_Ltag ]
    Go to Record/Request/Page [ First ]
    End If
    #
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "Setup"; Current file ]
    Refresh Window
    #
    #goto Tag Menus window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    End If
    Exit Script [ ]
    End If
    End If
    #
    #
    #
    #If node is parent of library's last remaining section
    #tell user this and exit the script.
    If [ $lastSectionCreatorNode = 1 ]
    Show Custom Dialog [ Message: "This node is the parent of the last section in this library. It cannot be deleted."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #
    #
    #
    #If the node being deleted was not found in
    #use in any sections of the database then before
    #deleting it make sure the user really wants it deleted.
    Set Variable [ $group ]
    Refresh Window
    Show Custom Dialog [ Message: "Delete current node?"; Buttons: “cancel”, “delete” ]
    Set Variable [ $group; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $deleteGroup; Value:ruleTagMenuGroups::name ]
    #
    #If the user cancels, stop the delete.
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #If the user says yes, first make sure the record
    #is not the last record in a group. If it is and
    #the system deleted the record without deleting
    #the group too, this group would become
    #an orphan as only categories that have records
    #attached to them show up for the user to add
    #more records uner them. So the group
    #record must also be deleted if this is the last
    #record under it.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    New Window [ Name: "delete tag" ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::kGroupOrTest; $group ]
    Perform Find [ ]
    #
    #If there are more records under this cateogry
    #then the system deletes the current record without
    #any more user input.
    If [ Get (FoundCount) ≠ 1 ]
    Close Window [ Name: "Delete Tag"; Current file ]
    Delete Record/Request [ No dialog ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #BUT if only one record is found user is asked
    #if they want to delete the group too.
    Else If [ Get (FoundCount) = 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #The records are sorted by group to show
    #the user which group is going to be deleted.
    If [ TEMP::sortKey ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    Show Custom Dialog [ Title: "!"; Message: "Deleting " & $deleteName & " will also delete its group -- " & $deleteGroup & " -- as it is the last tag in this group."; Buttons: “Cancel”, “Delete” ]
    #
    #If the user says yes, then delete both the tag and
    #the group record.
    If [ Get ( LastMessageChoice ) = 2 ]
    #
    #Delete tag.
    Delete Record/Request [ No dialog ]
    #
    #Delete group.
    Select Window [ Name: "delete tag"; Current file ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $group ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    End If
    End If
    End If
    Close Window [ Name: "Delete Tag"; Current file ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    End If
    #
    #
    #
    #
    #
    If [ $inUse ≠ "" ]
    Set Variable [ $delete; Value:tagMenus::_Ltag ]
    Set Variable [ $group ]
    Refresh Window
    Show Custom Dialog [ Message: "This node cannot be deleted as it in use x number of times in the following modules (main windows): " & $inUse & "."; Buttons: “OK” ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    End If

Fields used in this script

    TEMP::kdefaultNodeOther
    tagMenus::_Ltag
    TEMP::kdefaultNodePrimary
    TEMP::kdefaultNodeTestSubject
    tagMenus::tag
    TEMP::ksection
    tagMenus::kGroupOrTest
    ruleTagMenuGroups::name
    groupTest::match
    groupTest::kRecordCreatorNode
    groupTest::CaptionORinuseCheck
    groupTest::defaultSectionInfo
    testlearn::kNodePrimary
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kNodeOther
    testlearn::ktest
    testlearn::ktestSubject
    reference::knodePrimary
    reference::kcsection
    reference::knodeOther
    tagTestSubjectLocation::knode
    tagTestSubjectLocation::ksection
    groupTest::ksection
    ruleTagMenuGroups::ksection
    tagMenus::match
    TEMP::sortNode
    ruleTagSectionName::name
    ruleTagMenuGroups::order
    tagMenus::orderOrLock
    tagTable::kGroupOrTest
    TEMP::sortKey
    groupTest::_Lgroup

Scripts used in this script

    deleteKeywordTag

Layouts used in this script

    tableGroupTag
    defaultNode1
    tableTestLearn
    Reference
    tableTestSubjectFocus
    tableTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteNodeTag]	Parent Folder: [tagMenu]	Next Script: [addTagSectionKeysToMainRecordKeychain]
Script Name	deleteMHOCSPtags
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "sample" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "health" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "test" ]
    Show Custom Dialog [ Message: "This record is currently locked. Select the node that created it and enter the password to unlock it, then you will able to start the delete process."; Buttons: “OK” ]
    Exit Script [ ]
    Else If [ tagMenus::orderOrLock ≠ "" and tagMenus::match = "health" ]
    Show Custom Dialog [ Message: "This record is locked by the system."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the copyright being checked for deletion is in use
    #as a default copyright then stop the script and inform
    #the user of this fact.
    If [ FilterValues ( TEMP::kdefaultHealth ; tagMenus::_Ltag & "¶" ) ]
    Show Custom Dialog [ Message: "This copyright is currently selected as the default and cannot be deleted."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Exit field so user can see red delete
    #formatting later on.
    Go to Field [ ]
    #
    #Prevent all record load scripts (they slow down
    #this script and are uneccessary).
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Get all variables needed to preform script.
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    Set Variable [ $name; Value:tagMenus::tag ]
    #
    #Open a new window and look for tag in both
    #primary and other keyword fields.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    New Window [ Name: "Delete Tag" ]
    #
    #Find tagged Reference records.
    Go to Layout [ “Reference” (reference) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    #
    #
    If [ $$citationMatch = "medium" ]
    Set Field [ reference::kmedium; $tag ]
    Else If [ $$citationMatch = "path" ]
    Set Field [ reference::kfolderpath; $tag ]
    Else If [ $$citationMatch = "copyist" ]
    Set Field [ reference::kcopyist; $tag ]
    Else If [ $$citationMatch = "organ" ]
    Set Field [ reference::korgan; $tag ]
    Else If [ $$citationMatch = "health" ]
    Set Field [ reference::kHealth; $tag ]
    End If
    #
    #
    Perform Find [ ]
    Set Variable [ $refLastError; Value:Get (LastError) ]
    #
    #
    #Find tagged TestLearn records.
    Go to Layout [ “learn1” (testlearn) ]
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    #
    #
    If [ $$citationMatch = "medium" ]
    Set Field [ testlearn::kmedium; $tag ]
    Else If [ $$citationMatch = "path" ]
    Set Field [ testlearn::kfolderPath; $tag ]
    Else If [ $$citationMatch = "sample" ]
    Set Field [ testlearn::kcsample; "*" & $tag & ¶ ]
    Else If [ $$citationMatch = "health" ]
    Set Field [ testlearn::kHealth; $tag ]
    End If
    #
    #
    Perform Find [ ]
    Set Variable [ $TLLastError; Value:Get (LastError) ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #If records are found using this tag tell user
    #that it must be removed from all records
    #before it can be deleted.
    // If [ $TLLastError ≠ 401 and $refLastError ≠ 401 or $TLLastError ≠ 401 and $TLLastError ≠ 400 and $refLastError ≠ 401 ]
    If [ $TLLastError ≠ 401 and $TLLastError ≠ 400 or $refLastError ≠ 401 ]
    Close Window [ Name: "Delete Tag"; Current file ]
    If [ $refLastError ≠ 401 and $TLLastError ≠ 401 ]
    Show Custom Dialog [ Message: "In use by Reference and Test Learn records. Must be removed before deleting. Click the 'find' button and then the square button next to '" & Left ( $name ; 20 ) & If ( Length ( $name ) > 20 ; "..." ; "" ) & "' to find all records using this tag. Go to all sections if not found here."; Buttons: “OK” ]
    Else If [ $refLastError ≠ 401 ]
    Show Custom Dialog [ Message: "In use by Reference records. Must be removed before deleting. Click the 'find' button and then the square button next to '" & Left ( $name ; 20 ) & If ( Length ( $name ) > 20 ; "..." ; "" ) & "' to find all records using this tag. Go to all sections if not found here."; Buttons: “OK” ]
    Else If [ $TLLastError ≠ 401 ]
    Show Custom Dialog [ Message: "In use by Test Learn records. Must be removed before deleting. Click the 'find' button and then the square button next to '" & Left ( $name ; 20 ) & If ( Length ( $name ) > 20 ; "..." ; "" ) & "' to find all records using this tag. Go to all sections if not found here."; Buttons: “OK” ]
    End If
    Set Variable [ $delete ]
    Refresh Window
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    #
    #If records are not found using this tag make
    #sure user wants to delete it.
    Else If [ $TLLastError = 401 and $refLastError ≠ 0 or $TLLastError ≠ 0 and $refLastError = 401 or $TLLastError = 401 and $refLastError = 401 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $delete; Value:tagMenus::_Ltag ]
    Refresh Window
    Set Variable [ $category; Value:tagMenus::kGroupOrTest ]
    Show Custom Dialog [ Title: "!"; Message: "Delete " & $name & "?"; Buttons: “Cancel”, “Delete” ]
    #
    #If the user says yes, first make sure the record
    #is not the last record in a category. If it is and
    #the system deleted the record without deleting
    #the category too, this category would become
    #an orphan as only categories that have records
    #attached to them show up for the user to add
    #more records uner them. So the category
    #record must also be deleted if this is the last
    #record under it.
    If [ Get ( LastMessageChoice ) = 2 ]
    Select Window [ Name: "delete tag"; Current file ]
    Go to Layout [ “tableTag” (tagTable) ]
    Enter Find Mode [ ]
    Set Field [ tagTable::kGroupOrTest; $category ]
    Perform Find [ ]
    #
    #If there are more records under this cateogry
    #then the system deletes the current record without
    #any more user input.
    If [ Get (FoundCount) ≠ 1 ]
    Close Window [ Name: "Delete Tag"; Current file ]
    Delete Record/Request [ No dialog ]
    Set Variable [ $delete ]
    Set Variable [ $category ]
    Refresh Window
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    #
    #BUT if only one record is found user is asked
    #if they want to delete the category too.
    Else If [ Get (FoundCount) = 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #
    #The records are sorted by category to show
    #the user which category is going to be deleted.
    If [ TEMP::sortMedium ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortPath ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortCopyist ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortHealth ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortOrgan ≠ "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #
    Show Custom Dialog [ Title: "!"; Message: "Deleting " & Left ( $name ; 20 ) & If ( Length ( $name ) > 20 ; "..." ; "" ) & " will also delete its category as it is the last item in this category."; Buttons: “Cancel”, “Delete” ]
    #
    #If the user says yes, then delete both the tag and
    #the category record.
    If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    Select Window [ Name: "delete tag"; Current file ]
    Go to Layout [ “tableGroupTag” (groupTest) ]
    Enter Find Mode [ ]
    Set Field [ groupTest::_Lgroup; $category ]
    Perform Find [ ]
    Delete Record/Request [ No dialog ]
    End If
    End If
    End If
    End If
    #
    #No matter what the user decides (delete or cancel)
    #return the user to the window they where looking
    #at and restore the sort to what the user orginally
    #had selected.
    Close Window [ Name: "Delete Tag"; Current file ]
    Set Variable [ $delete ]
    Set Variable [ $category ]
    #
    #
    If [ TEMP::sortMedium ≠ "cat" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortPath ≠ "cat" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortCopyist ≠ "cat" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortHealth ≠ "cat" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortOrgan ≠ "cat" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #
    Refresh Window
    Set Variable [ $$stoploadCitation ]

Fields used in this script

    nodeLockTagMenus::orderOrLock
    tagMenus::match
    tagMenus::orderOrLock
    TEMP::kdefaultHealth
    tagMenus::_Ltag
    tagMenus::tag
    reference::kmedium
    reference::kfolderpath
    reference::kcopyist
    reference::korgan
    reference::kHealth
    testlearn::kmedium
    testlearn::kfolderPath
    testlearn::kcsample
    testlearn::kHealth
    tagMenus::kGroupOrTest
    tagTable::kGroupOrTest
    TEMP::sortMedium
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    TEMP::sortPath
    TEMP::sortCopyist
    TEMP::sortHealth
    TEMP::sortOrgan
    groupTest::_Lgroup

Scripts used in this script

Layouts used in this script

    Reference
    learn1
    tableTag
    tableGroupTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteMHOCSPtags]	Parent Folder: [tagMenu]	Next Script: [CHUNKaddLinkToTag]
Script Name	addTagSectionKeysToMainRecordKeychain
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    CHUNKaddLinkToTag
    CHUNKaddPictureToTag

Script Definition
Script Steps

    #
    #Add all tag's section keys to reference or learn record,
    #so that wherever this tag is with this learn or reference
    #record's picture, the record the picture came from is
    #also available. This is especially important if the user
    #decides to include only one section. The picture-
    #containing record needs to be part of that section!
    #BUT, the tag does not need to be in every section
    #this picture-containing record is in, unless this record
    #is tagged with the tag it is adding the picture to.
    #NOTE: add section keys only to keyword and node tags.
    If [ $$citationMatch = "node" or $$citationMatch = "key" ]
    #
    #Discover first if the section keys in the tag's
    #keychain are also in the Main record's keychain.
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $keychain; Value:ruleTagMenuGroups::ksection ]
    #
    #Capture the tag's key to determin later if it is in any
    #of this learn or reference record's key fields.
    Set Variable [ $tagKey; Value:tagMenus::_Ltag ]
    #
    #Determine how many keys there are in the tag's
    #keychain.
    Set Variable [ $numberOfKeys; Value:ValueCount ( $keychain ) ]
    #
    #Loop thru each key to see if any do not match
    #keys in the main record's keychain.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeys = 0 ]
    #
    #If main record being tagged does not have
    #one or more of the tag's keys in its keychain then
    #add the missing keys.
    If [ Get ( LayoutTableName ) = "testlearn" and GetValue ( $keychain ; $numberOfKeys ) ≠ GetValue ( FilterValues ( testlearn::kcsection & ¶ ; GetValue ( $keychain ; $numberOfKeys ) & ¶ ) ; 1 ) ]
    #
    #Next, add the current section key to this
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:testlearn::kcsection ]
    Set Field [ testlearn::kcsection; GetValue ( $keychain ; $numberOfKeys ) & ¶ & $groupSectionKeychain ]
    #
    Else If [ Get ( LayoutTableName ) = "reference" and GetValue ( $keychain ; $numberOfKeys ) ≠ GetValue ( FilterValues ( reference::kcsection & ¶ ; GetValue ( $keychain ; $numberOfKeys ) & ¶ ) ; 1 ) ]
    #
    #Next, add the current section key to this
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:reference::kcsection ]
    Set Field [ reference::kcsection; GetValue ( $keychain ; $numberOfKeys ) & ¶ & $groupSectionKeychain ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    End Loop
    #
    End If

Fields used in this script

    ruleTagMenuGroups::ksection
    tagMenus::_Ltag
    testlearn::kcsection
    reference::kcsection

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addTagSectionKeysToMainRecordKeychain]	Parent Folder: [tagMenu]	Next Script: [folderPathCheckForForwardSlash]
Script Name	CHUNKaddLinkToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addFileLink4ToTag
    addFileLink5ToTag
    addFileLink6ToTag

Script Definition
Script Steps

    #
    #Get key for link that is to be added to tag.
    If [ Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $tag; Value:reference::_Lreference ]
    Set Variable [ $number; Value:$$number ]
    Set Variable [ $$number ]
    Set Variable [ $name; Value:$$name ]
    Set Variable [ $$name ]
    Set Variable [ $window; Value:Get (WindowName) ]
    Else If [ Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $tag; Value:testlearn::_Ltestlearn ]
    Set Variable [ $number; Value:$$number ]
    Set Variable [ $$number ]
    Set Variable [ $name; Value:$$name ]
    Set Variable [ $$name ]
    Set Variable [ $window; Value:Get (WindowName) ]
    End If
    #
    #Add all tag's section keys to reference or learn record.
    Perform Script [ “addTagSectionKeysToMainRecordKeychain” ]
    #
    #Now add all the added record’s node and keyword
    #tags to any newly added sections.
    Perform Script [ “CHUNKaddReferenceNodesAndKeywords” ]
    #
    #Complete process of adding link to tag.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Remove key from other slots in may be in, to
    #prevent duplicates showing up.
    If [ tagMenus::Ktitle1 = $tag and $number ≠ 1 ]
    Set Field [ tagMenus::Ktitle1; "" ]
    Else If [ tagMenus::Ktitle2 = $tag and $number ≠ 2 ]
    Set Field [ tagMenus::Ktitle2; "" ]
    Else If [ tagMenus::Ktitle3= $tag and $number ≠ 3 ]
    Set Field [ tagMenus::Ktitle3; "" ]
    End If
    #
    #Place key in selected slot.
    If [ tagMenus::Ktitle1 ≠ $tag and $number = 1 ]
    Set Field [ tagMenus::Ktitle1; $tag ]
    Select Window [ Name: $window; Current file ]
    Exit Script [ ]
    Else If [ tagMenus::Ktitle2 ≠ $tag and $number = 2 ]
    Set Field [ tagMenus::Ktitle2; $tag ]
    Select Window [ Name: $window; Current file ]
    Exit Script [ ]
    Else If [ tagMenus::Ktitle3 ≠ $tag and $number = 3 ]
    Set Field [ tagMenus::Ktitle3; $tag ]
    Select Window [ Name: $window; Current file ]
    Exit Script [ ]
    End If
    #
    #Remove it key if it is already in use.
    If [ tagMenus::Ktitle1 = $tag and $number = 1 ]
    Set Field [ tagMenus::Ktitle1; "" ]
    Else If [ tagMenus::Ktitle2 = $tag and $number = 2 ]
    Set Field [ tagMenus::Ktitle2; "" ]
    Else If [ tagMenus::Ktitle3 = $tag and $number = 3 ]
    Set Field [ tagMenus::Ktitle3; "" ]
    End If
    Select Window [ Name: $window; Current file ]

Fields used in this script

    reference::_Lreference
    testlearn::_Ltestlearn
    tagMenus::Ktitle1
    tagMenus::Ktitle2
    tagMenus::Ktitle3

Scripts used in this script

    addTagSectionKeysToMainRecordKeychain
    CHUNKaddReferenceNodesAndKeywords

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKaddLinkToTag]	Parent Folder: [tagMenu]	Next Script: [gotoLessLayoutsTag]
Script Name	folderPathCheckForForwardSlash
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Right ( tagMenus::tag ; 1 ) ≠ "/" and $$citationMatch = "folderPath" ]
    Show Custom Dialog [ Message: "All filepaths must end with forward slash /. Make sure you did not copy the file name along with the file path."; Buttons: “OK” ]
    End If

Fields used in this script

    tagMenus::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [folderPathCheckForForwardSlash]	Parent Folder: [tagMenu]	Next Script: [gotoLessLayoutsTL]
Script Name	gotoLessLayoutsTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If in add mode, keep user on the evenMore layout.
    If [ $$add = 1 ]
    Show Custom Dialog [ Message: "Turn off add mode (click 'add' button) to reduce number of pictures shown and full link names."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Reveal more or fewer pictures and links for tag.
    If [ Right ( Get (LayoutName) ; 8 ) = "evenmore" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “ltagNK3” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode2” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "d" ]
    Go to Layout [ “defaultNode2” (tagMenus) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 4 ) = "more" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "d" ]
    Go to Layout [ “defaultNode1” (tagMenus) ]
    End If
    End If
    #
    #Remember layout user is on so they can be
    #returned to correct view.
    If [ $$citationMatch = "node" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Set Field [ TEMP::layoutLtagN; Get (LayoutName) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Set Field [ TEMP::layoutRtagN; Get (LayoutName) ]
    Else If [ Left (Get (LayoutName) ; 1) = "d" ]
    Set Field [ TEMP::DefaultmoreORLessLayoutNode; Get (LayoutName) ]
    End If
    Else If [ $$citationMatch = "key" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Set Field [ TEMP::layoutLtagK; Get (LayoutName) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Set Field [ TEMP::layoutRtagK; Get (LayoutName) ]
    End If
    End If

Fields used in this script

    TEMP::layoutLtagN
    TEMP::layoutRtagN
    TEMP::DefaultmoreORLessLayoutNode
    TEMP::layoutLtagK
    TEMP::layoutRtagK

Scripts used in this script

Layouts used in this script

    ltagNK3
    ReferenceMenu2keywordOrNode2
    defaultNode2
    ltagNK2
    ReferenceMenu2keywordOrNode1
    defaultNode1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoLessLayoutsTag]	Parent Folder: [tagMenu]	Next Script: [gotoLessDetailLayout]
Script Name	gotoLessLayoutsTL
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Reveal more or fewer pictures and links for tag.
    If [ Right ( Get (LayoutName) ; 8 ) = "evenmore" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learn3” (testlearn) ]
    Else If [ Left (Get (LayoutName) ; 1) = "t" ]
    End If
    Else If [ Get (LayoutName) = "learnBigPicture" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learn2” (testlearn) ]
    Else If [ Left (Get (LayoutName) ; 1) = "t" ]
    End If
    Else If [ Right ( Get (LayoutName) ; 4 ) = "more" and Right ( Get (LayoutName) ; 8 ) ≠ "evenmore" and Right ( Get (LayoutName) ; 10 ) ≠ "BigPicture" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learn1” (testlearn) ]
    Else If [ Left (Get (LayoutName) ; 1) = "t" ]
    End If
    End If
    #
    #Remember layout user is on so they can be
    #returned to correct view.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Set Field [ TEMP::layoutLmain; Get (LayoutName) ]
    Else If [ Left (Get (LayoutName) ; 1) = "t" ]
    End If

Fields used in this script

    TEMP::layoutLmain

Scripts used in this script

Layouts used in this script

    learn3
    learn2
    learn1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoLessLayoutsTL]	Parent Folder: [tagMenu]	Next Script: [gotoMoreDetailLayout]
Script Name	gotoLessDetailLayout
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If in add mode, keep user on the evenMore layout.
    If [ $$add = 1 ]
    Show Custom Dialog [ Message: "Turn off add mode (click 'add' button) to reduce number of pictures shown and full link names."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Reveal more or fewer pictures and links for tag.
    If [ Right ( Get (LayoutName) ; 8 ) = "evenmore" ]
    Go to Layout [ “testMenuTestItemMORE” (tagMenus) ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "more" ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    End If
    #
    #Remember layout user is on so they can be
    #returned to correct view.
    Set Field [ TEMP::DetailmoreORLessLayout; Get (LayoutName) ]

Fields used in this script

    TEMP::DetailmoreORLessLayout

Scripts used in this script

Layouts used in this script

    testMenuTestItemMORE
    setupTestItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoLessDetailLayout]	Parent Folder: [tagMenu]	Next Script: [showCited]
Script Name	gotoMoreDetailLayout
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If in add mode, keep user on the evenMore layout.
    If [ $$add = 1 ]
    Show Custom Dialog [ Message: "Turn off add mode (click 'add' button) to reduce number of pictures shown and full link names."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Reveal more or fewer pictures and links for tag.
    If [ Right ( Get (LayoutName) ; 8 ) = "testItem" ]
    Go to Layout [ “testMenuTestItemMORE” (tagMenus) ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "more" ]
    Go to Layout [ “addMenuTestItem” (tagMenus) ]
    End If
    #
    #Remember layout user is on so they can be
    #returned to correct view.
    Set Field [ TEMP::DetailmoreORLessLayout; Get (LayoutName) ]

Fields used in this script

    TEMP::DetailmoreORLessLayout

Scripts used in this script

Layouts used in this script

    testMenuTestItemMORE
    addMenuTestItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoMoreDetailLayout]	Parent Folder: [tagMenu]	Next Script: [CHUNKHealthLockedFields]
Script Name	showCited
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have chosen not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    #
    #
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ $$citeLayout ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $$cited ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showCited]	Parent Folder: [tagMenu]	Next Script: [findMode]
Script Name	CHUNKHealthLockedFields
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuHealth
    defaultHealthMenu

Script Definition
Script Steps

    #
    #Users cannot delete locked copyright records, but
    #they might edit them. This script insures any edits
    #made are replaced with the content from the
    #Creative Commons website.
    #
    If [ $$citationMatch = "health" ]
    Go to Record/Request/Page [ First ]
    #
    Loop
    If [ 9072011223903376 = tagMenus::_Ltag or 9072011223903376 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "This media file is in the public domain in the United States." ]
    Set Field [ tagMenus::tagSpelling; "This media file is in the public domain in the United States." ]
    Set Field [ tagMenus::notesOrHealth; "This applies to U.S. works where the copyright has expired, often because its first publication occurred prior to January 1, 1923. " & ¶ & " This image might not be in the public domain outside of the United States; this especially applies in the countries and areas that do not apply the rule of the shorter term for US works, such as Canada, Mainland China (not Hong Kong or Macao), Germany, Mexico, and Switzerland. The creator and year of publication are essential information and must be provided. See Wikipedia:Public domain and Wikipedia:Copyrights for more details." ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 9072011221202374 = tagTable::_Ltag or 9072011221202374 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "This work is in the public domain in the United States, and those countries with a copyright term of life of the author plus 100 years or fewer." ]
    Set Field [ tagMenus::tagSpelling; "This work is in the public domain in the United States, and those countries with a copyright term of life of the author plus 100 years or fewer." ]
    Set Field [ tagMenus::notesOrHealth; "" ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 8172011134941327 = tagTable::_Ltag or 8172011134941327 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "Public domain in USA. This image (or other media file) is in the public domain because its copyright has expired." ]
    Set Field [ tagMenus::tagSpelling; "Public domain in USA. This image (or other media file) is in the public domain because its copyright has expired." ]
    Set Field [ tagMenus::notesOrHealth; "This applies to Australia, the European Union and those countries with a copyright term of life of the author plus 70 years." & ¶ & " You must also include a United States public domain tag to indicate why this work is in the public domain in the United States. Note that a few countries have copyright terms longer than 70 years: Mexico has 100 years, Colombia has 80 years, and Guatemala and Samoa have 75 years. This image may not be in the public domain in these countries, which moreover do not implement the rule of the shorter term. Côte d'Ivoire has a general copyright term of 99 years and Honduras has 75 years, but they do implement the rule of the shorter term." ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 8102011220941282 = tagTable::_Ltag or 8102011220941282 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "All rights reserved by copyright holder (Do Not Share)" ]
    Set Field [ tagMenus::tagSpelling; "All rights reserved by copyright holder (Do Not Share)" ]
    Set Field [ tagMenus::notesOrHealth; "" ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 31620121743201228 = tagTable::_Ltag or 31620121743201228 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "No Known Copyright. WARNING: There may be copyrights reserved in some countries, locations, etc." ]
    Set Field [ tagMenus::tagSpelling; "No Known Copyright. WARNING: There may be copyrights reserved in some countries, locations, etc." ]
    Set Field [ tagMenus::notesOrHealth; "" ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 31620121746441229 = tagTable::_Ltag or 31620121746441229 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY 3.0 (Attribution 3.0 Unported)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY 3.0 (Attribution 3.0 Unported)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of the Legal Code " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " to Share — to copy, distribute and transmit the work" & ¶ & " to Remix — to adapt the work" & ¶ & " to make commercial use of the work" & ¶ & " Under the following conditions:" & ¶ & " Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work)." & ¶ & " With the understanding that:" & ¶ & " Waiver — Any of the above conditions can be waived if you get permission from the copyright holder." & ¶ & " Public Domain — Where the work or any of its elements is in the public domain under applicable law, that status is in no way affected by the license." & ¶ & " Other Rights — In no way are any of the following rights affected by the license:" & ¶ & " Your fair dealing or fair use rights, or other applicable copyright exceptions and limitations;" & ¶ & " The author's moral rights;" & ¶ & " Rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights." & ¶ & " Notice — For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do this is with a link to this web page. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 6282014220454904 = tagTable::_Ltag or 6282014220454904 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY 4.0 (Attribution 4.0 International)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY 4.0 (Attribution 4.0 International)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of (and not a substitute for) the license. " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " Share — copy and redistribute the material in any medium or format" & ¶ & " Adapt — remix, transform, and build upon the material" & ¶ & " for any purpose, even commercially." & ¶ & " The licensor cannot revoke these freedoms as long as you follow the license terms." & ¶ & " Under the following terms:" & ¶ & " Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use." & ¶ & " No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits." & ¶ & " Notices:" & ¶ & " You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. " & ¶ & " No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 31620121837161231 = tagTable::_Ltag or 31620121837161231 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-NC 3.0 (Attribution-NonCommercial 3.0 Unported)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-NC 3.0 (Attribution-NonCommercial 3.0 Unported)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of the Legal Code " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " to Share — to copy, distribute and transmit the work" & ¶ & " to Remix — to adapt the work" & ¶ & " Under the following conditions:" & ¶ & " Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work)." & ¶ & " Noncommercial — You may not use this work for commercial purposes." & ¶ & " With the understanding that:" & ¶ & " Waiver — Any of the above conditions can be waived if you get permission from the copyright holder." & ¶ & " Public Domain — Where the work or any of its elements is in the public domain under applicable law, that status is in no way affected by the license." & ¶ & " Other Rights — In no way are any of the following rights affected by the license:" & ¶ & " Your fair dealing or fair use rights, or other applicable copyright exceptions and limitations;" & ¶ & " The author's moral rights;" & ¶ & " Rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights." & ¶ & " Notice — For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do this is with a link to this web page. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 6272014222057903 = tagTable::_Ltag or 6272014222057903 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-NC 4.0 (Attribution-NonCommercial 4.0 International)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-NC 4.0 (Attribution-NonCommercial 4.0 International)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of (and not a substitute for) the license. " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " Share — copy and redistribute the material in any medium or format" & ¶ & " Adapt — remix, transform, and build upon the material" & ¶ & " The licensor cannot revoke these freedoms as long as you follow the license terms." & ¶ & " Under the following terms:" & ¶ & " Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use." & ¶ & " NonCommercial — You may not use the material for commercial purposes." & ¶ & " No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits." & ¶ & " Notices:" & ¶ & " You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. " & ¶ & " No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 31620121841541232 = tagTable::_Ltag or 31620121841541232 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-SA 3.0 (Attribution-ShareAlike 3.0 Unported)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-SA 3.0 (Attribution-ShareAlike 3.0 Unported)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of the Legal Code " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " to Share — to copy, distribute and transmit the work" & ¶ & " to Remix — to adapt the work" & ¶ & " to make commercial use of the work" & ¶ & " Under the following conditions:" & ¶ & " Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work)." & ¶ & " Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one. With the understanding that:" & ¶ & " Waiver — Any of the above conditions can be waived if you get permission from the copyright holder." & ¶ & " Public Domain — Where the work or any of its elements is in the public domain under applicable law, that status is in no way affected by the license." & ¶ & " Other Rights — In no way are any of the following rights affected by the license:" & ¶ & " Your fair dealing or fair use rights, or other applicable copyright exceptions and limitations;" & ¶ & " The author's moral rights;" & ¶ & " Rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights." & ¶ & " Notice — For any reuse or distribution, you must make clear to others the license terms of this work. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 6282014225223905 = tagTable::_Ltag or 6282014225223905 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-SA 4.0 (Attribution-ShareAlike 4.0 International)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-SA 4.0 (Attribution-ShareAlike 4.0 International)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of (and not a substitute for) the license. " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " Share — copy and redistribute the material in any medium or format" & ¶ & " Adapt — remix, transform, and build upon the material" & ¶ & " for any purpose, even commercially." & ¶ & " The licensor cannot revoke these freedoms as long as you follow the license terms." & ¶ & " Under the following terms:" & ¶ & " Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use." & ¶ & " ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original." & ¶ & " No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits." & ¶ & " Notices:" & ¶ & " You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. " & ¶ & " No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 31620121902441234 = tagTable::_Ltag or 31620121902441234 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-ND 3.0 (Attribution-NoDerivs 3.0 Unported)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-ND 3.0 (Attribution-NoDerivs 3.0 Unported)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of the Legal Code" & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " to Share — to copy, distribute and transmit the work" & ¶ & " to make commercial use of the work" & ¶ & " Under the following conditions:" & ¶ & " Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work)." & ¶ & " No Derivative Works — You may not alter, transform, or build upon this work." & ¶ & " With the understanding that:" & ¶ & " Waiver — Any of the above conditions can be waived if you get permission from the copyright holder." & ¶ & " Public Domain — Where the work or any of its elements is in the public domain under applicable law, that status is in no way affected by the license." & ¶ & " Other Rights — In no way are any of the following rights affected by the license:" & ¶ & " Your fair dealing or fair use rights, or other applicable copyright exceptions and limitations;" & ¶ & " The author's moral rights;" & ¶ & " Rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights." & ¶ & " Notice — For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do this is with a link to this web page." ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 6282014232807908 = tagTable::_Ltag or 6282014232807908 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-ND 4.0 (Attribution-NoDerivs 4.0 International)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-ND 4.0 (Attribution-NoDerivs 4.0 International)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of (and not a substitute for) the license. " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " Share — copy and redistribute the material in any medium or format" & ¶ & " for any purpose, even commercially." & ¶ & " The licensor cannot revoke these freedoms as long as you follow the license terms." & ¶ & " Under the following terms:" & ¶ & " Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use." & ¶ & " NoDerivatives — If you remix, transform, or build upon the material, you may not distribute the modified material." & ¶ & " No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits." & ¶ & " Notices:" & ¶ & " You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. " & ¶ & " No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 8162011231825326 = tagTable::_Ltag or 8162011231825326 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-NC-SA 3.0 (Attribution-NonCommercial-ShareAlike 3.0 Unported)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-NC-SA 3.0 (Attribution-NonCommercial-ShareAlike 3.0 Unported)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of the Legal Code" & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing this link" & ¶ & " You are free:" & ¶ & " to Share — to copy, distribute and transmit the work" & ¶ & " to Remix — to adapt the work" & ¶ & " Under the following conditions: " & ¶ & " Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work)." & ¶ & " Noncommercial — You may not use this work for commercial purposes." & ¶ & " Share Alike — If you alter, transform, or build upon this work, you may distribute the resulting work only under the same or similar license to this one." & ¶ & " With the understanding that:" & ¶ & " Waiver — Any of the above conditions can be waived if you get permission from the copyright holder." & ¶ & " Public Domain — Where the work or any of its elements is in the public domain under applicable law, that status is in no way affected by the license." & ¶ & " Other Rights — In no way are any of the following rights affected by the license:" & ¶ & " Your fair dealing or fair use rights, or other applicable copyright exceptions and limitations;" & ¶ & " The author's moral rights;" & ¶ & " Rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights." & ¶ & " Notice — For any reuse or distribution, you must make clear to others the license terms of this work. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 6282014225704906 = tagTable::_Ltag or 6282014225704906 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-NC-SA 4.0 (Attribution-NonCommercial-ShareAlike 4.0 International)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-NC-SA 4.0 (Attribution-NonCommercial-ShareAlike 3.0 International)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of (and not a substitute for) the license. " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " Share — copy and redistribute the material in any medium or format" & ¶ & " Adapt — remix, transform, and build upon the material" & ¶ & " The licensor cannot revoke these freedoms as long as you follow the license terms." & ¶ & " Under the following terms:" & ¶ & " Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use." & ¶ & " NonCommercial — You may not use the material for commercial purposes." & ¶ & " ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original." & ¶ & " No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits." & ¶ & " Notices:" & ¶ & " You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. " & ¶ & " No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 121620112002051049 = tagTable::_Ltag or 121620112002051049 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-NC-ND 3.0 (Attribution-NonCommercial-NoDerivs 3.0 Unported)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-NC-ND 3.0 (Attribution-NonCommercial-NoDerivs 3.0 Unported)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of the Legal Code " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " to Share — to copy, distribute and transmit the work" & ¶ & " Under the following conditions:" & ¶ & " Attribution — You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work)." & ¶ & " Noncommercial — You may not use this work for commercial purposes." & ¶ & " No Derivative Works — You may not alter, transform, or build upon this work." & ¶ & " With the understanding that:" & ¶ & " Waiver — Any of the above conditions can be waived if you get permission from the copyright holder." & ¶ & " Public Domain — Where the work or any of its elements is in the public domain under applicable law, that status is in no way affected by the license." & ¶ & " Other Rights — In no way are any of the following rights affected by the license:" & ¶ & " Your fair dealing or fair use rights, or other applicable copyright exceptions and limitations;" & ¶ & " The author's moral rights;" & ¶ & " Rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights." & ¶ & " Notice — For any reuse or distribution, you must make clear to others the license terms of this work. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 6282014230310907 = tagTable::_Ltag or 6282014230310907 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "CC BY-NC-ND 4.0 (Attribution-NonCommercial-NoDerivs 4.0 International)" ]
    Set Field [ tagMenus::tagSpelling; "CC BY-NC-ND 4.0 (Attribution-NonCommercial-NoDerivs 4.0 International)" ]
    Set Field [ tagMenus::notesOrHealth; "This is a human-readable summary of (and not a substitute for) the license. " & ¶ & " Click the health tag-menu view button to reveal link to full code and translations of license if you are not currently seeing the link" & ¶ & " You are free:" & ¶ & " Share — copy and redistribute the material in any medium or format." & ¶ & " The licensor cannot revoke these freedoms as long as you follow the license terms." & ¶ & " Under the following terms:" & ¶ & " Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use." & ¶ & " NonCommercial — You may not use the material for commercial purposes." & ¶ & " NoDerivatives — If you remix, transform, or build upon the material, you may not distribute the modified material." & ¶ & " No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits." & ¶ & " Notices:" & ¶ & " You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. " & ¶ & " No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. " ]
    Set Field [ citationPicture1::kcsection; "" ]
    #
    Else If [ 31620121911511235 = tagTable::_Ltag or 31620121911511235 = tagMenus::_Ltag ]
    Set Field [ tagMenus::tag; "No rights reserved by the creator of the work." ]
    Set Field [ tagMenus::tagSpelling; "No rights reserved by the creator of the work." ]
    Set Field [ tagMenus::notesOrHealth; "I give up all rights to and ask for no credit for my work." ]
    Set Field [ citationPicture1::kcsection; "" ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    Go to Record/Request/Page [ First ]
    #

Fields used in this script

    tagMenus::_Ltag
    tagMenus::tag
    tagMenus::tagSpelling
    tagMenus::notesOrHealth
    citationPicture1::kcsection
    tagTable::_Ltag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKHealthLockedFields]	Parent Folder: [tagMenu]	Next Script: [findModeCancel]
Script Name	findMode
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addTagToMainRecord

Script Definition
Script Steps

    #
    If [ $$findMode= "" ]
    #
    #
    #
    #
    #If find mode is active then return to browse mode.
    If [ Get ( WindowMode ) = 1 ]
    #
    #If user presses enter find button then perform the
    #steps below to complete the find.
    Perform Find [ ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$findLayout ]
    #
    #Sort reference or tag records depending on which
    #records user is viewing.
    If [ Get (LayoutTableName) = "reference" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Halt Script
    Else
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Halt Script
    End If
    #
    #If user presses enter find button then perform the
    #steps below to complete the find.
    End If
    #
    #Ask user if they want to find a tag or find learn items
    #tagged with specific tags (except if they are in test).
    If [ Get (LayoutTableName) ≠ "test" ]
    #
    #Show different message for learn and reference sections.
    If [ Left (Get (LayoutName) ; 9 ) ≠ "reference" ]
    Show Custom Dialog [ Message: "Find tagged learn records OR find tag(s)? "; Buttons: “tag(s)”, “learn”, “cancel” ]
    #
    Else If [ Left (Get (LayoutName) ; 9 ) = "reference" and $$referenceRecordOne ≠ 2 ]
    #
    #Eliminate find reference option for citation menu.
    If [ $$citationMatch ≠ "cite" ]
    Show Custom Dialog [ Message: "Find tagged reference records OR find tag(s)? "; Buttons: “tag(s)”, “reference”, “cancel” ]
    Else
    Show Custom Dialog [ Message: "Find tag(s)? "; Buttons: “cancel”, “tag(s)” ]
    End If
    End If
    #
    #If user selects to find tags enter find mode first.
    If [ Get ( LastMessageChoice ) = 1 and $$ClearMessageChoice ≠ 2 ]
    Enter Find Mode [ ]
    #
    #Determine if user is looking tag or reference records.
    If [ Get (LayoutTableName) = "reference" ]
    #
    #Get the layout name for the return trip after find is done.
    Set Variable [ $$findLayout; Value:Get (LayoutName) ]
    #
    #Show different layouts for learn and reference tag
    #menu items.
    If [ Left (Get (LayoutName) ; 9 ) ≠ "reference" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenuFINDstuffref” (reference) ]
    Else
    Go to Layout [ “learnMenuFINDref” (reference) ]
    End If
    Else
    Go to Layout [ “referenceMenuFINDref” (reference) ]
    End If
    #
    #Limit search to only items user selected to show in
    #learn mode if in learn mode.
    If [ Left (Get (LayoutName) ; 9 ) ≠ "reference" ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::show; "show in learn" ]
    #
    Else
    #Show all reference items for a section if in
    #reference mode.
    Set Field [ reference::kcsection; TEMP::ksection ]
    End If
    #
    #Select the field where the user needs to enter the
    #find information.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Field [ reference::Title ]
    Else
    Go to Field [ reference::referenceForReferenceWindow ]
    End If
    #
    #Pause and wait until user is ready to perform find.
    Pause/Resume Script [ Indefinitely ]
    #
    #If user presses enter key then perform the steps below
    #to complete the find.
    Perform Find [ ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$findLayout ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Halt Script
    Exit Script [ ]
    #
    Else
    #Limit search to only items user selected to show in
    #learn mode if in learn mode.
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Set Variable [ $$findLayout; Value:Get (LayoutName) ]
    If [ Left (Get (LayoutName) ; 9 ) ≠ "reference" ]
    If [ Left (Get (LayoutName) ; 5 ) = "learn" ]
    Go to Layout [ “learnMenuFINDrefLearn” (testlearn) ]
    #Clear these variables so find will work.
    Set Field [ tagMenus::match; "" ]
    Set Field [ ruleTagMenuGroups::ksection; "" ]
    Else
    Go to Layout [ “ltagFINDNK” (tagMenus) ]
    End If
    #
    Else
    #Show all reference items for a section if in
    #reference mode.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “referenceSFINDNK” (tagMenus) ]
    Else
    Go to Layout [ “referenceFINDNK” (tagMenus) ]
    End If
    End If
    #
    #Select the field where the user needs to enter the
    #find information.
    If [ Left (Get (LayoutName) ; 5 ) = "learn" ]
    Go to Field [ testlearn::Caption ]
    Else
    Go to Field [ tagMenus::tag ]
    End If
    #
    #Pause and wait until user is ready to perform find.
    Pause/Resume Script [ Indefinitely ]
    #
    #If user presses enter key then perform the steps below
    #to complete the find.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Set Field [ testlearn::sampleCasePoint; "1" ]
    End If
    Perform Find [ ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$findLayout ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Exit Script [ ]
    End If
    #
    Else If [ Get ( LastMessageChoice ) = 3 ]
    #If user cancels then exit exit.
    Exit Script [ ]
    End If
    End If
    #
    #
    #
    #
    #So if user wants to find learn records, then go into
    #menu for finding learn records by green button tags.
    #
    #Find must be done for tags, so if user is showing no
    #tags when find is activitated then take user to keywords
    #tag menu.
    If [ Get (LayoutName) = "ReferenceMenuNoTags" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    End If
    #
    Set Variable [ $$findMode; Value:1 ]
    Set Variable [ $$findLayout; Value:Get (LayoutName) ]
    If [ Right ( Get (LayoutName) ; 7 ) = "refcite" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenu4RefStuffCiteFindTL” (testlearn) ]
    Else
    Go to Layout [ “learnMenu4RefCiteFindTL” (testlearn) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 6 ) = "health" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnSFind” (tagMenus) ]
    Else
    Go to Layout [ “learnFind” (tagMenus) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 6 ) = "sample" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnFindStuffSample” (tagMenus) ]
    Else
    End If
    Else If [ Left ( Get (LayoutName) ; 6 ) = "ltagNK" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnKeywordOrNodeSFind” (tagMenus) ]
    Else
    Go to Layout [ “learnKeywordOrNodeFind” (tagMenus) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 1 ) = "3" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    Go to Layout [ “learnKeywordOrNodeFind” (tagMenus) ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "test" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnFindSTest” (test) ]
    Else
    Go to Layout [ “learnFindTest” (test) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 5 ) = "3cite" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    Go to Layout [ “learnFindCite” (reference) ]
    Else If [ Right ( Get (LayoutName) ; 8 ) = "RefStuff" and Left ( Get (LayoutName) ; 1 ) = "l" ]
    Go to Layout [ “learnFindStuffCite” (reference) ]
    #
    #
    Else If [ Right ( Get (LayoutName) ; 5 ) = "menu1" and Left ( Get (LayoutName) ; 1 ) = "r" ]
    Go to Layout [ “ReferenceMenuFind” (tagMenus) ]
    Else If [ Right ( Get (LayoutName) ; 5 ) = "node1" and Left ( Get (LayoutName) ; 1 ) = "r" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNodeFind” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNodeFind” (tagMenus) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 5 ) = "node2" and Left ( Get (LayoutName) ; 1 ) = "r" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNodeFind” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNodeFind” (tagMenus) ]
    End If
    Else If [ Right ( Get (LayoutName) ; 1 ) = "3" and Left ( Get (LayoutName) ; 1 ) = "r" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceMenu2SkeywordOrNodeFind” (tagMenus) ]
    Else
    Go to Layout [ “ReferenceMenu2keywordOrNodeFind” (tagMenus) ]
    End If
    End If
    #
    #Clear the first record question variable so user will
    #not be asked if they wish to find or tag reference records.
    Set Variable [ $$referenceRecordOne ]
    Set Variable [ $$ClearMessageChoice ]
    #
    #As going to the other window will be involved
    #stop the record load script on that window until
    #this script is finished to speed things up and
    #stop flashing effect.
    // Set Variable [ $$stoploadCitation; Value:1 ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LayoutName) = "ReferenceEDIT" ]
    Go to Layout [ “Reference” (reference) ]
    End If
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LayoutName) = "Learn4Edit" ]
    Go to Layout [ “learn4” (testlearn) ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    Else If [ $$findMode= 1 ]
    Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    End If
    #

Fields used in this script

    tagKeywordPrimary::orderOrLock
    tagKeywordPrimary::tag
    reference::referenceShort
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    TEMP::InventoryLibaryYN
    TEMP::ksection
    reference::kcsection
    reference::show
    reference::Title
    reference::referenceForReferenceWindow
    tagMenus::match
    ruleTagMenuGroups::ksection
    testlearn::Caption
    testlearn::sampleCasePoint

Scripts used in this script

Layouts used in this script

    <Missing Layout>
    learnMenuFINDstuffref
    learnMenuFINDref
    referenceMenuFINDref
    learnMenuFINDrefLearn
    ltagFINDNK
    referenceSFINDNK
    referenceFINDNK
    ReferenceMenu2keywordOrNode1
    learnMenu4RefStuffCiteFindTL
    learnMenu4RefCiteFindTL
    learnSFind
    learnFind
    learnFindStuffSample
    learnKeywordOrNodeSFind
    learnKeywordOrNodeFind
    learnFindSTest
    learnFindTest
    learnFindCite
    learnFindStuffCite
    ReferenceMenuFind
    ReferenceMenu2SkeywordOrNodeFind
    ReferenceMenu2keywordOrNodeFind
    Reference
    learn4

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findMode]	Parent Folder: [tagMenu]	Next Script: [findPrimaryTL]
Script Name	findModeCancel
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Script activitated if user cancels find and returns user
    #to layout they were viewing.
    Go to Layout [ $$findLayout ]
    Set Variable [ $$findLayout ]
    #

Fields used in this script

Scripts used in this script

Layouts used in this script

    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findModeCancel]	Parent Folder: [tagMenu]	Next Script: [findKeyOtherTL]
Script Name	findPrimaryTL
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Select tag to be found.
    If [ Right ( Get (LayoutName) ; 4 ) = "cite" ]
    Set Variable [ $tag; Value:reference::_Lreference ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "find" or Get (LayoutTableName) = "tagMenus" ]
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "test" ]
    Set Variable [ $tag; Value:test::_Ltest ]
    Else If [ Right ( Get (LayoutName) ; 2 ) = "tl" ]
    Set Variable [ $tag; Value:testlearn::_Ltestlearn ]
    End If
    #
    #Select the kind of tag to be found. We grab
    #only the first three letters because the shortest
    #menu item 'key' has only three letters, and because
    #we need the same number of characters/letters
    #to make up this variable so when it is added to
    #the first part of an item in the found list below
    #it can be removed by the system which only
    #can be told how many characters to remove.
    #This variable is thus a meta tag added to an
    #ID number to tell the system from which menu
    #did this item come. This meta tag or tag allows
    #us to make a list of ID numbers from various
    #tag menus: key, node, medium, etc.
    Set Variable [ $menu; Value:Left ( $$citationMatch ; 1 ) ]
    #
    #Get the name of the tag for error message
    #at bottom of this script if needed.
    If [ Right ( Get (LayoutName) ; 4 ) = "cite" ]
    Set Variable [ $name; Value:reference::referenceShort ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "find" or Get (LayoutTableName) = "tagMenus" ]
    Set Variable [ $name; Value:tagMenus::tag ]
    Else If [ Right ( Get (LayoutName) ; 4 ) = "test" ]
    Set Variable [ $name; Value:test::testName ]
    Else If [ Right ( Get (LayoutName) ; 2 ) = "tl" ]
    Set Variable [ $name; Value:testlearn::Caption ]
    End If
    #
    #As going to the other window will be involved
    #stop the record load script on that window until
    #this script is finished to speed things up and
    #stop flashing effect.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Go to the other window and start the find process.
    Select Window [ Name: "Learn"; Current file ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    // Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kKeywordPrimary; $tag ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodePrimary; $tag ]
    Else If [ $menu = "m" ]
    Set Field [ testlearn::kmedium; $tag ]
    Else If [ $menu = "h" ]
    Set Field [ testlearn::kHealth; $tag ]
    Else If [ $menu = "r" ]
    Set Field [ testlearn::kcreference; $tag ]
    Else If [ $menu = "c" ]
    Set Field [ testlearn::kcitation; $tag ]
    Else If [ $menu = "p" ]
    Set Field [ testlearn::kfolderPath; $tag ]
    Else If [ $menu = "t" ]
    Set Field [ testlearn::kctest; "*" & $tag & ¶ ]
    Else If [ $menu = "s" ]
    Set Field [ testlearn::kcsample; "*" & $tag & ¶ ]
    End If
    #
    #
    #If this is the first find, note this and perform
    #the find.
    If [ $$firstFind = "" ]
    Set Variable [ $$firstFind; Value:1 ]
    Set Variable [ $$found; Value:$menu & $tag & ¶ ]
    Perform Find [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #not already been found, then add items tagged
    #with it to the current set of found records.
    Else If [ $$firstFind = 1 ]
    If [ $menu & $tag & ¶ ≠ FilterValues ( $$found ; $menu & $tag) ]
    Extend Found Set [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #Add the tag from the list of found tagged records.
    Set Variable [ $found; Value:$$found ]
    Set Variable [ $$found; Value:$menu & $tag & ¶ & $found ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #already been found, then remove tag from the
    #the list of found tagged records.
    Else If [ $menu & $tag & ¶= FilterValues ( $$found ; $menu & $tag & ¶) ]
    Set Variable [ $found; Value:$$found ]
    Set Variable [ $$found; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    #
    #Enter browse mode to clear the find selections
    #set at the beginning of this script.
    Enter Browse Mode
    #
    #If after removing this item from the list of found
    #tagged records the list is empty, perform a find
    #that will result in zero records being found
    #to reflect the fact that the user currently has
    #an empty found list.
    If [ $$found = "" ]
    Set Variable [ $$firstFind ]
    Enter Find Mode [ ]
    #
    #
    #Since ID numbers are numbers, the text
    #'findnoRecords' entered in the ID field will result
    #in zero records being found.
    Set Field [ testlearn::kKeywordPrimary; "findNoRecords" ]
    #
    #
    Perform Find [ ]
    #
    #If after removing this item from the $$found list,
    #the list is not empty, refind all records still on
    #the list one tag at a time.
    Else If [ $$found ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$found ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    #(the number 42 is a joke, essentially the number
    #needs to be big enough to capture the full ID number
    #which is much shorter, but overkill doesn't hurt)
    #FYI: joke is from Hitchhiker's Guide to the Galaxy
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kKeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ testlearn::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ testlearn::kHealth; $find ]
    Else If [ $menu = "r" ]
    Set Field [ testlearn::kcreference; $find ]
    Else If [ $menu = "c" ]
    Set Field [ testlearn::kcitation; $find ]
    Else If [ $menu = "p" ]
    Set Field [ testlearn::kfolderPath; $find ]
    Else If [ $menu = "t" ]
    Set Field [ testlearn::ktest; $find ]
    Else If [ $menu = "s" ]
    Set Field [ testlearn::kcsample; $find ]
    End If
    #
    #
    #If there is more than one item on the $$found
    #list, then find the rest of records tagged with
    #this items/tags.
    Perform Find [ ]
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kKeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ testlearn::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ testlearn::kHealth; $find ]
    Else If [ $menu = "r" ]
    Set Field [ testlearn::kcreference; $find ]
    Else If [ $menu = "c" ]
    Set Field [ testlearn::kcitation; $find ]
    Else If [ $menu = "p" ]
    Set Field [ testlearn::kfolderPath; $find ]
    Else If [ $menu = "t" ]
    Set Field [ testlearn::ktest; $find ]
    Else If [ $menu = "s" ]
    Set Field [ testlearn::kcsample; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    End If
    End If
    #
    #Refind any Other Keyword items.
    If [ $$foundOther ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$foundOther ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kcKeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodeOther; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    #
    #If there is more than one item on the $$foundOther
    #list, then find the rest of records tagged with
    #this items/tags.
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kcKeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodeOther; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    #
    #Sort according to current sort in Main window.
    Sort Records [ ] [ No dialog ]
    #
    #Go to first record and preform record load script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Return focus to Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If no records where found tell user why and
    #remove tag ID from list of tags attached to records
    #in the main window.
    If [ $error = 401 ]
    If [ $$firstFind = "" ]
    Set Variable [ $$found ]
    Else If [ $$firstFind ≠ "" ]
    Set Variable [ $$found; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    End If
    Refresh Window
    #
    #
    If [ $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as a primary keyword."; Buttons: “OK” ]
    Else If [ $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as a primary node."; Buttons: “OK” ]
    Else If [ $$citationMatch = "medium" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "health" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "ref" ]
    Show Custom Dialog [ Message: "'" & Left ( $name ; 65 ) & "..." & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "cite" ]
    Show Custom Dialog [ Message: "'" & Left ( $name ; 65 ) & "..." & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "path" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "test" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "sample" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    End If
    #
    #
    End If

Fields used in this script

    reference::_Lreference
    tagMenus::_Ltag
    test::_Ltest
    testlearn::_Ltestlearn
    reference::referenceShort
    tagMenus::tag
    test::testName
    testlearn::Caption
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kKeywordPrimary
    testlearn::kNodePrimary
    testlearn::kmedium
    testlearn::kHealth
    testlearn::kcreference
    testlearn::kcitation
    testlearn::kfolderPath
    testlearn::kctest
    testlearn::kcsample
    testlearn::ktest
    testlearn::kcKeywordOther
    testlearn::kNodeOther

Scripts used in this script

    loadCitation

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findPrimaryTL]	Parent Folder: [tagMenu]	Next Script: [findPrimaryRef]
Script Name	findKeyOtherTL
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #Select tag to be found.
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    #
    #
    #Select the kind of tag to be found. We grab
    #only the first three letters because the shortest
    #menu item 'key' has only three letters, and because
    #we need the same number of characters/letters
    #to make up this variable so when it is added to
    #the first part of an item in the found list below
    #it can be removed by the system which only
    #can be told how many characters to remove.
    #This variable is thus a meta tag added to an
    #ID number to tell the system from which menu
    #did this item come. This meta tag or tag allows
    #us to make a list of ID numbers from various
    #tag menus: key, node, medium, etc.
    Set Variable [ $menu; Value:Left ( $$citationMatch ; 1 ) ]
    #
    #Get the name of the tag for error message
    #at bottom of this script if needed.
    Set Variable [ $name; Value:tagMenus::tag ]
    #
    #As going to the other window will be involved
    #stop the record load script on that window until
    #this script is finished to speed things up and
    #stop flashing effect.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Go to the other window and start the find process.
    Select Window [ Name: "Learn"; Current file ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    // Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $$citationMatch = "key" ]
    Set Field [ testlearn::kcKeywordOther; $tag ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ testlearn::kNodeOther; $tag ]
    End If
    #
    #
    #If this is the first find, note this and perform
    #the find.
    If [ $$firstFindOther = "" ]
    Set Variable [ $$firstFindOther; Value:1 ]
    Set Variable [ $$foundOther; Value:$menu & $tag & ¶ ]
    Perform Find [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #not already been found, then add items tagged
    #with it to the current set of found records.
    Else If [ $$firstFindOther = 1 ]
    If [ $menu & $tag & ¶ ≠ FilterValues ( $$foundOther ; $menu & $tag) ]
    Extend Found Set [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #Add the tag from the list of found tagged records.
    Set Variable [ $found; Value:$$foundOther ]
    Set Variable [ $$foundOther; Value:$menu & $tag & ¶ & $found ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #already been found, then remove tag from the
    #the list of found other tagged records.
    Else If [ $menu & $tag & ¶= FilterValues ( $$foundOther ; $menu & $tag & ¶) ]
    Set Variable [ $found; Value:$$foundOther ]
    Set Variable [ $$foundOther; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    #
    #Enter browse mode to clear the find selections
    #set at the beginning of this script.
    Enter Browse Mode
    #
    #If after removing this item from the list of found other
    #tagged records the list is empty, perform a find
    #that will result in zero records being found
    #to reflect the fact that the user currently has
    #an empty found other list.
    If [ $$foundOther = "" ]
    Set Variable [ $$firstFindOther ]
    Enter Find Mode [ ]
    #
    #
    #Since ID numbers are numbers, the text
    #'findnoRecords' entered in the ID field will result
    #in zero records being found.
    If [ $$citationMatch = "key" ]
    Set Field [ testlearn::kcKeywordOther; "findNoRecords" & ¶ ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ testlearn::kNodeOther; "findNoRecords" & ¶ ]
    End If
    #
    #
    Perform Find [ ]
    #
    #If after removing this item from the $$foundOther
    #list, the list is not empty, refind all records
    #still on the list one tag at a time.
    Else If [ $$foundOther ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$foundOther ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    #(the number 42 is a joke, essentially the number
    #needs to be big enough to capture the full ID number
    #which is much shorter, but overkill doesn't hurt)
    #FYI: joke is from Hitchhiker's Guide to the Galaxy
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kcKeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodeOther; $find ]
    End If
    #
    #
    #If there is more than one item on the $$found
    #list, then find the rest of records tagged with
    #this items/tags.
    Perform Find [ ]
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kcKeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodeOther; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    End If
    End If
    #
    #Refind primary items.
    If [ $$found ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$found ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    #(the number 42 is a joke, essentially the number
    #needs to be big enough to capture the full ID number
    #which is much shorter, but overkill doesn't hurt)
    #FYI: joke is from Hitchhiker's Guide to the Galaxy
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kKeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ testlearn::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ testlearn::kHealth; $find ]
    Else If [ $menu = "r" ]
    Set Field [ testlearn::kcreference; $find ]
    Else If [ $menu = "c" ]
    Set Field [ testlearn::kcitation; $find ]
    Else If [ $menu = "p" ]
    Set Field [ testlearn::kfolderPath; $find ]
    Else If [ $menu = "t" ]
    Set Field [ testlearn::ktest; $find ]
    Else If [ $menu = "s" ]
    Set Field [ testlearn::kcsample; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    #
    #If there is more than one item on the $$found
    #list, then find the rest of records tagged with
    #this items/tags.
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ testlearn::kKeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ testlearn::kNodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ testlearn::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ testlearn::kHealth; $find ]
    Else If [ $menu = "r" ]
    Set Field [ testlearn::kcreference; $find ]
    Else If [ $menu = "c" ]
    Set Field [ testlearn::kcitation; $find ]
    Else If [ $menu = "p" ]
    Set Field [ testlearn::kfolderPath; $find ]
    Else If [ $menu = "t" ]
    Set Field [ testlearn::ktest; $find ]
    Else If [ $menu = "s" ]
    Set Field [ testlearn::kcsample; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    #
    #Sort according to current sort in Main window.
    Sort Records [ ] [ No dialog ]
    #
    #Go to first record and preform record load script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Return focus to Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If no records where found tell user why and
    #remove tag ID from list of tags attached to records
    #in the main window.
    If [ $error = 401 ]
    If [ $$firstFind = "" ]
    Set Variable [ $$foundOther ]
    Else If [ $$firstFind ≠ "" ]
    Set Variable [ $$foundOther; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    End If
    Refresh Window
    #
    #
    If [ $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as an other keyword."; Buttons: “OK” ]
    Else If [ $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as a primary node."; Buttons: “OK” ]
    End If
    #
    #
    End If

Fields used in this script

    tagMenus::_Ltag
    tagMenus::tag
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::kcKeywordOther
    testlearn::kNodeOther
    testlearn::kKeywordPrimary
    testlearn::kNodePrimary
    testlearn::kmedium
    testlearn::kHealth
    testlearn::kcreference
    testlearn::kcitation
    testlearn::kfolderPath
    testlearn::ktest
    testlearn::kcsample

Scripts used in this script

    loadCitation

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findKeyOtherTL]	Parent Folder: [tagMenu]	Next Script: [findKeyOtherRef]
Script Name	findPrimaryRef
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Select tag to be found.
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    #
    #Select the kind of tag to be found. We grab
    #only the first three letters because the shortest
    #menu item 'key' has only three letters, and because
    #we need the same number of characters/letters
    #to make up this variable so when it is added to
    #the first part of an item in the found list below
    #it can be removed by the system which only
    #can be told how many characters to remove.
    #This variable is thus a meta tag added to an
    #ID number to tell the system from which menu
    #did this item come. This meta tag or tag allows
    #us to make a list of ID numbers from various
    #tag menus: key, node, medium, etc.
    Set Variable [ $menu; Value:Left ( $$citationMatch ; 1 ) ]
    #
    #Get the name of the tag for error message
    #at bottom of this script if needed.
    Set Variable [ $name; Value:tagMenus::tag ]
    #
    #As going to the other window will be involved
    #stop the record load script on that window until
    #this script is finished to speed things up and
    #stop flashing effect.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Go to the other window and start the find process.
    Select Window [ Name: "References"; Current file ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    // Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordPrimary; $tag ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodePrimary; $tag ]
    Else If [ $menu = "m" ]
    Set Field [ reference::kmedium; $tag ]
    Else If [ $menu = "h" ]
    Set Field [ reference::kHealth; $tag ]
    Else If [ $menu = "p" ]
    Set Field [ reference::kfolderpath; $tag ]
    Else If [ $menu = "o" ]
    Set Field [ reference::korgan; $tag ]
    Else If [ $menu = "c" ]
    Set Field [ reference::kcopyist; $tag ]
    End If
    #
    #
    #If this is the first find, note this and perform
    #the find.
    If [ $$firstFind = "" ]
    Set Variable [ $$firstFind; Value:1 ]
    Set Variable [ $$found; Value:$menu & $tag & ¶ ]
    Perform Find [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #not already been found, then add items tagged
    #with it to the current set of found records.
    Else If [ $$firstFind = 1 ]
    If [ $menu & $tag & ¶ ≠ FilterValues ( $$found ; $menu & $tag) ]
    Extend Found Set [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #Add the tag from the list of found tagged records.
    Set Variable [ $found; Value:$$found ]
    Set Variable [ $$found; Value:$menu & $tag & ¶ & $found ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #already been found, then remove tag from the
    #the list of found tagged records.
    Else If [ $menu & $tag & ¶= FilterValues ( $$found ; $menu & $tag & ¶) ]
    Set Variable [ $found; Value:$$found ]
    Set Variable [ $$found; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    #
    #Enter browse mode to clear the find selections
    #set at the beginning of this script.
    Enter Browse Mode
    #
    #If after removing this item from the list of found
    #tagged records the list is empty, perform a find
    #that will result in zero records being found
    #to reflect the fact that the user currently has
    #an empty found list.
    If [ $$found = "" ]
    Set Variable [ $$firstFind ]
    Enter Find Mode [ ]
    #
    #
    #Since ID numbers are numbers, the text
    #'findnoRecords' entered in the ID field will result
    #in zero records being found.
    Set Field [ reference::kkeywordPrimary; "findNoRecords" ]
    #
    #
    Perform Find [ ]
    #
    #If after removing this item from the $$found list,
    #the list is not empty, refind all records still on
    #the list one tag at a time.
    Else If [ $$found ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$found ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    #(the number 42 is a joke, essentially the number
    #needs to be big enough to capture the full ID number
    #which is much shorter, but overkill doesn't hurt)
    #FYI: joke is from Hitchhiker's Guide to the Galaxy
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ reference::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ reference::kHealth; $find ]
    Else If [ $menu = "p" ]
    Set Field [ reference::kfolderpath; $find ]
    Else If [ $menu = "o" ]
    Set Field [ reference::korgan; $find ]
    Else If [ $menu = "c" ]
    Set Field [ reference::kcopyist; $find ]
    End If
    #
    #
    #If there is more than one item on the $$found
    #list, then find the rest of records tagged with
    #this items/tags.
    Perform Find [ ]
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ reference::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ reference::kHealth; $find ]
    Else If [ $menu = "p" ]
    Set Field [ reference::kfolderpath; $find ]
    Else If [ $menu = "o" ]
    Set Field [ reference::korgan; $find ]
    Else If [ $menu = "c" ]
    Set Field [ reference::kcopyist; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    End If
    End If
    #
    #Refind any Other Keyword items.
    If [ $$foundOther ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$foundOther ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodeOther; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    #
    #If there is more than one item on the $$foundOther
    #list, then find the rest of records tagged with
    #this items/tags.
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodeOther; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    #
    #Sort according to current sort in Main window.
    Sort Records [ ] [ No dialog ]
    #
    #Go to first record and preform record load script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Return focus to Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If no records where found tell user why and
    #remove tag ID from list of tags attached to records
    #in the main window.
    If [ $error = 401 ]
    If [ $$firstFind = "" ]
    Set Variable [ $$found ]
    Else If [ $$firstFind ≠ "" ]
    Set Variable [ $$found; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    End If
    Refresh Window
    #
    #
    If [ $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as a primary keyword."; Buttons: “OK” ]
    Else If [ $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as a primary node."; Buttons: “OK” ]
    Else If [ $$citationMatch = "medium" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "health" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "path" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "organ" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    Else If [ $$citationMatch = "copyist" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use."; Buttons: “OK” ]
    End If
    #
    #
    End If

Fields used in this script

    tagMenus::_Ltag
    tagMenus::tag
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    reference::kkeywordPrimary
    reference::knodePrimary
    reference::kmedium
    reference::kHealth
    reference::kfolderpath
    reference::korgan
    reference::kcopyist
    reference::kkeywordOther
    reference::knodeOther

Scripts used in this script

    loadCitation

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findPrimaryRef]	Parent Folder: [tagMenu]	Next Script: [CHUNKcheckForDragPasteChanges]
Script Name	findKeyOtherRef
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #Select tag to be found.
    Set Variable [ $tag; Value:tagMenus::_Ltag ]
    #
    #
    #Select the kind of tag to be found. We grab
    #only the first three letters because the shortest
    #menu item 'key' has only three letters, and because
    #we need the same number of characters/letters
    #to make up this variable so when it is added to
    #the first part of an item in the found list below
    #it can be removed by the system which only
    #can be told how many characters to remove.
    #This variable is thus a meta tag added to an
    #ID number to tell the system from which menu
    #did this item come. This meta tag or tag allows
    #us to make a list of ID numbers from various
    #tag menus: key, node, medium, etc.
    Set Variable [ $menu; Value:Left ( $$citationMatch ; 1 ) ]
    #
    #Get the name of the tag for error message
    #at bottom of this script if needed.
    Set Variable [ $name; Value:tagMenus::tag ]
    #
    #As going to the other window will be involved
    #stop the record load script on that window until
    #this script is finished to speed things up and
    #stop flashing effect.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Go to the other window and start the find process.
    Select Window [ Name: "References"; Current file ]
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    // Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $$citationMatch = "key" ]
    Set Field [ reference::kkeywordOther; $tag ]
    Else If [ $$citationMatch = "node" ]
    Set Field [ reference::knodeOther; $tag ]
    End If
    #
    #
    #If this is the first find, note this and perform
    #the find.
    If [ $$firstFindOther = "" ]
    Set Variable [ $$firstFindOther; Value:1 ]
    Set Variable [ $$foundOther; Value:$menu & $tag & ¶ ]
    Perform Find [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #not already been found, then add items tagged
    #with it to the current set of found records.
    Else If [ $$firstFindOther = 1 ]
    If [ $menu & $tag & ¶ ≠ FilterValues ( $$foundOther ; $menu & $tag) ]
    Extend Found Set [ ]
    #
    #If nothing was found capture the error message
    #as steps before showing the error message will
    #delete it from the system and we need it to
    #activate the error message below if there was
    #an error.
    Set Variable [ $error; Value:Get (LastError) ]
    #
    #Add the tag from the list of found tagged records.
    Set Variable [ $found; Value:$$foundOther ]
    Set Variable [ $$foundOther; Value:$menu & $tag & ¶ & $found ]
    #
    #If this is not the first find and the item that
    #the user clicked on to start this script has
    #already been found, then remove tag from the
    #the list of found other tagged records.
    Else If [ $menu & $tag & ¶= FilterValues ( $$foundOther ; $menu & $tag & ¶) ]
    Set Variable [ $found; Value:$$foundOther ]
    Set Variable [ $$foundOther; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    #
    #Enter browse mode to clear the find selections
    #set at the beginning of this script.
    Enter Browse Mode
    #
    #If after removing this item from the list of found other
    #tagged records the list is empty, perform a find
    #that will result in zero records being found
    #to reflect the fact that the user currently has
    #an empty found other list.
    If [ $$foundOther = "" ]
    Set Variable [ $$firstFindOther ]
    Enter Find Mode [ ]
    #
    #
    #Since ID numbers are numbers, the text
    #'findnoRecords' entered in the ID field will result
    #in zero records being found.
    Set Field [ reference::kkeywordPrimary; "findNoRecords" & ¶ ]
    #
    #
    Perform Find [ ]
    #
    #If after removing this item from the $$foundOther
    #list, the list is not empty, refind all records
    #still on the list one tag at a time.
    Else If [ $$foundOther ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$foundOther ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    #(the number 42 is a joke, essentially the number
    #needs to be big enough to capture the full ID number
    #which is much shorter, but overkill doesn't hurt)
    #FYI: joke is from Hitchhiker's Guide to the Galaxy
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodeOther; $find ]
    End If
    #
    #
    #If there is more than one item on the $$found
    #list, then find the rest of records tagged with
    #this items/tags.
    Perform Find [ ]
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordOther; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodeOther; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    End If
    End If
    #
    #Refind primary items.
    If [ $$found ≠ "" ]
    #
    #Create a copy of the found list. Items will be
    #removed from this one at a time as they are found.
    Set Variable [ $findList; Value:$$found ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    #(the number 42 is a joke, essentially the number
    #needs to be big enough to capture the full ID number
    #which is much shorter, but overkill doesn't hurt)
    #FYI: joke is from Hitchhiker's Guide to the Galaxy
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ reference::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ reference::kHealth; $find ]
    Else If [ $menu = "p" ]
    Set Field [ reference::kfolderpath; $find ]
    Else If [ $menu = "o" ]
    Set Field [ reference::korgan; $find ]
    Else If [ $menu = "c" ]
    Set Field [ reference::kcopyist; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    #
    #If there is more than one item on the $$found
    #list, then find the rest of records tagged with
    #this items/tags.
    Loop
    #
    #When the list is empty stop finding stuff.
    Exit Loop If [ ValueCount ( $findList ) = 0 ]
    #
    #Get the menu item name so system will know
    #what field to put the ID number into to find
    #records tagged with this item.
    Set Variable [ $menu; Value:Left ( ( GetValue ( $findList ; 1 ) ) ; 1 ) ]
    #
    #Get the ID number of the tag to be found.
    Set Variable [ $find; Value:Middle ( ( GetValue ( $findList ; 1 ) ) ; 2 ; 42 ) ]
    #
    #Remove it from the list of tags to be found.
    Set Variable [ $subtract; Value:$findList ]
    Set Variable [ $findList; Value:Substitute ( $subtract ; $menu & $find & ¶ ; "" ) ]
    #
    #Find main window records tagged with it.
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    #
    #
    If [ $menu = "k" ]
    Set Field [ reference::kkeywordPrimary; $find ]
    Else If [ $menu = "n" ]
    Set Field [ reference::knodePrimary; $find ]
    Else If [ $menu = "m" ]
    Set Field [ reference::kmedium; $find ]
    Else If [ $menu = "h" ]
    Set Field [ reference::kHealth; $find ]
    Else If [ $menu = "p" ]
    Set Field [ reference::kfolderpath; $find ]
    Else If [ $menu = "o" ]
    Set Field [ reference::korgan; $find ]
    Else If [ $menu = "c" ]
    Set Field [ reference::kcopyist; $find ]
    End If
    #
    #
    Extend Found Set [ ]
    End Loop
    End If
    #
    #Sort according to current sort in Main window.
    Sort Records [ ] [ No dialog ]
    #
    #Go to first record and preform record load script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Return focus to Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If no records where found tell user why and
    #remove tag ID from list of tags attached to records
    #in the main window.
    If [ $error = 401 ]
    If [ $$firstFind = "" ]
    Set Variable [ $$foundOther ]
    Else If [ $$firstFind ≠ "" ]
    Set Variable [ $$foundOther; Value:Substitute ( $found ; $menu & $tag & ¶ ; "" ) ]
    End If
    Refresh Window
    #
    #
    If [ $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as an other keyword."; Buttons: “OK” ]
    Else If [ $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "'" & $name & "'" & " is not in use as an other node."; Buttons: “OK” ]
    End If
    #
    #
    End If

Fields used in this script

    tagMenus::_Ltag
    tagMenus::tag
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    reference::kkeywordOther
    reference::knodeOther
    reference::kkeywordPrimary
    reference::knodePrimary
    reference::kmedium
    reference::kHealth
    reference::kfolderpath
    reference::korgan
    reference::kcopyist

Scripts used in this script

    loadCitation

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findKeyOtherRef]	Parent Folder: [tagMenu]	Next Script: [lock]
Script Name	CHUNKcheckForDragPasteChanges
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    testNameToRevertNamField
    changeSpellingOfTagCategory

Script Definition
Script Steps

    #Used by script changeSpellingOfKeywordOrNodeTag
    #
    If [ Get (LayoutTableName) = "tagMenus" ]
    #
    #Exit any fields so do not get can't modify error message
    #because record is in use in another window.
    Go to Field [ ]
    #
    #Speed up script by stopping record load script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #New window so user's window is not changed.
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    #Loop thru all records and make sure their spelling
    #has not been changed, and if it has change it back
    #to the way it was, unless the change was made in the
    #field the user was just working on.
    Go to Record/Request/Page [ First ]
    Loop
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and $$Tag ≠ ruleTagMenuGroups::_Lgroup and Get (LayoutName) ≠ "setupTestItem" and Length ( ruleTagMenuGroups::match ) < 12 ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    End If
    If [ ruleTagMenuTestGroups::name ≠ ruleTagMenuTestGroups::defaultSectionInfo and $$Tag ≠ ruleTagMenuTestGroups::_Lgroup and Get (LayoutName) = "setupTestItem" and ruleTagMenuTestGroups::nameSpelling = "testItemGroup" ]
    Set Field [ ruleTagMenuTestGroups::name; ruleTagMenuTestGroups::defaultSectionInfo ]
    End If
    If [ tagMenus::tag ≠ tagMenus::tagSpelling and $$Tag ≠ tagMenus::_Ltag and tagMenus::match = "node" or tagMenus::tag ≠ tagMenus::tagSpelling and $$Tag ≠ tagMenus::_Ltag and tagMenus::match = "key" or tagMenus::tag ≠ tagMenus::tagSpelling and $$Tag ≠ tagMenus::_Ltag and tagMenus::match = "testItem" ]
    Set Field [ tagMenus::tag; tagMenus::tagSpelling ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Start up record load script and close the window.
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Current Window ]
    Else If [ Get (LayoutTableName) = "test" ]
    #
    #Exit any fields so do not get can't modify error message
    #because record is in use in another window.
    Go to Field [ ]
    #
    #Speed up script by stopping record load script.
    Set Variable [ $$ID; Value:"ignore" ]
    #
    #New window so user's window is not changed.
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    #Loop thru all records and make sure their spelling
    #has not been changed, and if it has change it back
    #to the way it was, unless the change was made in the
    #field the user was just working on.
    Go to Record/Request/Page [ First ]
    Loop
    If [ groupTest::name ≠ groupTest::nameSpelling and $$GroupTag ≠ groupTest::_Lgroup and groupTest::match = "testGroup" ]
    Set Field [ groupTest::name; groupTest::nameSpelling ]
    End If
    If [ test::testName ≠ test::testNameRevert and $$Tag ≠ test::_Ltest ]
    Set Field [ test::testName; test::testNameRevert ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Start up record load script and close the window.
    Set Variable [ $$stopLoadTagRecord ]
    If [ $$tag ≠ "" ]
    Set Variable [ $$ID; Value:$$tag ]
    End If
    Close Window [ Current Window ]
    End If

Fields used in this script

    ruleTagMenuGroups::name
    ruleTagMenuGroups::nameSpelling
    ruleTagMenuGroups::_Lgroup
    ruleTagMenuGroups::match
    ruleTagMenuTestGroups::name
    ruleTagMenuTestGroups::defaultSectionInfo
    ruleTagMenuTestGroups::_Lgroup
    ruleTagMenuTestGroups::nameSpelling
    tagMenus::tag
    tagMenus::tagSpelling
    tagMenus::_Ltag
    tagMenus::match
    groupTest::name
    groupTest::nameSpelling
    groupTest::_Lgroup
    groupTest::match
    test::testName
    test::testNameRevert
    test::_Ltest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKcheckForDragPasteChanges]	Parent Folder: [tagMenu]	Next Script: [checkForDraggedPasteChangesIfLocked]
Script Name	lock
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ nodeLockTagGroup::orderOrLock = "lock" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "Type the following into the box below to unlock all content created by " & nodeLockTagGroup::tag; Buttons: “OK”, “Cancel” ]
    Halt Script
    End If

Fields used in this script

    nodeLockTagGroup::orderOrLock
    nodeLockTagGroup::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [lock]	Parent Folder: [tagMenu]	Next Script: [insureEqualityOfSpellFields]
Script Name	checkForDraggedPasteChangesIfLocked
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Used on test setup layouts to revert any locked fields
    #back to the original text.
    If [ //Test setup window nodeLockTest::orderOrLock ≠ "" or nodeLockTestGroup::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "name" ]
    Set Variable [ $lockedGroupName; Value:1 ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    If [ nodeLockTest::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTest::tag & " -- and enter the password to unlock it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ $lockedGroupName = 1 ]
    Show Custom Dialog [ Message: "This group name is locked. Go the node that created it -- " & nodeLockTestGroup::tag & " -- and enter the password to unlock it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    Else If [ //Tag menus window ruleTagMenuGroups::order ≠ "" and ruleTagMenuGroups::match = "health" or tagMenus::orderOrLock = "lock" ]
    #
    #If record is locked by system...
    If [ ruleTagMenuGroups::order ≠ "" and ruleTagMenuGroups::match = "health" and Get ( ActiveFieldName ) = "name" or tagMenus::orderOrLock = "lock" ]
    Show Custom Dialog [ Message: "Record is locked by the system. So you can look and copy text but any changes will be undone by the system."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Else If [ //Tag menus window nodeLockTestTagGroup::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "name" and $$citationMatch ≠ "path" //or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "health" or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "node" or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "copyist" or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "sample" or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "organ" or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "testItem" or nodeLockTagMenus::orderOrLock ≠ "" and Get ( ActiveFieldName ) = "tag" and $$citationMatch = "key" ]
    Set Variable [ $lockedGroupName; Value:1 ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    If [ nodeLockTagMenus::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTagMenus::tag & " -- and enter the password to unlock it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ $lockedGroupName = 1 ]
    Show Custom Dialog [ Message: "This group name is locked. Go the node that created it -- " & nodeLockTestTagGroup::tag & " -- and enter the password to unlock it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    End If

Fields used in this script

    nodeLockTest::orderOrLock
    nodeLockTestGroup::orderOrLock
    nodeLockTest::tag
    nodeLockTestGroup::tag
    ruleTagMenuGroups::order
    ruleTagMenuGroups::match
    tagMenus::orderOrLock
    nodeLockTestTagGroup::orderOrLock
    nodeLockTagMenus::orderOrLock
    nodeLockTagMenus::tag
    nodeLockTestTagGroup::tag

Scripts used in this script

    insureEqualityOfSpellFields

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [checkForDraggedPasteChangesIfLocked]	Parent Folder: [tagMenu]	Next Script: [lockNodesRecords]
Script Name	insureEqualityOfSpellFields
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    editSectionFocuses
    menuSample
    changeSpellingOfKeywordOrNodeTag
    checkForDraggedPasteChangesIfLocked
    removeTextFormattingAndCommas
    backToLearnOrDefaultSetup
    backFromSetup

Script Definition
Script Steps

    #
    #
    If [ $$stopTest = 1 //or $$citationMatch = "key" //or $$citationMatch = "node" //or $$citationMatch = "health" or $$citationMatch = "path" ]
    Exit Script [ ]
    End If
    #
    If [ Get (LayoutTableName) = "tagMenus" ]
    #
    #Exit any fields so do not get can't modify error message
    #because record is in use in another window.
    Go to Field [ ]
    #
    #Speed up script by stopping record load script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopTest; Value:1 ]
    #
    #New window so user's window is not changed.
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    // New Window [ Top: 1; Left: 1 ]
    #
    #Loop thru all records and make sure their spelling
    #has not been changed, and if it has then change it back
    #to the way it was, unless the change was made in the
    #field the user was just working on.
    Go to Record/Request/Page [ First ]
    Loop
    #Test group name.
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and Get (LayoutTableName) = "test" and nodeLockTagMenus::orderOrLock ≠ "" and ruleTagMenuGroups::match = "testGroup" ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    End If
    #Test item group name.
    If [ ruleTagMenuTestGroups::name ≠ ruleTagMenuTestGroups::defaultSectionInfo and Get (LayoutTableName) ≠ "test" and nodeLockTestTagGroup::orderOrLock ≠ "" and ruleTagMenuTestGroups::nameSpelling = "testItemGroup" ]
    Set Field [ ruleTagMenuTestGroups::name; ruleTagMenuTestGroups::defaultSectionInfo ]
    End If
    #Sample group name.
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "sample" ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    End If
    #Health locked group name.
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and ruleTagMenuGroups::order ≠ "" and ruleTagMenuGroups::match = "health" ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    End If
    // #Allow user to change name of group, just not tag for:
    #Sample, health, node, key, copyist, organ, testItem locked group name.
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "node" or ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "key" or ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "sample" or ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "copyist" or ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "organ" or ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock ≠ "" and ruleTagMenuGroups::match = "testItem" ]
    Set Field [ ruleTagMenuGroups::name; ruleTagMenuGroups::nameSpelling ]
    End If
    #Sample, health, node, key, copyist, organ, testItem tag names.
    If [ tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "testItem" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "sample" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "health" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "organ" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "node" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "copyist" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "key" ]
    Set Field [ tagMenus::tag; tagMenus::tagSpelling ]
    End If
    #Locked by system health tags.
    If [ tagMenus::orderOrLock ≠ "" and tagMenus::match = "health" ]
    Set Field [ tagMenus::tag; tagMenus::tagSpelling ]
    End If
    #
    #But if node is not locked, then apply changes to field.
    #Group name.
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and Get (LayoutTableName) = "test" and nodeLockTagMenus::orderOrLock = "" and ruleTagMenuGroups::match = "testGroup" ]
    Set Field [ ruleTagMenuGroups::nameSpelling; ruleTagMenuGroups::name ]
    End If
    #Test item group name.
    If [ ruleTagMenuTestGroups::name ≠ ruleTagMenuTestGroups::defaultSectionInfo and Get (LayoutTableName) ≠ "test" and nodeLockTagMenus::orderOrLock = "" and ruleTagMenuTestGroups::nameSpelling = "testItemGroup" ]
    Set Field [ ruleTagMenuTestGroups::defaultSectionInfo; ruleTagMenuTestGroups::name ]
    End If
    #Sample group name.
    If [ ruleTagMenuGroups::name ≠ ruleTagMenuGroups::nameSpelling and nodeLockTagGroup::orderOrLock = "" and ruleTagMenuGroups::match = "sample" ]
    Set Field [ ruleTagMenuGroups::nameSpelling; ruleTagMenuGroups::name ]
    End If
    #Sample, health, node, copyist, organ, testItem, key, tag names.
    If [ tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "testItem" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "sample" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "health" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "organ" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "copyist" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "node" or tagMenus::tag ≠ tagMenus::tagSpelling and nodeLockTagMenus::orderOrLock = "" and tagMenus::match = "key" ]
    Set Field [ tagMenus::tagSpelling; tagMenus::tag ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Start up record load script and close the window.
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Current Window ]
    Else If [ Get (LayoutTableName) = "test" ]
    #
    #Exit any fields so do not get can't modify error message
    #because record is in use in another window.
    #But first set this stop variable, so if locked field is
    #is a group name field its name will not be changed.
    Set Variable [ $$stopChangeName; Value:1 ]
    Go to Field [ ]
    #
    #Speed up script by stopping record load script.
    Set Variable [ $$ID; Value:"ignore" ]
    Set Variable [ $$stopTest; Value:1 ]
    #
    #New window so user's window is not changed.
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    #Loop thru all records and make sure their spelling
    #has not been changed, and if it has change it back
    #to the way it was, unless the change was made in the
    #field the user was just working on.
    Go to Record/Request/Page [ First ]
    Loop
    #Test group name.
    If [ groupTest::name ≠ groupTest::nameSpelling and nodeLockTestGroup::orderOrLock ≠ "" and groupTest::match = "testGroup" ]
    Set Field [ groupTest::name; groupTest::nameSpelling ]
    End If
    #Test name.
    If [ test::testName ≠ test::testNameRevert and nodeLockTest::orderOrLock ≠ "" ]
    Set Field [ test::testName; test::testNameRevert ]
    End If
    If [ test::testName ≠ test::testNameRevert and nodeLockTest::orderOrLock = "" ]
    Set Field [ test::testNameRevert; test::testName ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Start up record load script and close the window.
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Current Window ]
    Else If [ Get (LayoutTableName) = "tagLocation" ]
    #
    #Exit any fields so do not get can't modify error message
    #because record is in use in another window.
    Go to Field [ ]
    #
    #Speed up script by stopping record load script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopTest; Value:1 ]
    #
    #New window so user's window is not changed.
    New Window [ Height: 1; Width: 1; Top: -1000; Left: -1000 ]
    #
    #Loop thru all records and make sure their spelling
    #has not been changed, and if it has then change it back
    #to the way it was, unless the change was made in the
    #field the user was just working on.
    Go to Record/Request/Page [ First ]
    Loop
    If [ tagLocation::tag ≠ tagLocation::tagSpelling and nodeLockTest::orderOrLock ≠ "" and tagLocation::match = "focus" ]
    Set Field [ tagLocation::tag; tagLocation::tagSpelling ]
    End If
    #
    #But if node is not locked, then apply changes to field.
    If [ tagLocation::tag ≠ tagLocation::tagSpelling and nodeLockTest::orderOrLock = "" and tagLocation::match = "focus" ]
    Set Field [ tagLocation::tagSpelling; tagLocation::tag ]
    End If
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Start up record load script and close the window.
    Set Variable [ $$stopLoadTagRecord ]
    Close Window [ Current Window ]
    End If
    Set Variable [ $$stopTest ]
    Set Variable [ $$ID ]
    Perform Script [ “loadSetupTestRecord” ]

Fields used in this script

    ruleTagMenuGroups::name
    ruleTagMenuGroups::nameSpelling
    nodeLockTagMenus::orderOrLock
    ruleTagMenuGroups::match
    ruleTagMenuTestGroups::name
    ruleTagMenuTestGroups::defaultSectionInfo
    nodeLockTestTagGroup::orderOrLock
    ruleTagMenuTestGroups::nameSpelling
    nodeLockTagGroup::orderOrLock
    ruleTagMenuGroups::order
    tagMenus::tag
    tagMenus::tagSpelling
    tagMenus::match
    tagMenus::orderOrLock
    groupTest::name
    groupTest::nameSpelling
    nodeLockTestGroup::orderOrLock
    groupTest::match
    test::testName
    test::testNameRevert
    nodeLockTest::orderOrLock
    tagLocation::tag
    tagLocation::tagSpelling
    tagLocation::match

Scripts used in this script

    loadSetupTestRecord

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [insureEqualityOfSpellFields]	Parent Folder: [tagMenu]	Next Script: [sampleExit]
Script Name	lockNodesRecords
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Capture the password for comparrison and to return
    #the password field back to if the user fails to get the
    #password right.
    Set Variable [ $password; Value:tagMenus::orderOrLock ]
    Set Field [ TEMP::nodeLock; "" ]
    Go to Field [ ]
    #
    #If there is a password, ask user to enter it.
    If [ tagMenus::orderOrLock ≠ "" ]
    Loop
    Show Custom Dialog [ Message: "Enter the password to unlock this nodes records."; Buttons: “enter”, “cancel”; Input #1: TEMP::nodeLock, Password ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ TEMP::nodeLock; "" ]
    Exit Script [ ]
    End If
    If [ $password = TEMP::nodeLock ]
    Show Custom Dialog [ Message: "unlocked"; Buttons: “OK” ]
    Set Field [ tagMenus::orderOrLock; "" ]
    Set Field [ TEMP::nodeLock; "" ]
    Exit Script [ ]
    End If
    End Loop
    #
    #If there is no password, ask user to create one.
    Else If [ tagMenus::orderOrLock = "" ]
    Set Field [ TEMP::nodeLock; "" ]
    Show Custom Dialog [ Message: "Enter a password to lock this node's records. WARNING: If you can't remember this password, your records will remain locked."; Buttons: “enter”, “cancel”; Input #1: tagMenus::orderOrLock, Password, "password"; Input #2: TEMP::nodeLock, Password, "confirm password" ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ tagMenus::orderOrLock; "" ]
    End If
    Loop
    If [ tagMenus::orderOrLock ≠ TEMP::nodeLock ]
    Show Custom Dialog [ Message: "Passwords did not match."; Buttons: “enter”, “cancel”; Input #1: tagMenus::orderOrLock, Password, "password"; Input #2: TEMP::nodeLock, Password, "confirm password" ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ tagMenus::orderOrLock; "" ]
    Exit Script [ ]
    End If
    End If
    Exit Loop If [ tagMenus::orderOrLock = TEMP::nodeLock ]
    End Loop
    End If

Fields used in this script

    tagMenus::orderOrLock
    TEMP::nodeLock
    <Missing Field>

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [lockNodesRecords]	Parent Folder: [tagMenu]	Next Script: [newTag]
Script Name	sampleExit
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$citationMatch = "sample" and $$findMode = "" or $$citationmatch = "test" and $$findMode = "" ]
    Exit Script [ ]
    End If
    Go to Field [ ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sampleExit]	Parent Folder: [tagMenu]	Next Script: [sortTLRecordsByOrderNumber]
Script Name	newTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $library; Value:tagTable::ksection ]
    Set Variable [ $rule; Value:tagTable::kGroupOrTest ]
    New Record/Request
    Set Field [ tagTable::ksection; $library ]
    Set Field [ tagTable::kGroupOrTest; $rule ]
    Go to Field [ tagTable::tag ]

Fields used in this script

    tagTable::ksection
    tagTable::kGroupOrTest
    tagTable::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newTag]	Parent Folder: [tagMenu]	Next Script: [changeTLRecordsSort_Button]
Script Name	sortTLRecordsByOrderNumber
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuSample
    loadItemRecordForTestTagMenu
    loadItemRecordForSampleTagMenu
    addTagToMainRecord
    changeTLRecordsSort_Button
    loadItemRecordForLearnTagMenuDELETE!!!

Script Definition
Script Steps

    #
    #Perform script for sample and test tags only.
    If [ $$citationMatch = "sample" or $$citationMatch = "test" or Left ( Get (LayoutName) ; 4 ) = "test" ]
    #
    #Make a key for the current record's lock so after
    #this sort is complete the system can go back to
    #this record.
    Set Variable [ $recordKey; Value:testlearn::_Ltestlearn ]
    #
    #Turn off the loadcitation script to speed up the
    #loop portion of the script.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Check if the user does or does not want sample
    #test learn table records sorted by order number.
    #If they do (the tlsamplesort is blank) then sort
    #by order number.
    If [ TEMP::TLSampleSort = "order" and $$citationMatch = "sample" ]
    #
    #Set the tlsamplesort field with a 1. Now if user
    #clicks the sort button it will be because they
    #now want the records sorted by date.
    Set Field [ TEMP::TLSampleSort; 1 ]
    #
    #To speed up the process, sort to the top the records
    #that have ksample numbers. Do not loop thru
    #records whose ksample records are blank.
    Sort Records [ Specified Sort Order: testlearn::kcsample; descending ] [ Restore; No dialog ]
    #
    #Go the first record.
    Go to Record/Request/Page [ First ]
    #
    #Check the sample key fields if in sample mode.
    If [ $$citationMatch = "sample" ]
    Loop
    #The first step is to blank or clear each record's
    #order field, so only those records that are part
    #of the current sample or test will have order numbers
    #and be part of the sort coming right after this
    #assignment of sort order numbers.
    Set Field [ testlearn::orderTest; "" ]
    Exit Loop If [ testlearn::kcsample = "" ]
    #
    #The order number is the left three digits of a
    #sample or test record lock number. ( Remember
    #each record in the database has lock number or
    #ID number. To open the lock and see any record's
    #contents requires a key number that fits the lock.
    #So if a lock number is 123, then the key that will
    #fit this lock is 123 too. ) Because the sample
    #and test key fields (think of key chains) may
    #have several keys, because any one learn record
    #may be part of more than one sample or test.
    #the system must check each learn record's keys
    #one at a time to see if any fit the current sample
    #or test's lock. So beginning with number one
    #the system checks each key. The left most 3 numbers
    #are order numbers so below you will note that
    #they system starts the check on the 4th number
    #from the left.
    Set Variable [ $number; Value:1 ]
    Go to Field [ ]
    Loop
    #
    If [ Middle ( GetValue ( testlearn::kcsample ; $number ) ; 4 ; 42 ) & "¶" = $$tagSample & ¶ ]
    #
    #When and if a key is found that fits the current
    #sample or test record's lock, the order number
    #( left most 3 digits ) is caputred and placed in
    #in the order field.
    Set Field [ testlearn::orderTest; Left ( GetValue ( testlearn::kcsample ; $number ) ; 3 ) ]
    #
    #The 'number' variable is made blank to trigger
    #the exit from this loop, the order number having
    #been assigned.
    Set Variable [ $number ]
    // Else If [ Middle ( GetValue ( testlearn::kcsample ; $number ) ; 4 ; 42 ) & "¶" ≠ $$tagSample & ¶ ]
    // Set Field [ testlearn::orderTest; "" ]
    End If
    Exit Loop If [ $number = "" ]
    #
    #Exit loop if the current record is not part
    #of the selected sample or test after checking
    #all of its keys.
    Exit Loop If [ GetValue ( testlearn::kcsample ; $number ) = "" ]
    #
    #Add 1 to the 'number' varaible after each key
    #in the key field is checked, to direct the system
    #to check the next key.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    #Sort the records by order field.
    Sort Records [ Specified Sort Order: testlearn::orderTest; based on value list: “order” testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    #Return focus to record user was focused on at
    #the start of this script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ $recordkey = testlearn::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Turn loadcitation script back on and exit script.
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    End If
    #
    #
    #
    #
    #Check if the user does or does not want test
    #test learn table records sorted by order number.
    #If they do (the tlsampletest is blank) then sort
    #by order number.
    If [ TEMP::TLTestSort = "order" and $$citationMatch = "test" ]
    #
    #To speed up the process, sort to the top the records
    #that have ksample numbers. Do not loop thru
    #records whose ksample records are blank.
    Sort Records [ Specified Sort Order: testlearn::kctest; descending ] [ Restore; No dialog ]
    #
    #Go the first record.
    Go to Record/Request/Page [ First ]
    #
    #Check the test key fields if in sample mode.
    If [ $$citationMatch = "test" ]
    Loop
    #
    #The first step is to blank or clear each record's
    #order field, so only those records that are part
    #of the current sample or test will have order numbers
    #and be part of the sort coming right after this
    #assignment of sort order numbers.
    Set Field [ testlearn::orderTest; "" ]
    Exit Loop If [ testlearn::kctest = "" ]
    #
    #The order number is the left three digits of a
    #sample or test record lock number. ( Remember
    #each record in the database has lock number or
    #ID number. To open the lock and see any record's
    #contents requires a key number that fits the lock.
    #So if a lock number is 123, then the key that will
    #fit this lock is 123 too. ) Because the sample
    #and test key fields (think of key chains) may
    #have several keys, because any one learn record
    #may be part of more than one sample or test.
    #the system must check each learn record's keys
    #one at a time to see if any fit the current sample
    #or test's lock. So beginning with number one
    #the system checks each key. The left most 3 numbers
    #are order numbers so below you will note that
    #they system starts the check on the 4th number
    #from the left.
    Set Variable [ $number; Value:1 ]
    Go to Field [ ]
    Loop
    If [ Middle ( GetValue ( testlearn::kctest ; $number ) ; 4 ; 42 ) & "¶" = $$tagtest & ¶ ]
    #
    #When and if a key is found that fits the current
    #sample or test record's lock, the order number
    #( left most 3 digits ) is caputred and placed in
    #in the order field.
    Set Field [ testlearn::orderTest; Left ( GetValue ( testlearn::kctest ; $number ) ; 3 ) ]
    #
    #The 'number' variable is made blank to trigger
    #the exit from this loop, the order number having
    #been assigned.
    Set Variable [ $number ]
    End If
    Exit Loop If [ $number = "" ]
    #
    #Exit loop if the current record is not part
    #of the selected sample or test after checking
    #all of its keys.
    Exit Loop If [ GetValue ( testlearn::kctest ; $number ) = "" ]
    #
    #Add 1 to the 'number' varaible after each key
    #in the key field is checked, to direct the system
    #to check the next key.
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    #Sort the records by order field.
    Sort Records [ Specified Sort Order: testlearn::orderTest; based on value list: “order” testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    #Return focus to record user was focused on at
    #the start of this script.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ $recordkey = testlearn::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Turn loadcitation script back on and exit script.
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    End If
    #
    End If

Fields used in this script

    testlearn::_Ltestlearn
    TEMP::TLSampleSort
    testlearn::kcsample
    testlearn::orderTest
    testlearn::timestamp
    TEMP::TLTestSort
    testlearn::kctest

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sortTLRecordsByOrderNumber]	Parent Folder: [tagMenu]
Script Name	changeTLRecordsSort_Button
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Perform script for sample and test tags only.
    If [ $$citationMatch = "sample" and $$findMode = "" or $$citationmatch = "test" and $$findMode = "" ]
    #
    #If current sort is by date, then sort records by
    #order number.
    If [ TEMP::TLTestSort = "" and $$citationMatch = "test" ]
    Set Field [ TEMP::TLTestSort; "order" ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    Exit Script [ ]
    Else If [ TEMP::TLSampleSort = "" and $$citationMatch = "sample" ]
    Set Field [ TEMP::TLSampleSort; "order" ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    Exit Script [ ]
    End If
    Set Field [ TEMP::TLTestSort; "" ]
    #
    #Sort the records by date field, if current sort is
    #by order number.
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    #
    #Set the sort preference field to date.
    If [ $$citationMatch = "sample" ]
    Set Field [ TEMP::TLSampleSort; "" ]
    Else If [ $$citationMatch = "test" ]
    Set Field [ TEMP::TLTestSort; "" ]
    End If
    #
    End If

Fields used in this script

    TEMP::TLTestSort
    TEMP::TLSampleSort
    testlearn::date
    testlearn::timestamp

Scripts used in this script

    sortTLRecordsByOrderNumber

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


probablyNotInUse
	Parent Folder: [probablyNotInUse]
Script Name	loadItemRecordForLearnTagMenuDELETE!!!
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    loadCitation OLD

Script Definition
Script Steps

    #Capture recordID to conditionally format current record.
    If [ $$stopLoadTagRecord ≠ 1 ]
    If [ $$citationMatch = "sample" ]
    Go to Field [ ]
    #
    #The 'sample' variable may have more than one
    #key in it. So we need a variable with just this
    #records keys in it to conditionally formatt all
    #learn window records tagged with it.
    Set Variable [ $$tagSample; Value:tagMenus::_Ltag ]
    Set Variable [ $$SampleOrTestID; Value:Get (RecordID) ]
    If [ $$add = 1 and $$citationMatch = $$addCitationMatch ]
    Else If [ $$add = "" ]
    End If
    Refresh Window
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    If [ TEMP::TLSampleSort = "" ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Select Window [ Name: "Learn"; Current file ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Set Variable [ $$tagSample; Value:tagMenus::_Ltag ]
    Set Field [ TEMP::TLSampleSort; "" ]
    End If
    Select Window [ Name: "Learn"; Current file ]
    If [ TEMP::TLSampleSort = 1 ]
    Set Field [ TEMP::TLSampleSort; "" ]
    Perform Script [ “sortTLRecordsByOrderNumber” ]
    End If
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If
    End If

Fields used in this script

    tagMenus::_Ltag
    TEMP::TLSampleSort

Scripts used in this script

    sortTLRecordsByOrderNumber

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


menuFind
	Parent Folder: [menuFind]	Next Script: [menuNodeFind]
Script Name	menuSampleFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"sample" ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFindSample” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnFindStuffSample” (tagMenus) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “learnFindSample” (tagMenus) ]
    End If
    #
    #Find medium tags. Medium tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortSample = "cat" or TEMP::sortSample = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortSample = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortSample
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnFindSample
    learnFindStuffSample

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuSampleFind]	Parent Folder: [menuFind]	Next Script: [menuKeyFind]
Script Name	menuNodeFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"node" ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnKeywordOrNodeFind” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnKeywordOrNodeSFind” (tagMenus) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNodeFind” (tagMenus) ]
    End If
    #
    #Find node tags.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortNode = "cat" or TEMP::sortNode = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortNode = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortNode
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnKeywordOrNodeFind
    learnKeywordOrNodeSFind
    ReferenceMenu2keywordOrNodeFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuNodeFind]	Parent Folder: [menuFind]	Next Script: [menuHealthFind]
Script Name	menuKeyFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"key" ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnKeywordOrNodeFind” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnKeywordOrNodeSFind” (tagMenus) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNodeFind” (tagMenus) ]
    End If
    #
    #Find key tags for library section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortKey = "cat" or TEMP::sortKey = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortKey
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnKeywordOrNodeFind
    learnKeywordOrNodeSFind
    ReferenceMenu2keywordOrNodeFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuKeyFind]	Parent Folder: [menuFind]	Next Script: [menuTestFind]
Script Name	menuHealthFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"health" ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFind” (tagMenus) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnSFind” (tagMenus) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenuFind” (tagMenus) ]
    End If
    #
    #Find Permission tags. Permission tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortHealth = "cat" or TEMP::sortHealth = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortHealth = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::InventoryLibaryYN
    tagMenus::match
    TEMP::sortHealth
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnFind
    learnSFind
    ReferenceMenuFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuHealthFind]	Parent Folder: [menuFind]	Next Script: [menuMediumFind]
Script Name	menuTestFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"test" ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFindTest” (test) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnFindSTest” (test) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “learnFindTest” (test) ]
    End If
    #
    #Find section tags. Section tags are library
    #sections and any brainstorm or evidence record
    #can be tagged with any section item record SO
    #find all library sections current record is
    #assigned to.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ test::ksection; TEMP::ksection ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleSection::name; ascending groupTest::name; ascending test::testName; ascending ] [ Restore; No dialog ]
    #
    // #If no records exist then create one.
    // If [ Get (FoundCount)=0 ]
    // Perform Script [ “newCitationMenuGroup” ]
    // End If
    #
    // #Sort according to current users wishes. By default
    // #the sort will be by category which is set by editCitation script.
    // If [ TEMP::sortMedium = "cat" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortMedium = "abc" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$section = test::_Ltest ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$section ≠ test::_Ltest ]
    Go to Record/Request/Page [ First ]
    Exit Script [ ]
    End If
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$citationItem = ruleSection::_Lgroup ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ $$citationItem ≠ test::_Ltest ]
    Go to Record/Request/Page [ First ]
    Exit Script [ ]
    End If
    #
    #Inform user of items use on both screens.
    Set Variable [ $$citationItem; Value:test::_Ltest ]
    Refresh Window
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Go to Field [ ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"test" ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFindTest” (test) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “learnFindTest” (test) ]
    End If
    #
    #Find section tags. Test tags are section
    #items. Any brainstorm or evidence record
    #can be tagged with any section item record SO
    #find all library sections current record is
    #assigned to.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ ruleSection::match; "section" ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: ruleSection::name; ascending groupTest::name; ascending test::testName; ascending ] [ Restore; No dialog ]
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::InventoryLibaryYN
    TEMP::ksection
    test::ksection
    ruleSection::name
    groupTest::name
    test::testName
    TEMP::sortMedium
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    test::_Ltest
    ruleSection::_Lgroup
    ruleSection::match

Scripts used in this script

    newCitationMenuGroup

Layouts used in this script

    learnFindTest
    learnFindSTest

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuTestFind]	Parent Folder: [menuFind]	Next Script: [menuCitationFind]
Script Name	menuMediumFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"medium" ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFind” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenuFind” (tagMenus) ]
    End If
    #
    #Find medium tags. Medium tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortMedium = "cat" or TEMP::sortMedium = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortMedium = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    tagMenus::match
    TEMP::sortMedium
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnFind
    ReferenceMenuFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuMediumFind]	Parent Folder: [menuFind]	Next Script: [menuReferenceFind]
Script Name	menuCitationFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"cite" ]
    #
    #Set testlearn internal reference field conditional
    #formatting to transparent.
    Set Variable [ $$internal ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFindCite” (reference) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “learnFindCite” (reference) ]
    End If
    #
    #Find Citations for this library.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    // Set Field [ reference::filterFind; "main" ]
    // Set Field [ reference::ktest; TEMP::ktest ]
    Perform Find [ ]
    Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::knodePrimary: “=” ] [ Restore ]
    Extend Found Set [ Specified Find Requests: Find Records; Criteria: reference::referenceNodes: “*” ] [ Restore ]
    // Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::Title: “=” ] [ Restore ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortCite = "cat" or TEMP::sortCite = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortCite = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::ksection
    reference::kcsection
    reference::filterFind
    TEMP::ktest
    reference::ktest
    reference::referenceNodes
    tagKeywordPrimary::orderOrLock
    tagKeywordPrimary::tag
    reference::referenceShort
    TEMP::sortCite
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnFindCite

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuCitationFind]	Parent Folder: [menuFind]	Next Script: [menuCopyistFind]
Script Name	menuReferenceFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"ref" ]
    #
    #Set testlearn internal reference field conditional
    #formatting to transparent.
    Set Variable [ $$internal ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFindCite” (reference) ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnFindStuffCite” (reference) ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “learnFindCite” (reference) ]
    End If
    #
    #Find References for this library.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Set Field [ reference::filterFind; "main" ]
    Set Field [ reference::show; "show in learn" ]
    End If
    // Set Field [ reference::filterFind; "main" ]
    // Set Field [ reference::ktest; TEMP::ktest ]
    Perform Find [ ]
    If [ TEMP::InventoryLibaryYN = "" ]
    Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::knodePrimary: “=” ] [ Restore ]
    Extend Found Set [ Specified Find Requests: Find Records; Criteria: reference::referenceNodes: “*” ] [ Restore ]
    Constrain Found Set [ Specified Find Requests: Omit Records; Criteria: reference::Title: “=” ] [ Restore ]
    End If
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortRef = "cat" or TEMP::sortRef = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortRef = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    TEMP::InventoryLibaryYN
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    reference::show
    TEMP::ktest
    reference::ktest
    reference::referenceNodes
    tagKeywordPrimary::orderOrLock
    tagKeywordPrimary::tag
    reference::referenceShort
    TEMP::sortRef
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnFindCite
    learnFindStuffCite

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuReferenceFind]	Parent Folder: [menuFind]	Next Script: [menuPathFind]
Script Name	menuCopyistFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"copyist" ]
    #
    #Goto correct layout.
    Go to Layout [ “ReferenceMenuFind” (tagMenus) ]
    #
    #Find copyist tags. Copyist tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortCopyist = "cat" or TEMP::sortCopyist = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortCopyist = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    tagMenus::match
    TEMP::sortCopyist
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    ReferenceMenuFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuCopyistFind]	Parent Folder: [menuFind]	Next Script: [menuOrganFind]
Script Name	menuPathFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"path" ]
    #
    #Goto correct layout.
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “learnFind” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenuFind” (tagMenus) ]
    End If
    #
    #Find Path tags. Path tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "Path" ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortPath = "cat" or TEMP::sortPath = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortPath = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    tagMenus::match
    TEMP::sortPath
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    learnFind
    ReferenceMenuFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuPathFind]	Parent Folder: [menuFind]	Next Script: [findReferernce]
Script Name	menuOrganFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"organ" ]
    #
    #Goto correct layout.
    Go to Layout [ “ReferenceMenuFind” (tagMenus) ]
    #
    #Find Organ tags. Organ tags are available to all library sections.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "organ" ]
    Perform Find [ ]
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortOrgan = "cat" or TEMP::sortOrgan = "" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortOrgan = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stopLoadTagRecord ]

Fields used in this script

    tagMenus::match
    TEMP::sortOrgan
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag

Scripts used in this script

Layouts used in this script

    ReferenceMenuFind

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [menuOrganFind]	Parent Folder: [menuFind]
Script Name	findReferernce
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #(This script was attached to find button on tags menu
    #in Learn mode. I removed the button.)
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    #As going to the other window will be involved
    #stop the record load script on that window until
    #this script is finished to speed things up and
    #stop flashing effect.
    Set Variable [ $$stoploadCitation; Value:1 ]
    // Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    // Set Variable [ $$foundLayout ]
    #
    #Find all Learn records in a section. This would
    #need to be done if the user was just in find mode
    #on the tag screen and was showing only a few
    #of a section's records using this mode.
    If [ Get ( WindowName ) = "Learn" ]
    If [ $$add = 1 ]
    Show Custom Dialog [ Message: "Find learn, or test discovery, or both types of records?"; Buttons: “learn”, “discovery”, “both” ]
    Enter Find Mode [ ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Field [ testlearn::kcsection; "*" ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ testlearn::kaudienceLocation; "*" ]
    Else If [ Get ( LastMessageChoice ) = 3 ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    End If
    Show Custom Dialog [ Message: "limit find to just this section -- " & TEMP::sectionName & " -- or find for entire library?"; Buttons: “section”, “library” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Field [ reference::kcsection; "==" & TEMP::ksection ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    End If
    Else If [ $$add ≠ 1 ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    // Set Field [ testlearn::filterFind; "main" & ¶ ]
    End If
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    Exit Script [ ]
    End If
    #
    If [ Get ( WindowName ) = "References" ]
    #find on reference layout ...
    If [ Left (Get (LayoutName) ; 1) = "r" and $$add ≠ "" ]
    Show Custom Dialog [ Message: "Find all reference records for the " & TEMP::sectionName & " section or show references for all sections in the library?"; Buttons: “section”, “all” ]
    Enter Find Mode [ ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ reference::kcsection; "*" ]
    End If
    Else If [ Left (Get (LayoutName) ; 1) = "r" and $$add = "" ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    #
    #find on learn layout ...
    Else If [ Left (Get (LayoutName) ; 1) = "l" ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    // Set Field [ testlearn::filterFind; "main" & ¶ ]
    End If
    Else If [ Get ( WindowName ) = "Tag Menus" ]
    Show Custom Dialog [ Message: "Find all reference records for the " & TEMP::sectionName & " section or show references for all sections in the library?"; Buttons: “section”, “all” ]
    Enter Find Mode [ ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Set Field [ reference::kcsection; "==" & TEMP::ksection ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ reference::kcsection; "*" ]
    End If
    End If
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    Select Window [ Name: "Tag Menus"; Current file ]

Fields used in this script

    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    testlearn::kcsection
    testlearn::kaudienceLocation
    testlearn::filterFind
    TEMP::sectionName
    TEMP::ksection
    reference::kcsection
    testlearn::date
    testlearn::timestamp

Scripts used in this script

    loadCitation

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


pictures
	Parent Folder: [pictures]	Next Script: [pictureDelete]
Script Name	pictureInsert
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    If [ reference::picture ≠ "" and reference::lock = "" ]
    Show Custom Dialog [ Message: "Replace current picture?"; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Go to Field [ reference::picture ]
    Insert Picture [ ]
    Go to Field [ ]
    End If
    Else If [ testlearn::Picture ≠ "" ]
    Show Custom Dialog [ Message: "Replace current picture?"; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Go to Field [ testlearn::Picture ]
    Insert Picture [ ]
    Go to Field [ ]
    End If
    Else If [ testlearnReportTags::Picture ≠ "" ]
    Show Custom Dialog [ Message: "Replace current picture?"; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Go to Field [ testlearnReportTags::Picture ]
    Insert Picture [ ]
    Go to Field [ ]
    End If
    Else If [ testlearnReportTags::Picture = "" ]
    Show Custom Dialog [ Message: "Select a picture to insert."; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Go to Field [ testlearnReportTags::Picture ]
    Insert Picture [ ]
    Go to Field [ ]
    End If
    Else If [ Get ( LayoutTableName ) = "test" ]
    If [ groupTest::testReportPicture = "" ]
    Go to Field [ groupTest::testReportPicture ]
    Insert Picture [ ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    Show Custom Dialog [ Message: "Replace current picture or delete it?"; Buttons: “Cancel”, “replace”, “delete” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Go to Field [ groupTest::testReportPicture ]
    Insert Picture [ ]
    Go to Field [ ]
    Else If [ Get ( LastMessageChoice ) = 3 ]
    Set Field [ groupTest::testReportPicture; "" ]
    Go to Field [ ]
    End If
    End If
    #
    #

Fields used in this script

    reference::picture
    reference::lock
    testlearn::Picture
    testlearnReportTags::Picture
    groupTest::testReportPicture

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [pictureInsert]	Parent Folder: [pictures]	Next Script: [pictureExport]
Script Name	pictureDelete
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    If [ reference::picture ≠ "" and reference::lock = "" ]
    Show Custom Dialog [ Message: "Delete current picture?"; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ reference::picture; "" ]
    // Close Window [ Current Window ]
    // Exit Script [ ]
    // Halt Script
    End If
    Else If [ testlearn::Picture ≠ "" ]
    Show Custom Dialog [ Message: "Delete current picture?"; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ testlearn::Picture; "" ]
    // Close Window [ Current Window ]
    // Exit Script [ ]
    // Halt Script
    End If
    Else If [ testlearnReportTags::Picture ≠ "" ]
    Show Custom Dialog [ Message: "Delete current picture?"; Buttons: “Cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ testlearnReportTags::Picture; "" ]
    // Close Window [ Current Window ]
    // Exit Script [ ]
    // Halt Script
    End If
    End If
    #
    #

Fields used in this script

    reference::picture
    reference::lock
    testlearn::Picture
    testlearnReportTags::Picture

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [pictureDelete]	Parent Folder: [pictures]	Next Script: [clearpicture1]
Script Name	pictureExport
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    If [ reference::picture ≠ "" ]
    Export Field Contents [ reference::picture ]
    Else If [ testlearn::Picture ≠ "" ]
    Export Field Contents [ testlearn::Picture ]
    Else If [ testlearnReportTags::Picture ≠ "" ]
    Export Field Contents [ testlearnReportTags::Picture ]
    End If

Fields used in this script

    reference::picture
    testlearn::Picture
    testlearnReportTags::Picture

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [pictureExport]	Parent Folder: [pictures]	Next Script: [inUsePart2picture1]
Script Name	clearpicture1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto ]
    Perform Script [ “reportClearDiscoveryLink” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto

Scripts used in this script

    reportClearDiscoveryLink

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [clearpicture1]	Parent Folder: [pictures]	Next Script: [inUsePart2picture2]
Script Name	inUsePart2picture1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto ]
    Perform Script [ “inUsePart3” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto

Scripts used in this script

    inUsePart3

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart2picture1]	Parent Folder: [pictures]	Next Script: [clearpicture2]
Script Name	inUsePart2picture2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto2 ]
    Perform Script [ “inUsePart3” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto2

Scripts used in this script

    inUsePart3

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart2picture2]	Parent Folder: [pictures]	Next Script: [clearpicture3]
Script Name	clearpicture2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto2 ]
    Perform Script [ “reportClearDiscoveryLink” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto2

Scripts used in this script

    reportClearDiscoveryLink

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [clearpicture2]	Parent Folder: [pictures]	Next Script: [clearpicture4]
Script Name	clearpicture3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto3 ]
    Perform Script [ “reportClearDiscoveryLink” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto3

Scripts used in this script

    reportClearDiscoveryLink

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [clearpicture3]	Parent Folder: [pictures]	Next Script: [inUsePart2picture3]
Script Name	clearpicture4
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto4 ]
    Perform Script [ “reportClearDiscoveryLink” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto4

Scripts used in this script

    reportClearDiscoveryLink

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [clearpicture4]	Parent Folder: [pictures]	Next Script: [inUsePart2picture4]
Script Name	inUsePart2picture3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto3 ]
    Perform Script [ “inUsePart3” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto3

Scripts used in this script

    inUsePart3

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart2picture3]	Parent Folder: [pictures]	Next Script: [addLinksPicturesToTagsMode]
Script Name	inUsePart2picture4
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto4 ]
    Set Variable [ $$photo ]
    Perform Script [ “inUsePart3” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto4

Scripts used in this script

    inUsePart3

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart2picture4]	Parent Folder: [pictures]	Next Script: [CHUNKaddPictureToTag]
Script Name	addLinksPicturesToTagsMode
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuNode
    menuKey

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #If node is currenlty locked then stop script, inform user.
    If [ nodeLockTagMenus::orderOrLock ≠ "" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "This record is locked. Go the node that created it -- " & nodeLockTagMenus::tag & " -- and enter the password to unlock it and then you will be able to add pictures and links to it."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    If [ nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "sample" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "health" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "health" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "health" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "health" or nodeLockTagMenus::orderOrLock ≠ "" and tagMenus::match = "test" ]
    Show Custom Dialog [ Message: "This record is currently locked. Select the node that created it and enter the password to unlock it, then you will able to start the delete process."; Buttons: “OK” ]
    Exit Script [ ]
    Else If [ tagMenus::orderOrLock ≠ "" and tagMenus::match = "health" ]
    Show Custom Dialog [ Message: "This record is locked by the system."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #This script allows users to add pictures and
    #file links to tags from citation records.
    #
    #If on the test setup layout, then stop the script
    #if the user has not created any tags to add pictures
    #and links to
    If [ TEMP::ktest ≠ "" and Get (RecordNumber) = 0 ]
    Show Custom Dialog [ Message: "Create a tag record then click the add button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user is not in add mode (indicated green highlight
    #on 'add' button) then enter add mode.
    #Go to layout where user can see all
    #possible places an item can be added:
    #3 picture places and 3 link places.
    If [ $$add = "" ]
    #
    #if user was on the keyword or nod tag layout ...
    If [ $$citationMatch = "key" or $$citationMatch = "node" ]
    #
    #Remember layout user was on.
    Set Variable [ $$tagLayout; Value:Get (LayoutName) ]
    Go to Layout [ “addMenuNodeKeyword” (tagMenus) ]
    #
    #if user was on the testItem tag layout ...
    Else If [ $$citationMatch = "testItem" ]
    #
    #Remember layout user was on.
    Set Variable [ $$tagLayout; Value:Get (LayoutName) ]
    Go to Layout [ “addMenuTestItem” (tagMenus) ]
    #
    #if user was any of the other tag layouts ...
    Else If [ 1 = 1 ]
    #
    #Remember layout user was on.
    Set Variable [ $$tagLayout; Value:Get (LayoutName) ]
    Go to Layout [ “addMenu1” (tagMenus) ]
    End If
    #
    #Conditionally format add button.
    Set Variable [ $$add; Value:1 ]
    Refresh Window
    #
    #Capture main window layout.
    #Capture record user is on.
    #Stop record load script to speed things up.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ Get (LastError) = 112 ]
    #
    #If setup ...
    Select Window [ Name: "Setup"; Current file ]
    Set Variable [ $$returnWIndow; Value:Get (LayoutName) ]
    Set Variable [ $$returnRecord; Value:test::_Ltest ]
    Else If [ Get (LastError) ≠ 112 ]
    #
    #If learn ...
    Set Variable [ $$returnWIndow; Value:"Learn" ]
    Set Variable [ $$returnLayout; Value:Get (LayoutName) ]
    Set Variable [ $$returnRecord; Value:testlearn::_Ltestlearn ]
    End If
    Else If [ Get (LastError) ≠ 112 ]
    #
    #If references ...
    Set Variable [ $$returnWIndow; Value:"References" ]
    Set Variable [ $$returnRecord; Value:reference::_Lreference ]
    End If
    #
    #Re-title main window.
    Set Window Title [ Current Window; New Title: "References" ]
    #
    #Goto the referenceTag layout.
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    // #Find all citations for current tag set.
    // #( the user can always click the 'all' button to
    // # to see all the records they can add to the tag
    // # but I figured most of the time the user is creating
    // # creating records during the add process to
    // # to add to tag, and so keep the records to just
    // # those created for a type of tag would be easier
    // # on the user. )
    // Set Error Capture [ On ]
    // Allow User Abort [ Off ]
    // Enter Find Mode [ ]
    // Set Field [ reference::kcsection; TEMP::ksection ]
    // #
    // #If the citationMatch equal "key" then substitute
    // #"keyword" for "key" as on the layout it makes
    // #more sense to have the user check a keyword
    // #checkbox item than a key item as key is short
    // #for keyword in this case.
    // #( You can see these checkboxes at the bottom
    // # of every Reference record )
    // If [ $$citationMatch = "key" ]
    // Set Field [ reference::filterFind; "*" & "keyword" ]
    // #
    // #If the citationMatch equals any other tag type ...
    // Else If [ $$citationMatch ≠ "key" ]
    // Set Field [ reference::filterFind; "*" & Quote ( $$citationMatch ) ]
    // End If
    // #
    // Perform Find [ ]
    #
    #Clear the stop load record variable and load
    #the current record's info.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Go to tag menu window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Exit Script [ ]
    #
    #END start add mode
    #
    #
    #
    #
    #BEGIN stop add mode
    #
    #If in add mode then clear the add variable to conditionally
    #format the 'add' button to indicate that add mode
    #has been turned off.
    Else If [ $$add = 1 ]
    Set Variable [ $$add ]
    #
    #If the user was in test mode prior to add mode ...
    If [ $$citationMatch = "testItem" ]
    #
    #This may be lazy, but instead of doing an if
    #test to figure out what window a user is in,
    #it seems that telling the system to select both
    #possible windows the user could be
    #in works just fine. The system always
    #selects the one the user is in.
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    #
    #Now loop to the record the user was on,
    #and turn off the load record script to speed things
    #up. ( This record set does not need to be found
    # first because during add mode test records
    # are not touched. )
    Set Variable [ $$ID; Value:"ignore" ]
    Go to Layout [ “testSetup” (test) ]
    Loop
    Exit Loop If [ test::_Ltest = $$returnRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Set the window title to Setup and turn back on
    #the load record script, but do not load the record
    #as this record's variables are already loaded.
    Set Window Title [ Current Window; New Title: "Setup" ]
    Set Variable [ $$ID; Value:test::_Ltest ]
    #
    #Go to the tag menu and perform the TestItem
    #menu script to reset the conditional formatting.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    Perform Script [ “menuTestItem” ]
    #
    #Clear all add mode variables and exit script.
    Set Variable [ $$returnWindow ]
    Set Variable [ $$returnLayout ]
    Set Variable [ $$returnRecord ]
    Set Variable [ $$tagLayout ]
    Exit Script [ ]
    #
    #If the user was in default mode prior to add mode ...
    Else If [ $$returnWindow = "defaultSetup" ]
    #
    #This may be lazy, but instead of doing an if
    #test to figure out what window a user is in,
    #it seems that telling the system to select both
    #possible windows the user could be
    #in works just fine. The system always
    #selects the one the user is in.
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    #
    #There is always only one default record, so
    #finding and looping to record is not necessary.
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Set Window Title [ Current Window; New Title: "Setup" ]
    #
    #Go to the tag menu and perform the Node
    #menu script to reset the conditional formatting.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “defaultNode1” (tagMenus) ]
    Perform Script [ “defaultNodeMenu” ]
    #
    #Clear all add mode variables and exit script.
    Set Variable [ $$returnWindow ]
    Set Variable [ $$returnLayout ]
    Set Variable [ $$returnRecord ]
    Set Variable [ $$tagLayout ]
    Exit Script [ ]
    End If
    #
    #If going back to a Learn or Reference layout,
    #then first turn off the record load variable.
    #I decided to do it here rather than include it
    #each time before it is needed.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #If the user was in learn mode prior to add mode ...
    If [ $$returnWindow = "Learn" ]
    #
    #Go to tag layout user was on before entering
    #add mode. ( This may not be useful as user
    # could also predict that tag window will stay
    # on the tag it is on in add mode. User might
    # not remember what tag they where on when
    # they started add mode. Have to see if this
    # is useful or not. )
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    If [ $$citationMatch = "node" or $$citationMatch = "key" or $$citationMatch = "testItem" ]
    Go to Layout [ $$tagLayout ]
    #
    Else If [ $$citationMatch = "medium" or $$citationMatch = "health" or $$citationMatch = "organ" or $$citationMatch = "copyist" or //$$citationMatch = "sample" or $$citationMatch = "path" ]
    Go to Layout [ $$tagLayout ]
    End If
    #
    #This may be lazy, but instead of doing an if
    #test to figure out what window a user is in,
    #it seems that telling the system to select both
    #possible windows the user could be
    #in works just fine. The system always
    #selects the one the user is in.
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ $$returnLayout ]
    #
    #Find main learn records.
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    // Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    #
    #Go to record user was on before add mode.
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $$returnRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Clear all add mode variables and exit script.
    Set Variable [ $$returnWindow ]
    Set Variable [ $$returnLayout ]
    Set Variable [ $$returnRecord ]
    Set Variable [ $$tagLayout ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #If the user was in reference mode prior to add mode ...
    Else If [ $$returnWIndow = "References" ]
    #
    #Go to tag layout user was on before entering
    #add mode. ( This may not be useful as user
    # could also predict that tag window will stay
    # on the tag it is on in add mode. User might
    # not remember what tag they where on when
    # they started add mode. Have to see if this
    # is useful or not. )
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Get the record number.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    If [ $$citationMatch = "node" or $$citationMatch = "key" or $$citationMatch = "testItem" ]
    Go to Layout [ Middle ( TEMP::layoutRtagK ; 5 ; 42 ) ]
    #
    Else If [ $$citationMatch = "medium" or $$citationMatch = "organ" or $$citationMatch = "copyist" or $$citationMatch = "path" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    #
    Else If [ $$citationMatch = "health" ]
    Go to Layout [ “ReferenceMenu1” (tagMenus) ]
    End If
    #
    #This may be lazy, but instead of doing an if
    #test to figure out what window a user is in,
    #it seems that telling the system to select both
    #possible windows the user could be
    #in works just fine. The system always
    #selects the one the user is in.
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    Set Window Title [ Current Window; New Title: "References" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceStuff” (reference) ]
    Else
    Go to Layout [ “Reference” (reference) ]
    End If
    #
    #Find main reference records.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    // Set Field [ reference::filterFind; "main" ]
    Perform Find [ ]
    #
    #Go to record user was on before add mode.
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ reference::_Lreference = $$returnRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Clear all add mode variables and exit script.
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$returnLayout ]
    Set Variable [ $$returnRecord ]
    Set Variable [ $$returnWindow ]
    Perform Script [ “loadCitation” ]
    #
    #Go to record user was on before add mode.
    Scroll Window [ Home ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    #
    #
    End If
    End If

Fields used in this script

    nodeLockTagMenus::orderOrLock
    nodeLockTagMenus::tag
    tagMenus::match
    tagMenus::orderOrLock
    TEMP::ktest
    test::_Ltest
    testlearn::_Ltestlearn
    reference::_Lreference
    TEMP::ksection
    reference::kcsection
    reference::filterFind
    testlearn::kcsection
    testlearn::filterFind
    testlearn::date
    testlearn::timestamp
    TEMP::layoutRtagK
    TEMP::InventoryLibaryYN
    tagKeywordPrimary::tag

Scripts used in this script

    loadCitation
    menuTestItem
    defaultNodeMenu

Layouts used in this script

    addMenuNodeKeyword
    addMenuTestItem
    addMenu1
    ReferenceAddToTag
    testSetup
    setupTestItem
    defaultSetup
    defaultNode1
    <Missing Layout>
    ReferenceMenu1
    ReferenceStuff
    Reference

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addLinksPicturesToTagsMode]	Parent Folder: [pictures]	Next Script: [addPicture1ToTag]
Script Name	CHUNKaddPictureToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addPicture1ToTag
    addPicture2ToTag
    addPicture3ToTag
    addPicture2ToTag Copy

Script Definition
Script Steps

    #
    #Get key for tag that is to be added to record.
    If [ Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $tag; Value:reference::_Lreference ]
    Set Variable [ $number; Value:$$number ]
    Set Variable [ $$number ]
    Set Variable [ $name; Value:$$name ]
    Set Variable [ $$name ]
    Set Variable [ $window; Value:Get (WindowName) ]
    Else If [ Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $tag; Value:testlearn::_Ltestlearn ]
    Set Variable [ $number; Value:$$number ]
    Set Variable [ $$number ]
    Set Variable [ $name; Value:$$name ]
    Set Variable [ $$name ]
    Set Variable [ $window; Value:Get (WindowName) ]
    End If
    #
    #Add all tag's section keys to reference or learn record.
    Perform Script [ “addTagSectionKeysToMainRecordKeychain” ]
    #
    #Now add all the added record’s node and keyword
    #tags to any newly added sections.
    Perform Script [ “CHUNKaddReferenceNodesAndKeywords” ]
    #
    #Complete process of adding picture to tag.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Remove key from other slots in may be in, to
    #prevent duplicates showing up.
    If [ tagMenus::Kpicture1 = $tag and $number ≠ 1 ]
    Set Field [ tagMenus::Kpicture1; "" ]
    Else If [ tagMenus::Kpicture2 = $tag and $number ≠ 2 ]
    Set Field [ tagMenus::Kpicture2; "" ]
    Else If [ tagMenus::Kpicture3= $tag and $number ≠ 3 ]
    Set Field [ tagMenus::Kpicture3; "" ]
    End If
    #
    #Place key in selected slot.
    If [ $name = "picture" ]
    #
    If [ tagMenus::Kpicture1 ≠ $tag and $number = 1 ]
    Set Field [ tagMenus::Kpicture1; $tag ]
    Select Window [ Name: $window; Current file ]
    Exit Script [ ]
    Else If [ tagMenus::Kpicture2 ≠ $tag and $number = 2 ]
    Set Field [ tagMenus::Kpicture2; $tag ]
    Select Window [ Name: $window; Current file ]
    Exit Script [ ]
    Else If [ tagMenus::Kpicture3 ≠ $tag and $number = 3 ]
    Set Field [ tagMenus::Kpicture3; $tag ]
    Select Window [ Name: $window; Current file ]
    Exit Script [ ]
    End If
    End If
    #
    #Remove it key if it is already in use.
    If [ $name = "picture" ]
    If [ tagMenus::Kpicture1 = $tag and $number = 1 ]
    Set Field [ tagMenus::Kpicture1; "" ]
    Else If [ tagMenus::Kpicture2 = $tag and $number = 2 ]
    Set Field [ tagMenus::Kpicture2; "" ]
    Else If [ tagMenus::Kpicture3 = $tag and $number = 3 ]
    Set Field [ tagMenus::Kpicture3; "" ]
    End If
    Select Window [ Name: $window; Current file ]
    #
    End If
    #

Fields used in this script

    reference::_Lreference
    testlearn::_Ltestlearn
    tagMenus::Kpicture1
    tagMenus::Kpicture2
    tagMenus::Kpicture3

Scripts used in this script

    addTagSectionKeysToMainRecordKeychain
    CHUNKaddReferenceNodesAndKeywords

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKaddPictureToTag]	Parent Folder: [pictures]	Next Script: [addPicture2ToTag]
Script Name	addPicture1ToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Note which button has been clicked ( 1, 2 or 3)
    #and if there is a picture to show then link it
    #to tag user is currently wanting to link it to.
    If [ reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "jpg" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "gif" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "eps" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "jp2" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "psd" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "png" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "pct" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "pcs" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = ".qt" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "sgi" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "tga" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "tif" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "bmp" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "wmf" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "emf" or Right ( reference::URL ; 3 ) = "jpg" or Right ( reference::URL ; 3 ) = "gif" or Right ( reference::URL ; 3 ) = "eps" or Right ( reference::URL ; 3 ) = "jp2" or Right ( reference::URL ; 3 ) = "psd" or Right ( reference::URL ; 3 ) = "png" or Right ( reference::URL ; 3 ) = "pct" or Right ( reference::URL ; 3 ) = "pcs" or Right ( reference::URL ; 3 ) = ".qt" or Right ( reference::URL ; 3 ) = "sgi" or Right ( reference::URL ; 3 ) = "tga" or Right ( reference::URL ; 3 ) = "tif" or Right ( reference::URL ; 3 ) = "bmp" or Right ( reference::URL ; 3 ) = "wmf" or Right ( reference::URL ; 3 ) = "emf" or reference::picture ≠ "" ]
    Set Variable [ $$name; Value:"picture" ]
    Set Variable [ $$number; Value:1 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" ]
    If [ "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" & ¶ ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch & ¶ ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" ]
    If [ "keyword" & ¶ ≠ FilterValues ( reference::filterFind ; "keyword" & ¶) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch & ¶) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddPictureToTag” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::kfileLocation
    reference::fileName
    reference::URL
    reference::picture
    testlearn::filterFind
    reference::filterFind

Scripts used in this script

    CHUNKaddPictureToTag

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addPicture1ToTag]	Parent Folder: [pictures]	Next Script: [addPicture3ToTag]
Script Name	addPicture2ToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Note which button has been clicked ( 1, 2 or 3)
    #and if there is a picture to show then link it
    #to tag user is currently wanting to link it to.
    If [ reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "jpg" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "gif" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "eps" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "jp2" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "psd" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "png" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "pct" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "pcs" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = ".qt" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "sgi" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "tga" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "tif" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "bmp" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "wmf" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "emf" or Right ( reference::URL ; 3 ) = "jpg" or Right ( reference::URL ; 3 ) = "gif" or Right ( reference::URL ; 3 ) = "eps" or Right ( reference::URL ; 3 ) = "jp2" or Right ( reference::URL ; 3 ) = "psd" or Right ( reference::URL ; 3 ) = "png" or Right ( reference::URL ; 3 ) = "pct" or Right ( reference::URL ; 3 ) = "pcs" or Right ( reference::URL ; 3 ) = ".qt" or Right ( reference::URL ; 3 ) = "sgi" or Right ( reference::URL ; 3 ) = "tga" or Right ( reference::URL ; 3 ) = "tif" or Right ( reference::URL ; 3 ) = "bmp" or Right ( reference::URL ; 3 ) = "wmf" or Right ( reference::URL ; 3 ) = "emf" or reference::picture ≠ "" ]
    Set Variable [ $$name; Value:"picture" ]
    Set Variable [ $$number; Value:2 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" ]
    If [ "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" & ¶ ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch & ¶ ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" ]
    If [ "keyword" ≠ GetValue ( FilterValues ( reference::filterFind ; "keyword" ) ; 1 ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch & ¶) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddPictureToTag” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::kfileLocation
    reference::fileName
    reference::URL
    reference::picture
    testlearn::filterFind
    reference::filterFind

Scripts used in this script

    CHUNKaddPictureToTag

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addPicture2ToTag]	Parent Folder: [pictures]	Next Script: [showCitationPicture1inNewWindow]
Script Name	addPicture3ToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Note which button has been clicked ( 1, 2 or 3)
    #and if there is a picture to show then link it
    #to tag user is currently wanting to link it to.
    If [ reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "jpg" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "gif" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "eps" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "jp2" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "psd" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "png" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "pct" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "pcs" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = ".qt" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "sgi" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "tga" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "tif" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "bmp" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "wmf" or reference::kfileLocation ≠ "" and reference::fileName ≠ "" and Right ( reference::fileName ; 3 ) = "emf" or Right ( reference::URL ; 3 ) = "jpg" or Right ( reference::URL ; 3 ) = "gif" or Right ( reference::URL ; 3 ) = "eps" or Right ( reference::URL ; 3 ) = "jp2" or Right ( reference::URL ; 3 ) = "psd" or Right ( reference::URL ; 3 ) = "png" or Right ( reference::URL ; 3 ) = "pct" or Right ( reference::URL ; 3 ) = "pcs" or Right ( reference::URL ; 3 ) = ".qt" or Right ( reference::URL ; 3 ) = "sgi" or Right ( reference::URL ; 3 ) = "tga" or Right ( reference::URL ; 3 ) = "tif" or Right ( reference::URL ; 3 ) = "bmp" or Right ( reference::URL ; 3 ) = "wmf" or Right ( reference::URL ; 3 ) = "emf" or reference::picture ≠ "" ]
    Set Variable [ $$name; Value:"picture" ]
    Set Variable [ $$number; Value:3 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" ]
    If [ "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" & ¶ ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch & ¶ ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" ]
    If [ "keyword" & ¶ ≠ FilterValues ( reference::filterFind ; "keyword" & ¶) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch & ¶) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddPictureToTag” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::kfileLocation
    reference::fileName
    reference::URL
    reference::picture
    testlearn::filterFind
    reference::filterFind

Scripts used in this script

    CHUNKaddPictureToTag

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addPicture3ToTag]	Parent Folder: [pictures]	Next Script: [showCitationPicture2inNewWindow]
Script Name	showCitationPicture1inNewWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Not sure why I decided lock this, but it seems user
    #can't do anything to data by viewing pictures so I
    #disabled the lock steps below.
    // #If node is currenlty locked then stop script, inform user.
    // If [ tagTLNodePrimary::orderOrLock ≠ "" ]
    // Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to add pictures to records assigned to this node."; Buttons: “OK” ]
    // Exit Script [ ]
    // End If
    #
    #Determine where picture or movie is located
    If [ PatternCount ( Get ( ApplicationVersion ) ; "GO" ) ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    New Window [ Height: Get (ScreenHeight); Width: Get (ScreenWidth); Top: 0; Left: 0 ]
    If [ Get (LayoutTableName) = "reference" ]
    Go to Layout [ “ReferencePictureWindow” (reference) ]
    Else If [ Get (LayoutTableName) = "testlearn" or Get (LayoutTableName) = "testlearnReportTags" ]
    Go to Layout [ “LearnPictureWindow” (testlearn) ]
    End If
    Set Variable [ $$stopLoadCitation ]
    Exit Script [ ]
    End If
    #
    #Determine where picture or movie is located
    #on the reference window and then open it.
    If [ Get ( LayoutTableName ) = "test" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    // Go to Field [ reference::picture ]
    // Go to Field [ ]
    // #
    // New Window [ Name: reference::picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    // Go to Layout [ “ReferencePictureWindow” (reference) ]
    Insert Picture [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    End If
    #
    #Determine where picture or movie is located
    #on the reference window and then open it.
    If [ reference::picture ≠ "" or reference::kfileLocation ≠ "" or reference::URL ≠ "" and Get (LayoutName) ≠ "ReferenceEDIT" ]
    If [ reference::picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Field [ reference::picture ]
    Go to Field [ ]
    #
    New Window [ Name: reference::picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “ReferencePictureWindow” (reference) ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & reference::fileName ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & reference::fileName ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & reference::fileName ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & reference::fileName ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagRefFolderPath::tag ; " " ; "%20" ) & Case ( Left ( reference::fileName ; 1 ) = "/" ; Substitute ( reference::fileName ; " " ; "%20" ) ; "/" & Substitute ( reference::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagRefFolderPath::tag ; " " ; " " ) & Case ( Left ( reference::fileName ; 1 ) = "/" ; Substitute ( reference::fileName ; " " ; " " ) ; "/" & Substitute ( reference::fileName ; " " ; " " ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ reference::URL ≠ "" ]
    Open URL [ reference::URL ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #Determine where reference picture or movie is located
    #on the tag menus window and then open it.
    If [ citationPicture1::picture ≠ "" or citationPicture1::kfileLocation ≠ "" or citationPicture1::URL ≠ "" ]
    If [ citationPicture1::picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:tagMenus::Kpicture1 ]
    Go to Field [ ]
    #
    New Window [ Name: citationPicture1::picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “ReferencePictureWindow” (reference) ]
    #
    Enter Find Mode [ ]
    Set Field [ reference::_Lreference; $picture ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture1::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationPicture1::fileName ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationPicture1::fileName ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture1::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationPicture1::fileName ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationPicture1::fileName ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture1::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagPathPicture1_button::tag ; " " ; "%20" ) & Case ( Left ( citationPicture1::fileName ; 1 ) = "/" ; Substitute ( citationPicture1::fileName ; " " ; "%20" ) ; "/" & Substitute ( citationPicture1::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagPathPicture1_button::tag ; " " ; " " ) & Case ( Left ( citationPicture1::fileName ; 1 ) = "/" ; Substitute ( citationPicture1::fileName ; " " ; " " ) ; "/" & Substitute ( citationPicture1::fileName ; " " ; " " ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ citationPicture1::URL ≠ "" ]
    Open URL [ Substitute ( citationPicture1::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #Determine where testlearn picture or movie is located
    #on the tag menus window and then open it.
    If [ TLPicture1::Picture ≠ "" or TLPicture1::kfileLocation ≠ "" or TLPicture1::URL ≠ "" ]
    If [ TLPicture1::Picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:tagMenus::Kpicture1 ]
    Go to Field [ ]
    #
    New Window [ Name: TLPicture1::Picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “LearnPictureWindow” (testlearn) ]
    #
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; $picture ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture1::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLPicture1::filename ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLPicture1::filename ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture1::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLPicture1::filename ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLPicture1::filename ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture1::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagTLPathPicture1_button::tag ; " " ; "%20" ) & Case ( Left ( TLPicture1::filename ; 1 ) = "/" ; Substitute ( TLPicture1::filename ; " " ; "%20" ) ; "/" & Substitute ( TLPicture1::filename ; " " ; "%20" ) ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagTLPathPicture1_button::tag ; " " ; " " ) & Case ( Left ( TLPicture1::filename ; 1 ) = "/" ; Substitute ( TLPicture1::filename ; " " ; " " ) ; "/" & Substitute ( TLPicture1::filename ; " " ; " " ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ TLPicture1::URL ≠ "" ]
    Open URL [ Substitute ( TLPicture1::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #Determine where testlearn picture or movie is located
    #on testlearn Layout and then open it.
    If [ testlearn::Picture ≠ "" or testlearn::kfileLocation ≠ "" or testlearn::URL ≠ "" ]
    If [ testlearn::Picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Field [ ]
    #
    New Window [ Name: testlearn::Picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “LearnPictureWindow” (testlearn) ]
    Go to Field [ testlearn::Picture ]
    Go to Field [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    #
    Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & testlearn::filename ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & testlearn::filename ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagTLFolderPath::tag ; " " ; "%20" ) & Case ( Left ( testlearn::filename ; 1 ) = "/" ; Substitute ( testlearn::filename ; " " ; "%20" ) ; "/" & Substitute ( testlearn::filename ; " " ; "%20" ) ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagTLFolderPath::tag ; " " ; " " ) & Case ( Left ( testlearn::filename ; 1 ) = "/" ; Substitute ( testlearn::filename ; " " ; " " ) ; "/" & Substitute ( testlearn::filename ; " " ; " " ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ testlearn::URL ≠ "" ]
    Open URL [ Substitute ( testlearn::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #Determine where testlearn picture or movie is located
    #on testlearnDiscoveryTag Layout and then open it.
    If [ testlearnReportTags::Picture ≠ "" //or testlearnReportTags::kfileLocation ≠ "" //or testlearnReportTags::URL ≠ "" ]
    If [ testlearnReportTags::Picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Field [ ]
    #
    Close Window [ Name: "Discovery Picture"; Current file ]
    New Window [ Name: "Discovery Picture"; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “reportPictureWindow” (testlearnReportTags) ]
    Go to Field [ testlearnReportTags::Picture ]
    Go to Field [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    #
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & testlearn::filename ; " " ; " " ) ] [ No dialog ]
    // Exit Script [ ]
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & testlearn::filename ; " " ; " " ) ] [ No dialog ]
    // Exit Script [ ]
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagTLFolderPath::tag ; " " ; "%20" ) & Case ( Left ( testlearn::filename ; 1 ) = "/" ; Substitute ( testlearn::filename ; " " ; "%20" ) ; "/" & Substitute ( testlearn::filename ; " " ; "%20" ) ) ] [ No dialog ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagTLFolderPath::tag ; " " ; " " ) & Case ( Left ( testlearn::filename ; 1 ) = "/" ; Substitute ( testlearn::filename ; " " ; " " ) ; "/" & Substitute ( testlearn::filename ; " " ; " " ) ) ] [ No dialog ]
    // Exit Script [ ]
    // Else If [ testlearn::URL ≠ "" ]
    // Open URL [ Substitute ( testlearn::URL ; " " ; "%20" ) ] [ No dialog ]
    // Exit Script [ ]
    End If
    End If
    #
    #Determine where default picture or movie is located
    #on default setup Layout and then open it.
    If [ defaultPictureRef::picture ≠ "" or defaultPictureRef::kfileLocation ≠ "" or defaultPictureRef::URL ≠ "" ]
    If [ defaultPictureRef::picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:defaultPictureRef::_Lreference ]
    Go to Field [ ]
    #
    New Window [ Name: defaultPictureRef::picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “ReferencePictureWindow” (reference) ]
    #
    Enter Find Mode [ ]
    Set Field [ reference::_Lreference; $picture ]
    Pause/Resume Script [ Indefinitely ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    Else If [ FilterValues ( defaultPictureRef::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & defaultPictureRef::fileName ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & defaultPictureRef::fileName ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( defaultPictureRef::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & defaultPictureRef::fileName ; " " ; " " ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & defaultPictureRef::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( defaultPictureRef::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagDefaultFolderPathRef::tag ; " " ; "%20" ) & Case ( Left ( defaultPictureRef::fileName ; 1 ) = "/" ; Substitute ( defaultPictureRef::fileName ; " " ; "%20" ) ; "/" & Substitute ( defaultPictureRef::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagDefaultFolderPathRef::tag ; " " ; " " ) & Case ( Left ( defaultPictureRef::fileName ; 1 ) = "/" ; Substitute ( defaultPictureRef::fileName ; " " ; " " ) ; "/" & Substitute ( defaultPictureRef::fileName ; " " ; " " ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ defaultPictureRef::URL ≠ "" ]
    Open URL [ Substitute ( defaultPictureRef::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    Else If [ defaultPictureTL::Picture ≠ "" or defaultPictureTL::kfileLocation ≠ "" or defaultPictureTL::URL ≠ "" ]
    If [ defaultPictureTL::Picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:defaultPictureTL::_Ltestlearn ]
    Go to Field [ ]
    #
    New Window [ Name: defaultPictureTL::Picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “LearnPictureWindow” (testlearn) ]
    #
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; $picture ]
    Pause/Resume Script [ Indefinitely ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Exit Script [ ]
    Else If [ FilterValues ( defaultPictureTL::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & defaultPictureTL::filename ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & defaultPictureTL::filename ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( defaultPictureTL::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & defaultPictureTL::filename ; " " ; "%20" ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & defaultPictureTL::filename ; " " ; " " ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( defaultPictureTL::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagDefaultFolderPathTL::tag ; " " ; "%20" ) & Case ( Left ( defaultPictureTL::filename ; 1 ) = "/" ; Substitute ( defaultPictureTL::filename ; " " ; "%20" ) ; "/" & Substitute ( defaultPictureTL::filename ; " " ; "%20" ) ) ] [ No dialog ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagDefaultFolderPathTL::tag ; " " ; " " ) & Case ( Left ( defaultPictureTL::filename ; 1 ) = "/" ; Substitute ( defaultPictureTL::filename ; " " ; " " ) ; "/" & Substitute ( defaultPictureTL::filename ; " " ; " " ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ defaultPictureTL::URL ≠ "" ]
    Open URL [ Substitute ( defaultPictureTL::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #If there is no file found then ask user what picture
    #to insert.
    If [ Get (LayoutTableName) = "reference" and Get ( WindowName ) ≠ "Tag Menus" ]
    Go to Field [ reference::picture ]
    Show Custom Dialog [ Message: "Select a picture to insert. "; Buttons: “OK” ]
    Insert Picture [ ]
    Go to Field [ ]
    Else If [ Get (LayoutTableName) = "testlearn" and Get ( WindowName ) ≠ "Tag Menus" ]
    Go to Field [ testlearn::Picture ]
    Show Custom Dialog [ Message: "Select a picture to insert. "; Buttons: “OK” ]
    Insert Picture [ ]
    Go to Field [ ]
    Else If [ Get (LayoutTableName) = "testlearnReportTags" ]
    Close Window [ Name: "Discovery Picture"; Current file ]
    New Window [ Name: "Discovery Picture"; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “reportPictureWindow” (testlearnReportTags) ]
    Go to Field [ testlearnReportTags::Picture ]
    Show Custom Dialog [ Message: "Select a picture to insert. "; Buttons: “OK” ]
    Insert Picture [ ]
    Go to Field [ ]
    Go to Field [ ]
    End If

Fields used in this script

    tagTLNodePrimary::orderOrLock
    reference::picture
    reference::kfileLocation
    reference::URL
    reference::fileName
    tagRefFolderPath::tag
    citationPicture1::picture
    citationPicture1::kfileLocation
    citationPicture1::URL
    tagMenus::Kpicture1
    reference::_Lreference
    citationPicture1::fileName
    tagPathPicture1_button::tag
    TLPicture1::Picture
    TLPicture1::kfileLocation
    TLPicture1::URL
    testlearn::_Ltestlearn
    TLPicture1::filename
    tagTLPathPicture1_button::tag
    testlearn::Picture
    testlearn::kfileLocation
    testlearn::URL
    testlearn::filename
    tagTLFolderPath::tag
    testlearnReportTags::Picture
    defaultPictureRef::picture
    defaultPictureRef::kfileLocation
    defaultPictureRef::URL
    defaultPictureRef::_Lreference
    defaultPictureRef::fileName
    tagDefaultFolderPathRef::tag
    defaultPictureTL::Picture
    defaultPictureTL::kfileLocation
    defaultPictureTL::URL
    defaultPictureTL::_Ltestlearn
    defaultPictureTL::filename
    tagDefaultFolderPathTL::tag

Scripts used in this script

Layouts used in this script

    ReferencePictureWindow
    LearnPictureWindow
    reportPictureWindow

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showCitationPicture1inNewWindow]	Parent Folder: [pictures]	Next Script: [showCitationPicture3inNewWindow]
Script Name	showCitationPicture2inNewWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Determine where reference picture or movie is located
    #on the tag menus window and then open it.
    If [ citationPicture2::picture ≠ "" or citationPicture2::kfileLocation ≠ "" or citationPicture2::URL ≠ "" ]
    If [ citationPicture2::picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:tagMenus::Kpicture2 ]
    Go to Field [ ]
    #
    New Window [ Name: citationPicture2::picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “ReferencePictureWindow” (reference) ]
    #
    Enter Find Mode [ ]
    Set Field [ reference::_Lreference; $picture ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture2::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationPicture2::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture2::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationPicture2::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture2::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagPathPicture2_button::tag ; " " ; "%20" ) & Case ( Left ( citationPicture2::fileName ; 1 ) = "/" ; Substitute ( citationPicture2::fileName ; " " ; "%20" ) ; "/" & Substitute ( citationPicture2::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ citationPicture2::URL ≠ "" ]
    Open URL [ Substitute ( citationPicture2::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #Determine where testlearn picture or movie is located
    #on the tag menus window and then open it.
    If [ TLPicture2::Picture ≠ "" or TLPicture2::kfileLocation ≠ "" or TLPicture2::URL ≠ "" ]
    If [ TLPicture2::Picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:tagMenus::Kpicture2 ]
    Go to Field [ ]
    #
    New Window [ Name: TLPicture2::Picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “LearnPictureWindow” (testlearn) ]
    #
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; $picture ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture2::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLPicture2::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture2::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLPicture2::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture2::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagTLPathPicture2_button::tag & TLPicture2::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ TLPicture2::URL ≠ "" ]
    Open URL [ Substitute ( TLPicture2::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #

Fields used in this script

    citationPicture2::picture
    citationPicture2::kfileLocation
    citationPicture2::URL
    tagMenus::Kpicture2
    reference::_Lreference
    citationPicture2::fileName
    tagPathPicture2_button::tag
    TLPicture2::Picture
    TLPicture2::kfileLocation
    TLPicture2::URL
    testlearn::_Ltestlearn
    TLPicture2::filename
    tagTLPathPicture2_button::tag

Scripts used in this script

Layouts used in this script

    ReferencePictureWindow
    LearnPictureWindow

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showCitationPicture2inNewWindow]	Parent Folder: [pictures]	Next Script: [showReferencePicture1]
Script Name	showCitationPicture3inNewWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Determine where reference picture or movie is located
    #on the tag menus window and then open it.
    If [ citationPicture3::picture ≠ "" or citationPicture3::kfileLocation ≠ "" or citationPicture3::URL ≠ "" ]
    If [ citationPicture3::picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:tagMenus::Kpicture3 ]
    Go to Field [ ]
    #
    New Window [ Name: citationPicture3::picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “ReferencePictureWindow” (reference) ]
    #
    Enter Find Mode [ ]
    Set Field [ reference::_Lreference; $picture ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture3::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationPicture3::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture3::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationPicture3::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationPicture3::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagPathPicture3_button::tag ; " " ; "%20" ) & Case ( Left ( citationPicture3::fileName ; 1 ) = "/" ; Substitute ( citationPicture3::fileName ; " " ; "%20" ) ; "/" & Substitute ( citationPicture3::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ citationPicture3::URL ≠ "" ]
    Open URL [ Substitute ( citationPicture3::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #
    #Determine where testlearn picture or movie is located
    #on the tag menus window and then open it.
    If [ TLPicture3::Picture ≠ "" or TLPicture3::kfileLocation ≠ "" or TLPicture3::URL ≠ "" ]
    If [ TLPicture3::Picture ≠ "" ]
    #To speed up script, stop this script from working.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $picture; Value:tagMenus::Kpicture3 ]
    Go to Field [ ]
    #
    New Window [ Name: TLPicture3::Picture; Height: Get (ScreenHeight)/2; Width: Get (ScreenWidth)/2; Top: Get (ScreenHeight)/4; Left: Get (ScreenWidth)/4 ]
    Go to Layout [ “LearnPictureWindow” (testlearn) ]
    #
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; $picture ]
    Perform Find [ ]
    #
    Set Variable [ $$stoploadCitation ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture3::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLPicture3::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture3::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLPicture3::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLPicture3::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagTLPathPicture3_button::tag & TLPicture3::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ TLPicture3::URL ≠ "" ]
    Open URL [ Substitute ( TLPicture3::URL ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    End If
    End If
    #

Fields used in this script

    citationPicture3::picture
    citationPicture3::kfileLocation
    citationPicture3::URL
    tagMenus::Kpicture3
    reference::_Lreference
    citationPicture3::fileName
    tagPathPicture3_button::tag
    TLPicture3::Picture
    TLPicture3::kfileLocation
    TLPicture3::URL
    testlearn::_Ltestlearn
    TLPicture3::filename
    tagTLPathPicture3_button::tag

Scripts used in this script

Layouts used in this script

    ReferencePictureWindow
    LearnPictureWindow

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showCitationPicture3inNewWindow]	Parent Folder: [pictures]	Next Script: [showReferencePicture2]
Script Name	showReferencePicture1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have choose not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    If [ $$add = "" ]
    Show Custom Dialog [ Message: "Click the 'add' button above and then click this button to see citation for this item. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the field is blank then stop the script.
    #No poin in looking for a record where there isn't one.
    If [ tagMenus::Kpicture1 = "" ]
    Exit Script [ ]
    End If
    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:tagMenus::Kpicture1 ]
    #
    #Determine if the key comes from the testlearn
    #table, and if so perform these script steps.
    If [ TLPicture1::_Ltestlearn ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ <unknown> ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Determine if the key comes from the reference
    #table, and if so perform these script steps.
    Else If [ citationPicture1::_Lreference ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If

Fields used in this script

    tagMenus::Kpicture1
    TLPicture1::_Ltestlearn
    testlearn::_Ltestlearn
    citationPicture1::_Lreference
    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showReferencePicture1]	Parent Folder: [pictures]	Next Script: [showReferencePicture3]
Script Name	showReferencePicture2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have choose not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    If [ $$add = "" ]
    Show Custom Dialog [ Message: "Click the 'add' button above and then click this button to see citation for this item. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the field is blank then stop the script.
    #No poin in looking for a record where there isn't one.
    If [ tagMenus::Kpicture2 = "" ]
    Exit Script [ ]
    End If
    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:tagMenus::Kpicture2 ]
    #
    #Determine if the key comes from the testlearn
    #table, and if so perform these script steps.
    If [ TLPicture2::_Ltestlearn ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ <unknown> ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Determine if the key comes from the reference
    #table, and if so perform these script steps.
    Else If [ citationPicture2::_Lreference ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If key is not found in this section's set of records
    #then look for it in the other sections.
    If [ reference::_Lreference ≠ $key ]
    Enter Find Mode [ ]
    Set Field [ reference::_Lreference; $key ]
    Extend Found Set [ ]
    End If
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If

Fields used in this script

    tagMenus::Kpicture2
    TLPicture2::_Ltestlearn
    testlearn::_Ltestlearn
    citationPicture2::_Lreference
    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showReferencePicture2]	Parent Folder: [pictures]
Script Name	showReferencePicture3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have choose not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    If [ $$add = "" ]
    Show Custom Dialog [ Message: "Click the 'add' button above and then click this button to see citation for this item. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the field is blank then stop the script.
    #No poin in looking for a record where there isn't one.
    If [ tagMenus::Kpicture3 = "" ]
    Exit Script [ ]
    End If
    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:tagMenus::Kpicture3 ]
    #
    #Determine if the key comes from the testlearn
    #table, and if so perform these script steps.
    If [ TLPicture3::_Ltestlearn ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ <unknown> ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Determine if the key comes from the reference
    #table, and if so perform these script steps.
    Else If [ citationPicture3::_Lreference ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If

Fields used in this script

    tagMenus::Kpicture3
    TLPicture3::_Ltestlearn
    testlearn::_Ltestlearn
    citationPicture3::_Lreference
    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


probablyNotInUse
	Parent Folder: [probablyNotInUse]	Next Script: [inUsePart2picture4 Copy]
Script Name	inUsePart2picture3 Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto3 ]
    Perform Script [ “inUsePart3” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto3

Scripts used in this script

    inUsePart3

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart2picture3 Copy]	Parent Folder: [probablyNotInUse]	Next Script: [addPicture2ToTag Copy]
Script Name	inUsePart2picture4 Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #
    Go to Field [ report::_kfPhoto4 ]
    Perform Script [ “inUsePart3” ]
    Go to Field [ ]

Fields used in this script

    report::_kfPhoto4

Scripts used in this script

    inUsePart3

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [inUsePart2picture4 Copy]	Parent Folder: [probablyNotInUse]
Script Name	addPicture2ToTag Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Note which button has been clicked ( 1, 2 or 3)
    #and if there is a picture to show then link it
    #to tag user is currently wanting to link it to.
    If [ reference::kfileLocation ≠ "" and reference::fileName ≠ "" and ruleCitationCategoryMedium::name = "picture" or ruleCitationCategoryMedium::name = "picture" and reference::URL ≠ "" or testlearn::kfileLocation ≠ "" and testlearn::filename ≠ "" and ruleTLCategoryMedium::name = "picture" or ruleTLCategoryMedium::name = "picture" and testlearn::URL ≠ "" ]
    Set Variable [ $$name; Value:"picture" ]
    Set Variable [ $$number; Value:2 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( reference::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddPictureToTag” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::kfileLocation
    reference::fileName
    ruleCitationCategoryMedium::name
    reference::URL
    testlearn::kfileLocation
    testlearn::filename
    ruleTLCategoryMedium::name
    testlearn::URL
    testlearn::filterFind
    reference::filterFind

Scripts used in this script

    CHUNKaddPictureToTag

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


learn
	Parent Folder: [learn]	Next Script: [deleteLearnMainRecord]
Script Name	showFileInTagandLearnWindows
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Show reference file.
    If [ FilterValues ( reference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & reference::fileName ; " " ; " " ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & reference::fileName ; " " ; "%20" ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's x folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & reference::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & reference::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's main folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Exit Script [ ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagRefFolderPath::tag ; " " ; "%20" ) & Case ( Left ( reference::fileName ; 1 ) = "/" ; Substitute ( reference::fileName ; " " ; "%20" ) ; "/" & Substitute ( reference::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagRefFolderPath::tag ; " " ; " " ) & Case ( Left ( reference::fileName ; 1 ) = "/" ; Substitute ( reference::fileName ; " " ; " " ) ; "/" & Substitute ( reference::fileName ; " " ; " " ) ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into " & tagRefFolderPath::tag & "," & " or the external drive it is on is not plugged in, or it's name was changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    End If
    #
    #Show cite file from testlearn window.
    If [ FilterValues ( citeCite::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citeCite::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citeCite::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's x folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Else If [ FilterValues ( citeCite::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citeCite::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citeCite::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's main folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Exit Script [ ]
    Else If [ FilterValues ( citeCite::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & TLciteFolderPath::tag ; " " ; "%20" ) & Case ( Left ( citeCite::fileName ; 1 ) = "/" ; Substitute ( citeCite::fileName ; " " ; "%20" ) ; "/" & Substitute ( citeCite::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & TLciteFolderPath::tag ; " " ; " " ) & Case ( Left ( citeCite::fileName ; 1 ) = "/" ; Substitute ( citeCite::fileName ; " " ; " " ) ; "/" & Substitute ( citeCite::fileName ; " " ; " " ) ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into " & tagRefFolderPath::tag & "," & " or the external drive it is on is not plugged in, or it's name was changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    End If
    #
    #Show 1st ref file from testlearn window.
    If [ FilterValues ( refReference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    If [ ValueCount ( testlearn::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'QV' button in the Learn window or the 'references' button in the Tag Menus window."; Buttons: “OK” ]
    End If
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & refReference::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & refReference::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's x folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Else If [ FilterValues ( refReference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    If [ ValueCount ( testlearn::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'QV' button in the Learn window or the 'references' button in the Tag Menus window."; Buttons: “OK” ]
    End If
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & refReference::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & refReference::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's main folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Exit Script [ ]
    Else If [ FilterValues ( refReference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    If [ ValueCount ( testlearn::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'QV' button in the Learn window or the 'references' button in the Tag Menus window."; Buttons: “OK” ]
    End If
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & TLrefFolderPath::tag ; " " ; "%20" ) & Case ( Left ( refReference::fileName ; 1 ) = "/" ; Substitute ( refReference::fileName ; " " ; "%20" ) ; "/" & Substitute ( refReference::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & TLrefFolderPath::tag ; " " ; " " ) & Case ( Left ( refReference::fileName ; 1 ) = "/" ; Substitute ( refReference::fileName ; " " ; " " ) ; "/" & Substitute ( refReference::fileName ; " " ; " " ) ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into " & tagRefFolderPath::tag & "," & " or the external drive it is on is not plugged in, or it's name was changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    End If
    #
    #Show cite file from test info window.
    If [ FilterValues ( citeTest::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citeTest::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citeTest::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's x folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Else If [ FilterValues ( citeTest::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citeTest::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citeTest::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's main folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Exit Script [ ]
    Else If [ FilterValues ( citeTest::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & citeTestFolderPath::tag ; " " ; "%20" ) & Case ( Left ( citeTest::fileName ; 1 ) = "/" ; Substitute ( citeTest::fileName ; " " ; "%20" ) ; "/" & Substitute ( citeTest::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & citeTestFolderPath::tag ; " " ; " " ) & Case ( Left ( citeTest::fileName ; 1 ) = "/" ; Substitute ( citeTest::fileName ; " " ; " " ) ; "/" & Substitute ( citeTest::fileName ; " " ; " " ) ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into " & tagRefFolderPath::tag & "," & " or the external drive it is on is not plugged in, or it's name was changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    End If
    #
    #Show 1st reference file from test info window.
    If [ FilterValues ( refTest::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & refTest::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & refTest::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's x folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Else If [ FilterValues ( refTest::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & refTest::fileName ; " " ; "%20" ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & refTest::fileName ; " " ; " " ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into this library's main folder, OR its name has been changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    Exit Script [ ]
    Else If [ FilterValues ( refTest::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & refTestFolderPath::tag ; " " ; "%20" ) & Case ( Left ( refTest::fileName ; 1 ) = "/" ; Substitute ( refTest::fileName ; " " ; "%20" ) ; "/" & Substitute ( refTest::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get ( LastError ) ≠ 0 ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & refTestFolderPath::tag ; " " ; " " ) & Case ( Left ( refTest::fileName ; 1 ) = "/" ; Substitute ( refTest::fileName ; " " ; " " ) ; "/" & Substitute ( refTest::fileName ; " " ; " " ) ) ] [ No dialog ]
    End If
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The file has been deleted, moved from, or never downloaded/moved into " & tagRefFolderPath::tag & "," & " or the external drive it is on is not plugged in, or it's name was changed from " & reference::fileName & "."; Buttons: “OK” ]
    End If
    End If
    #
    // #Show TestLearn file.
    // If [ FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    // Exit Script [ ]
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    // Open URL [ Substitute ( tagRefFolderPath::tag ; " " ; "%20" ) & Substitute ( testlearn::filename ; " " ; "%20" ) ] [ No dialog ]
    // Else If [ testlearn::URL ≠ "" ]
    // Open URL [ testlearn::URL ] [ No dialog ]
    // End If

Fields used in this script

    reference::kfileLocation
    reference::fileName
    tagRefFolderPath::tag
    citeCite::kfileLocation
    citeCite::fileName
    TLciteFolderPath::tag
    refReference::kfileLocation
    testlearn::kcreference
    refReference::fileName
    TLrefFolderPath::tag
    citeTest::kfileLocation
    citeTest::fileName
    citeTestFolderPath::tag
    refTest::kfileLocation
    testlearnReportTags::kcreference
    refTest::fileName
    refTestFolderPath::tag
    testlearn::kfileLocation
    testlearn::filename
    testlearn::URL

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showFileInTagandLearnWindows]	Parent Folder: [learn]	Next Script: [editLearn]
Script Name	deleteLearnMainRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ tagTLNodePrimary::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to delete records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Exit find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Exit field so user can see red delete
    #formatting later on.
    Go to Field [ ]
    #
    #Prevent all record load scripts (they slow down
    #this script and are uneccessary).
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #If either the sample or test fields are filled show
    #message below.
    If [ testlearn::kcsample ≠ "" and testlearn::kctest ≠ "" ]
    Show Custom Dialog [ Message: "In use by Theory and Test records. Must be removed before deleting. Click the 'theorize' button and scroll to highlighted items. Click the square buttons next them. Click the 'test' button and repeat delinking process."; Buttons: “OK” ]
    Exit Script [ ]
    Else If [ testlearn::kcsample ≠ "" ]
    Show Custom Dialog [ Message: "In use by Theory records. Must be removed before deleting. Click the 'theorize' button and scroll to highlighted items. Click the square buttons next them."; Buttons: “OK” ]
    Exit Script [ ]
    Else If [ testlearn::kctest ≠ "" ]
    Show Custom Dialog [ Message: "In use by Test records. Must be removed before deleting. Click the 'test' button and scroll to highlighted items. Click the square buttons next them."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Set variables to conditionally format section to
    #be deleted, and its record number so if the
    #user cancels the delete, the system can return
    #to this record.
    Set Variable [ $delete; Value:testlearn::_Ltestlearn ]
    Set Variable [ $deleteName; Value:testlearn::_Number ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $section; Value:TEMP::ksection ]
    #
    #Because there may be no records found, stop
    #the system from informing the user of this.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Open a new window and look for record being
    #cited or used as a reference by another record.
    New Window [ ]
    #
    Loop
    #
    #Clear the inUse variable before each run thru
    #the loop. If not cleared, then last time thru
    #if this variable had a value in it, that value will
    #stay in it even if no finds are made, which then
    #tells the system that a no-find reference, has finds.
    #So the system must clear this variable before each
    #run thru the loop.
    Set Variable [ $inUse ]
    #
    #See if learn record is used by any learn records as a
    #citation.
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcitation; $delete ]
    Set Field [ testlearn::kcsection; $section ]
    Perform Find [ ]
    #
    If [ Get (LastError) ≠ 401 ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " learn citation" ]
    End If
    #
    #See if learn record is used by any learn records as a
    #reference.
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcreference; $delete ]
    Set Field [ testlearn::kcsection; $section ]
    Perform Find [ ]
    #
    If [ Get (LastError) ≠ 401 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " learn reference" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " learn reference" ]
    End If
    End If
    #
    #See if reference record is used by any tag records as a
    #picture.
    Go to Layout [ “tableTag” (tagTable) ]
    #picture1
    Enter Find Mode [ ]
    Set Field [ tagTable::Kpicture1; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound1; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #picture2
    Enter Find Mode [ ]
    Set Field [ tagTable::Kpicture2; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound2; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #picture3
    Enter Find Mode [ ]
    Set Field [ tagTable::Kpicture3; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound3; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    If [ $tagFound1 + $tagFound2 + $tagFound3 ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & ($tagFound1 + $tagFound2 + $tagFound3) & " tag menu picture(s) (" & $tagName & ")" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:($tagFound1 + $tagFound2 + $tagFound3) & " tag menu picture(s) (" & $tagName & ")" ]
    End If
    End If
    #
    Set Variable [ $tagFound1 ]
    Set Variable [ $tagFound2 ]
    Set Variable [ $tagFound3 ]
    Set Variable [ $tagNameADD ]
    Set Variable [ $tagName ]
    #
    #See if reference record is used by any tag records
    #as a web link.
    Go to Layout [ “tableTag” (tagTable) ]
    #link1
    Enter Find Mode [ ]
    Set Field [ tagTable::Ktitle1; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound1; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #link2
    Enter Find Mode [ ]
    Set Field [ tagTable::Ktitle2; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound2; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #link3
    Enter Find Mode [ ]
    Set Field [ tagTable::Ktitle3; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound3; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    If [ $tagFound1 + $tagFound2 + $tagFound3 ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & ($tagFound1 + $tagFound2 + $tagFound3) & " tag menu link(s) (" & $tagName & ")" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:($tagFound1 + $tagFound2 + $tagFound3) & " tag menu link(s) (" & $tagName & ")" ]
    End If
    End If
    #
    Set Variable [ $tagFound1 ]
    Set Variable [ $tagFound2 ]
    Set Variable [ $tagFound3 ]
    Set Variable [ $tagNameADD ]
    Set Variable [ $tagName ]
    #
    #If the current record is in use in the section of
    #the database from which the delete was requested,
    #inform the user of this, and skip the next
    #steps of this loop and the next loop, which.
    #is for checking if record is in use in other sections.
    If [ $section = TEMP::ksection and $inUse ≠ "" ]
    #
    #If the record was in use in the current section
    #then do not look for it in other sections.
    Set Variable [ $checkSection; Value:$section ]
    Set Variable [ $section ]
    Exit Loop If [ $checkSection = TEMP::ksection and $inUse ≠ "" ]
    End If
    #
    #If the current record is not in use in the section
    #of the database from which this delete was started,
    #capture this information.
    If [ $section = TEMP::ksection and $inUse = "" ]
    Set Variable [ $deleteNotInUse; Value:"not in use" ]
    End If
    #
    #Exit the loop if there is only 1 section key for this record
    #or if the system just checked for the record
    #in all sections of the database, which
    #is why the section variable would be blank.
    #In the latter case, the loop would be coming round
    #after checking all sections in the database.
    #At first the loop is confined to looking at all records
    #in this section. Once it has done that, a script
    #step below exits the loop only to enter a loop
    #that clears the section variable and causes the
    #system to re-enter this loop, only with a blank
    #section variable so it will look in all sections of the
    #database. When it reaches this step, that blank
    #section variable will force it out of this loop and
    #a similar script step in the outer loop will do the
    #same thereby allowing the system to follow the
    #remainder of this script to report on the findings
    #made during these discovery loops.
    Exit Loop If [ ValueCount ( testlearn::kcsection ) = 1 or $section = "" ]
    #
    #If the current record is not in use in the section
    #of the database where the delete was started,
    #make sure it is not in use in any other section.
    Set Variable [ $section ]
    #
    End Loop
    #
    Close Window [ Current Window ]
    #
    #
    #
    #
    #Report on findings and if none delete record.
    #
    #
    #
    #
    #If the record in question was not found in the
    #section the user is deleting it from...
    If [ $deleteNotInUse ≠ "" ]
    #
    #But this record is in use in other sections...
    If [ $inUse ≠ "" ]
    #
    Refresh Window
    Show Custom Dialog [ Message: "This record cannot be deleted as it in use in other sections of the database. You can remove it from this section though as it is not being used in this section."; Buttons: “cancel”, “remove” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    #
    #If the user chooses not to remove the record
    #everything goes back to the way it was.
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #If the user choses to proceed with the removal,
    #the section key is removed from the record's
    #key chain. ( paragraph mark is added to section in
    # case the key has no paragraph mark after it and so
    # would not be found. )
    Set Field [ testlearn::kcsection; Substitute ( testlearn::kcsection & ¶ ; TEMP::ksection & ¶ ; "" ) ]
    #
    #Omit the record as it no longer is part of this section.
    Omit Record
    #
    End If
    Exit Script [ ]
    End If
    End If
    #
    #
    #
    #If record was found in current section tell user.
    If [ $inUse ≠ "" ]
    Set Variable [ $delete ]
    Refresh Window
    // Show Custom Dialog [ Message: "This record cannot be deleted as it in use x number of times as a citation or reference in the following windows of this section: " & $inUse & "."; Buttons: “OK” ]
    Show Custom Dialog [ Message: "Record cannot be deleted as it in use in these windows: " & $inUse & "."; Buttons: “OK” ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    End If
    #
    #
    #
    #If record is not in use in any section, but has more
    #than one section key, give user option to remove it
    #from just this section.
    If [ ValueCount ( testlearn::kcsection ) > 1 ]
    Refresh Window
    Show Custom Dialog [ Message: "This record is in other sections of the library. Do you want to remove it from just this section or delete it from all sections?"; Buttons: “cancel”, “remove”, “delete” ]
    #
    #If the user cancels, stop the delete.
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #If the clicks remove, then remove the record.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #If the user choses to proceed with the removal,
    #the section key is removed from the record's
    #key chain. ( paragraph mark is added to section in
    # case the key has no paragraph mark after it and so
    # would not be found. )
    Set Field [ testlearn::kcsection; Substitute ( testlearn::kcsection & ¶ ; TEMP::ksection & ¶ ; "" ) ]
    #
    #Omit the record as it no longer is part of this section.
    Omit Record
    #
    Exit Script [ ]
    End If
    #
    End If
    #
    #
    #
    #
    #If the record being deleted was not found in
    #use in any sections of the database then before
    #deleting it make sure the user really wants it deleted.
    Set Variable [ $group ]
    Refresh Window
    Show Custom Dialog [ Message: "Delete current record?"; Buttons: “cancel”, “delete” ]
    Set Variable [ $group; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $deleteGroup; Value:ruleTagMenuGroups::name ]
    #
    #If the user cancels, stop the delete.
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #If the user says yes, then delete the record.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    #
    End If
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    Perform Script [ “loadCitation” ]
    #
    #

Fields used in this script

    tagTLNodePrimary::orderOrLock
    testlearn::kcsample
    testlearn::kctest
    testlearn::_Ltestlearn
    testlearn::_Number
    TEMP::ksection
    testlearn::kcitation
    testlearn::kcsection
    testlearn::kcreference
    tagTable::Kpicture1
    ruleLibrary 2::ksection
    tagTable::tag
    tagTable::Kpicture2
    tagTable::Kpicture3
    tagTable::Ktitle1
    tagTable::Ktitle2
    tagTable::Ktitle3
    tagMenus::kGroupOrTest
    ruleTagMenuGroups::name

Scripts used in this script

    loadCitation

Layouts used in this script

    tableTestLearn
    tableTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteLearnMainRecord]	Parent Folder: [learn]	Next Script: [editTestLearn]
Script Name	editLearn
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #In report mode do the following ...
    If [ Left ( Get ( LayoutName ) ; 1 ) = "r" ]
    #
    #Set return variable for tag.
    If [ Get (FoundCount) ≥ 1 ]
    Set Variable [ $$learnRecord; Value:testlearnReportTags::_Ltestlearn ]
    Else
    Set Variable [ $$learnRecord; Value:1 ]
    End If
    #
    #Set return variable for Report item.
    Set Variable [ $$returnItem; Value:TEMP::ktest ]
    Set Variable [ $$returnItemName; Value:TEMP::testName ]
    #
    #Go to the Report window and change it to Learn.
    Select Window [ Name: "Report"; Current file ]
    Set Window Title [ Current Window; New Title: "Learn" ]
    #
    #Find, sort, the loop to record user was on in
    #Tag Menus window for info items (testLearn records).
    Set Variable [ $$stopLoadCitation; Value:1 ]
    If [ tempSetup::layoutLmain = "" ]
    Go to Layout [ “learn1” (testlearn) ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    Else If [ tempSetup::layoutLmain ≠ "" ]
    Go to Layout [ Middle ( tempSetup::layoutLmain ; 5 ; 42 ) ]
    End If
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    #
    #Go to selected learn record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $$learnRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stopLoadCitation ]
    #
    #Go to test menu in Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Perform Script [ “menuTest” ]
    Select Window [ Name: "Learn"; Current file ]
    Perform Script [ “loadCitation” ]
    #
    #
    #
    #
    Else If [ Left ( Get ( LayoutName ) ; 1 ) = "t" ]
    #
    #Set return variable for tag.
    Set Variable [ $$testTagRecord; Value:testlearnReportTags::_Ltestlearn ]
    #
    #Set return variable for Test item.
    Set Variable [ $$returnItem; Value:TEMP::ktest ]
    Set Variable [ $$returnItemName; Value:TEMP::testName ]
    #
    #Go to the Test window and change it to Learn.
    Select Window [ Name: "Test"; Current file ]
    Set Window Title [ Current Window; New Title: "Learn" ]
    #
    #Set return variable for main Test record.
    Set Variable [ $$testLearnRecord; Value:testlearn::_Ltestlearn ]
    #
    #Find, sort, the loop to record user was on in
    #Tag Menus window for info items (testLearn records).
    Set Variable [ $$stopLoadCitation; Value:1 ]
    If [ tempSetup::layoutLmain = "" ]
    Go to Layout [ “learn1” (testlearn) ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    Else If [ tempSetup::layoutLmain ≠ "" ]
    Go to Layout [ Middle ( tempSetup::layoutLmain ; 5 ; 42 ) ]
    End If
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    #
    #Go to selected learn record.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $$testTagRecord ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stopLoadCitation ]
    #
    #Go to keyword menu in Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    If [ $$returnItem ≠ "" ]
    Perform Script [ “menuTest” ]
    Else If [ ]
    Perform Script [ “menuKey” ]
    End If
    Select Window [ Name: "Learn"; Current file ]
    Perform Script [ “loadCitation” ]
    #
    End If
    #

Fields used in this script

    testlearnReportTags::_Ltestlearn
    TEMP::ktest
    TEMP::testName
    tempSetup::layoutLmain
    TEMP::layoutLmain
    TEMP::ksection
    testlearn::kcsection
    testlearn::filterFind
    testlearn::date
    testlearn::timestamp
    testlearn::_Ltestlearn

Scripts used in this script

    menuTest
    loadCitation
    menuKey

Layouts used in this script

    learn1
    <Missing Layout>
    ltagNK2

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [editLearn]	Parent Folder: [learn]	Next Script: [finishTestLearnEdit]
Script Name	editTestLearn
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ tagTLNodePrimary::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to edit records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Exit find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #If in find mode, exit find mode.
    If [ $$findMode= 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$stoploadCitation ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    #
    #Capture layout name.
    Set Variable [ $$testLearnLayoutName; Value:Get (LayoutName) ]
    #
    #Go to edit layout for this record.
    Go to Layout [ “learn4EDIT” (testlearn) ]
    #
    #Prevent add mode.
    Set Variable [ $$stopAdd; Value:1 ]
    Set Variable [ $$stoploadCitation ]

Fields used in this script

    tagTLNodePrimary::orderOrLock

Scripts used in this script

Layouts used in this script

    <Missing Layout>
    learn4EDIT

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [editTestLearn]	Parent Folder: [learn]	Next Script: [duplicateLearnRecord]
Script Name	finishTestLearnEdit
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Go to reference record layout.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Layout [ $$testLearnLayoutName ]
    Set Variable [ $$stoploadCitation ]
    #
    #Allow add mode.
    Set Variable [ $$stopAdd ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [finishTestLearnEdit]	Parent Folder: [learn]	Next Script: [learnOpenTextNewWindow]
Script Name	duplicateLearnRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Exit find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Field [ ]
    Set Variable [ $caption; Value:testlearn::Caption ]
    Set Variable [ $P; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $O; Value:testlearn::kcKeywordOther ]
    Set Variable [ $Owords; Value:testlearn::OtherKeyWords ]
    Set Field [ TEMP::duplicateOtherKeywords; testlearn::kcKeywordOther ]
    Set Variable [ $citation; Value:testlearn::kcitation ]
    Set Variable [ $reference; Value:testlearn::kcreference ]
    #The 'L' is added to all Tag Menu to conditional format
    #the Learn menu button.
    Set Variable [ $referenceOriginal; Value:testlearn::_Ltestlearn & "L" ]
    New Record/Request
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::kNodePrimary; TEMP::kdefaultNodePrimary ]
    Set Field [ testlearn::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ testlearn::RecordModifyDate; Get ( CurrentTimeStamp ) ]
    Set Field [ testlearn::kNodeOther; TEMP::kdefaultNodeOther ]
    Set Field [ testlearn::NodeOthers; TEMP::DEFAULTNodeOtherNames ]
    Set Field [ testlearn::kHealth; TEMP::kdefaultHealth ]
    Set Field [ testlearn::incomplete; "incomplete" & ¶ ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Set Field [ testlearn::kKeywordPrimary; $P ]
    Set Field [ testlearn::OtherKeyWords; $Owords ]
    Set Field [ testlearn::kcitation; $citation ]
    Set Field [ testlearn::Caption; $O ]
    #
    #Filemaker has a bug that is stripping out the paragraphs
    #if the script puts the O variable keys directly into the
    #other word field. But put them into caption and then
    #from caption into the otherword key field and everything
    #is fine.
    Set Field [ testlearn::kcKeywordOther; testlearn::Caption ]
    Set Field [ testlearn::Caption; $caption ]
    Set Variable [ $$stoploadCitation ]
    If [ testlearn::kcitation = "" ]
    Show Custom Dialog [ Message: "Reference the duplicated record (the one with the green bar)? If yes, adds the dupliated record to the referene section of its duplicate (the record below the one with green bar)."; Buttons: “no”, “yes” ]
    If [ Get ( LastMessageChoice ) = 2 ]
    Set Field [ testlearn::kcreference; $referenceOriginal & ¶ & $reference ]
    Else
    Set Field [ testlearn::kcreference; $reference ]
    End If
    Else
    Set Field [ testlearn::kcreference; $reference ]
    End If
    Sort Records [ ] [ No dialog ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    Set Variable [ $$stopOpenNewTextWindow ]
    Perform Script [ “learnOpenTextNewWindow” ]

Fields used in this script

    TEMP::nodeLock
    testlearn::Caption
    testlearn::kKeywordPrimary
    testlearn::kcKeywordOther
    testlearn::OtherKeyWords
    TEMP::duplicateOtherKeywords
    testlearn::kcitation
    testlearn::kcreference
    testlearn::_Ltestlearn
    TEMP::ksection
    testlearn::kcsection
    TEMP::kdefaultNodePrimary
    testlearn::kNodePrimary
    testlearn::kRecordCreatorNode
    testlearn::RecordModifyDate
    TEMP::kdefaultNodeOther
    testlearn::kNodeOther
    TEMP::DEFAULTNodeOtherNames
    testlearn::NodeOthers
    TEMP::kdefaultHealth
    testlearn::kHealth
    testlearn::incomplete
    testlearn::filterFind

Scripts used in this script

    loadCitation
    learnOpenTextNewWindow

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [duplicateLearnRecord]	Parent Folder: [learn]	Next Script: [gotoLearnWebsite]
Script Name	learnOpenTextNewWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    duplicateLearnRecord

Script Definition
Script Steps

    If [ Get ( WindowMode ) = 1 ]
    Go to Field [ testlearn::Caption ]
    Exit Script [ ]
    End If
    If [ $$stopOpenNewTextWindow = 1 ]
    Set Variable [ $$stopOpenNewTextWindow ]
    Exit Script [ ]
    End If
    Go to Field [ ]
    Set Variable [ $record; Value:testlearn::_Ltestlearn ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    New Window [ Name: "Learn: Edit Note" ]
    If [ tagTLNodePrimary::orderOrLock = "" ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “LearnTextWindowStuff” (testlearn) ]
    Else
    Go to Layout [ “LearnTextWindow” (testlearn) ]
    End If
    Go to Field [ testlearn::Caption ]
    Else If [ tagTLNodePrimary::orderOrLock ≠ "" ]
    Go to Layout [ “LearnTextWindowLocked” (testlearn) ]
    End If
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; $record ]
    Perform Find [ ]
    Set Variable [ $$stopLoadCitation ]
    Pause/Resume Script [ Indefinitely ]

Fields used in this script

    testlearn::Caption
    testlearn::_Ltestlearn
    tagTLNodePrimary::orderOrLock
    TEMP::InventoryLibaryYN

Scripts used in this script

Layouts used in this script

    LearnTextWindowStuff
    LearnTextWindow
    LearnTextWindowLocked

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [learnOpenTextNewWindow]	Parent Folder: [learn]	Next Script: [findLearnRecord]
Script Name	gotoLearnWebsite
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Open URL [ learnSampleWebsite::URL ] [ No dialog ]

Fields used in this script

    learnSampleWebsite::URL

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoLearnWebsite]	Parent Folder: [learn]	Next Script: [cancelLearnFind]
Script Name	findLearnRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #Capture errors and tell user about them in custom
    #dialogue box.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #If the user clicks the find button and the system is already
    #in find mode, capture the user's current find request
    #and then perform the requested find.
    #This capture is done in case nothing is found and the
    #user is asked if they want to modify their request.
    #The system puts in the captured request so that the
    #user can see the failed request.
    If [ Get (WindowMode) = 1 ]
    Set Variable [ $caption; Value:testlearn::Caption ]
    Set Variable [ $timestamp; Value:testlearn::timestamp ]
    Perform Find [ ]
    #
    #If the system is not in find mode when the user
    #clicks the find button do the following.
    Else
    #
    #Check if the current Learn record references other
    #Learn records.
    If [ Filter ( testlearn::kcreference ; "L" ) ≠ "" ]
    #
    #If it does reference other Learn records, ask the user
    #if they would like to find just those records, or
    #continue to the find screen.
    Show Custom Dialog [ Message: "Find all related (highlighted) LEARN records?" & ¶ & "OR" & ¶ & "Enter your own FIND request?"; Buttons: “find”, “learn”, “cancel” ]
    #
    #Cancel selection, cancels the script.
    If [ Get ( LastMessageChoice ) = 3 ]
    Exit Script [ ]
    #
    #If the users selects the "learn" button, then find just
    #the referenced Learn records (in addition to the
    #current Learn record).
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    Set Variable [ $$findLearnLayout; Value:Get (LayoutName) ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Look thru the referenced records to create a value
    #list of their keys.
    Go to Layout [ “learn4EDIT” (testlearn) ]
    Set Variable [ $findLinkedLearnRecords; Value:testlearn::_Ltestlearn ]
    Loop
    Go to Object [ Object Name: "ref2" ]
    Exit Loop If [ Get (LastError) = 101 ]
    Set Variable [ $findLinkedLearnRecords; Value:refTestLearn::_Ltestlearn & ¶ & $findLinkedLearnRecords ]
    Go to Portal Row [ Select; Next; Exit after last ]
    End Loop
    #
    #Determine how many keys there are.
    Set Variable [ $numberOfKeys; Value:ValueCount ($findLinkedLearnRecords ) ]
    #
    #Find 1st record.
    Go to Layout [ $$findLearnLayout ]
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; GetValue ( $findLinkedLearnRecords ; $numberOfKeys ) ]
    Perform Find [ ]
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    #
    If [ $numberOfKeys ≠ 0 ]
    #
    #Loop thru each key to find next record in list until
    #all linked records have been found.
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeys = 0 ]
    #
    #Find record.
    Enter Find Mode [ ]
    Set Field [ testlearn::_Ltestlearn; GetValue ( $findLinkedLearnRecords ; $numberOfKeys ) ]
    Extend Found Set [ ]
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeys; Value:$numberOfKeys - 1 ]
    End Loop
    #
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Sort Records [ ] [ No dialog ]
    Go to Record/Request/Page [ First ]
    #
    End If
    #
    #Stop the script.
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$findLearnLayout ]
    Exit Script [ ]
    End If
    #
    End If
    #
    #
    #If the system is not in find mode and the find button
    #is clicked then capture the current layout name
    #(to return user to it after find), enter find mode,
    #go to the find layout, and await the user's find request.
    Set Variable [ $$findLearnLayout; Value:Get (LayoutName) ]
    Enter Find Mode [ ]
    Go to Layout [ “learnFIND” (testlearn) ]
    Show/Hide Status Area [ Hide ]
    Show/Hide Text Ruler [ Hide ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Go to Field [ testlearn::Caption ]
    Pause/Resume Script [ Indefinitely ]
    Set Variable [ $caption; Value:testlearn::Caption ]
    Set Variable [ $timestamp; Value:testlearn::timestamp ]
    Perform Find [ ]
    End If
    #
    #If the find fails tell the user it failed and give them
    #option to modify their request or cancel the find.
    Loop
    If [ Get (LastError) = 401 ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::Caption; $caption ]
    Set Field [ testlearn::timestamp; $timestamp ]
    Go to Field [ testlearn::Caption ]
    Show Custom Dialog [ Message: "No records match this request."; Buttons: “cancel”, “modify find” ]
    #
    #If the user decides to modify their request then stay
    #in find mode and await the users new request.
    If [ Get ( LastMessageChoice ) = 2 ]
    Pause/Resume Script [ Indefinitely ]
    Set Variable [ $caption; Value:testlearn::Caption ]
    Set Variable [ $timestamp; Value:testlearn::timestamp ]
    #
    #If the user decides to cancel their the find, then return
    #to the main record window and show all records.
    Else If [ Get ( LastMessageChoice ) = 1 ]
    Go to Layout [ $$findLearnLayout ]
    Show/Hide Status Area [ Hide ]
    Show/Hide Text Ruler [ Hide ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Perform Find [ ]
    Sort Records [ ] [ No dialog ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$findLearnLayout ]
    Exit Script [ ]
    End If
    Perform Find [ ]
    End If
    #
    #If the find is successful then show the user the found
    #records on the main records layout.
    Exit Loop If [ Get (LastError) = 0 ]
    End Loop
    Go to Layout [ $$findLearnLayout ]
    Set Variable [ $$findLearnLayout ]
    Sort Records [ ] [ No dialog ]
    Go to Record/Request/Page [ First ]

Fields used in this script

    testlearn::Caption
    testlearn::timestamp
    testlearn::kcreference
    testlearn::_Ltestlearn
    refTestLearn::_Ltestlearn
    testlearn::date
    TEMP::ksection

Scripts used in this script

Layouts used in this script

    learn4EDIT
    <Missing Layout>
    learnFIND

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findLearnRecord]	Parent Folder: [learn]	Next Script: [newLearn]
Script Name	cancelLearnFind
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If the user decides to cancel their the find, then return
    #to the main record window and show all records.
    If [ Get ( LayoutTableName ) = "reference" ]
    Go to Layout [ $$findReferenceLayout ]
    Set Variable [ $$findReferenceLayout ]
    Else
    Go to Layout [ $$findLearnLayout ]
    Set Variable [ $$findLearnLayout ]
    End If
    Show/Hide Status Area [ Hide ]
    Show/Hide Text Ruler [ Hide ]
    Enter Find Mode [ ]
    If [ Get ( LayoutTableName ) = "reference" ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Else
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    End If
    Perform Find [ ]
    Sort Records [ ] [ No dialog ]
    Go to Record/Request/Page [ First ]

Fields used in this script

    TEMP::ksection
    reference::kcsection
    testlearn::kcsection

Scripts used in this script

Layouts used in this script

    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [cancelLearnFind]	Parent Folder: [learn]
Script Name	newLearn
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Exit find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Field [ ]
    Freeze Window
    New Record/Request
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::kNodePrimary; TEMP::kdefaultNodePrimary ]
    Set Field [ testlearn::kRecordCreatorNode; TEMP::kdefaultNodePrimary ]
    Set Field [ testlearn::RecordModifyDate; Get ( CurrentTimeStamp ) ]
    Set Field [ testlearn::kNodeOther; TEMP::kdefaultNodeOther ]
    Set Field [ testlearn::NodeOthers; TEMP::DEFAULTNodeOtherNames ]
    Set Field [ testlearn::kHealth; TEMP::kdefaultHealth ]
    Set Field [ testlearn::incomplete; "incomplete" & ¶ ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    If [ Right ( Get ( LayoutName ) ; 4 ) = "EDIT" ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Set Variable [ $$stoploadCitation ]
    #
    #Note that citation is for either the node or keyword depending on the citation match.
    Else If [ Right ( Get ( LayoutName ) ; 3 ) = "TAG" ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    End If
    Sort Records [ ] [ No dialog ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Set Variable [ $$stoploadCitation ]
    // Perform Script [ “loadCitation” ]
    Set Variable [ $$citation; Value:testlearn::_Ltestlearn ]
    #
    #capture keys of related tag menu items to
    #to allow the citationMenu scripts to loop to the
    #primary record of interest when the user navigates
    #to a item on the Tag Menu window
    #whose list of tags like node, keyword, medium, etc.
    #might contain an item related to the current
    #citation record, but which one, which is why all
    #the keys have to be readied. Mmm... now that
    #I write this out, I'm thinking I could have the
    #citationMenu scripts select the citation window
    #to grab the key if any in the current current
    #record that applies to the menu item.
    Set Variable [ $$citationRecord; Value:testlearn::_Ltestlearn ]
    Set Variable [ $$node; Value:testlearn::kNodeOther ]
    Set Variable [ $$primaryNode; Value:testlearn::kNodePrimary ]
    Set Variable [ $$medium; Value:testlearn::kmedium ]
    Set Variable [ $$health; Value:testlearn::kHealth ]
    Set Variable [ $$Path; Value:testlearn::kfolderPath ]
    Set Variable [ $$cite; Value:testlearn::kcitation ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Set Variable [ $$PrimaryKey; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $$Key; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$OtherKey; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$Section; Value:testlearn::kcsection ]
    Set Variable [ $$test; Value:testlearn::kctest ]
    Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Variable [ $$RecordID; Value:Get (RecordID) ]
    Set Variable [ $$stopOpenNewTextWindow ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    Set Variable [ $$citationItem ]
    If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:TEMP::kdefaultNodePrimary ]
    End If
    #
    #Clear conditional formatting in Tag Menus window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Select Window [ Name: "Learn"; Current file ]
    #
    #Open new window to edit new record in.
    New Window [ ]
    Go to Layout [ “LearnTextWindow” (testlearn) ]
    Go to Field [ testlearn::Caption ]
    Set Variable [ $$stopLoadCitation ]
    Pause/Resume Script [ Indefinitely ]
    // Go to Object [ Object Name: "text" ]

Fields used in this script

    TEMP::nodeLock
    TEMP::ksection
    testlearn::kcsection
    TEMP::kdefaultNodePrimary
    testlearn::kNodePrimary
    testlearn::kRecordCreatorNode
    testlearn::RecordModifyDate
    TEMP::kdefaultNodeOther
    testlearn::kNodeOther
    TEMP::DEFAULTNodeOtherNames
    testlearn::NodeOthers
    TEMP::kdefaultHealth
    testlearn::kHealth
    testlearn::incomplete
    testlearn::filterFind
    testlearn::_Ltestlearn
    testlearn::kmedium
    testlearn::kfolderPath
    testlearn::kcitation
    testlearn::kcreference
    testlearn::kKeywordPrimary
    testlearn::kcKeywordOther
    testlearn::kctest
    testlearn::kcsample
    testlearn::Caption

Scripts used in this script

    loadCitation

Layouts used in this script

    LearnTextWindow

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


probablyNotInUse
	Parent Folder: [probablyNotInUse]
Script Name	findLearnRecord Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Get (WindowMode) = 1 ]
    Set Variable [ $$stopFindScript ]
    End If
    If [ Get (WindowMode) = 1 ]
    // Perform Find [ ]
    Enter Browse Mode
    Exit Script [ ]
    Else
    Set Variable [ $$findLearnLayout; Value:Get (LayoutName) ]
    Enter Find Mode [ ]
    Go to Layout [ “learnFIND” (testlearn) ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Show/Hide Status Area [ Hide ]
    Go to Field [ testlearn::Caption ]
    Pause/Resume Script [ Indefinitely ]
    // Perform Find [ ]
    Enter Browse Mode
    Go to Field [ ]
    Exit Script [ ]
    End If
    // Sort Records [ ] [ No dialog ]

Fields used in this script

    TEMP::ksection
    testlearn::kcsection
    testlearn::Caption

Scripts used in this script

Layouts used in this script

    learnFIND

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


reference(citation)
	Parent Folder: [reference(citation)]	Next Script: [editReference]
Script Name	newReference
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Cancel find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit find mode.
    If [ $$findMode= 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$stoploadCitation ]
    Select Window [ Name: "References"; Current file ]
    End If
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Field [ ]
    New Record/Request
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::ktest; TEMP::ktest ]
    Set Field [ reference::incomplete; "incomplete" & ¶ ]
    If [ Get ( LayoutName ) = "Reference" or Get ( LayoutName ) = "ReferenceStuff" ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    Set Variable [ $$stoploadCitation ]
    #
    #Note that citation is for either the node or keyword depending on the citation match.
    Else If [ Right ( Get ( LayoutName ) ; 3 ) = "TAG" ]
    Set Field [ reference::filterFind; $$addToTag & ¶ ]
    End If
    Sort Records [ ] [ No dialog ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Go to edit layout for this record.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceEDITstuff” (reference) ]
    Else
    Go to Layout [ “ReferenceEDIT” (reference) ]
    End If
    #
    #Prevent add mode.
    Set Variable [ $$stopAdd; Value:1 ]

Fields used in this script

    TEMP::nodeLock
    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    TEMP::ksection
    reference::kcsection
    TEMP::ktest
    reference::ktest
    reference::incomplete
    reference::filterFind
    TEMP::InventoryLibaryYN

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceEDITstuff
    ReferenceEDIT

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [newReference]	Parent Folder: [reference(citation)]	Next Script: [CHUNKaddReferenceNodesAndKeywords]
Script Name	editReference
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ tagNodeCreator::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to edit records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Cancel find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit find mode.
    If [ $$findMode= 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$stoploadCitation ]
    Select Window [ Name: "References"; Current file ]
    End If
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to edit layout for this record.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceEDITstuff” (reference) ]
    Else
    Go to Layout [ “ReferenceEDIT” (reference) ]
    End If
    #
    #Get rid of spaces in bookChapter field, if any.
    Set Field [ reference::bookChapter; Trim ( reference::bookChapter ) ]
    #
    #Prevent add mode.
    Set Variable [ $$stopAdd; Value:1 ]

Fields used in this script

    tagNodeCreator::orderOrLock
    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    TEMP::InventoryLibaryYN
    reference::bookChapter

Scripts used in this script

Layouts used in this script

    <Missing Layout>
    ReferenceEDITstuff
    ReferenceEDIT

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [editReference]	Parent Folder: [reference(citation)]	Next Script: [addORremoveCitationOrReferenceRefTag]
Script Name	CHUNKaddReferenceNodesAndKeywords
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addTagToMainRecord
    CHUNKaddLinkToTag
    CHUNKaddPictureToTag
    addORremoveCitationOrReferenceRefTag

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Add current section key to reference record's
    #section keychain if it is not on it already.
    If [ TEMP::ksection & "¶" ≠ FilterValues ( reference::kcsection ; TEMP::ksection & "¶" ) and Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $sectionKeychain; Value:reference::kcsection ]
    Set Field [ reference::kcsection; TEMP::ksection & ¶ & $sectionKeychain ]
    End If
    #
    #Add current section key to learn record's
    #section keychain if it is not on it already.
    If [ TEMP::ksection & "¶" ≠ FilterValues ( testlearn::kcsection ; TEMP::ksection & "¶" ) and Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $sectionKeychain; Value:testlearn::kcsection ]
    Set Field [ testlearn::kcsection; TEMP::ksection & ¶ & $sectionKeychain ]
    End If
    #
    // #Check main checkbox if record is not already
    // #a main record. This is because when going to
    // #edit cite or reference records, only main records
    // #are shown by default.
    // If [ "main" ≠ FilterValues ( reference::filterFind ; "main" ) and Get ( LayoutTableName ) = "reference" and $$add ≠ 1 ]
    // Set Variable [ $filterFind; Value:reference::filterFind ]
    // Set Field [ reference::filterFind; "main" & ¶ & $filterFind ]
    // #
    // Else If [ $$citationMatch ≠ FilterValues ( reference::filterFind ; $$citationMatch ) and Get ( LayoutTableName ) = "reference" and $$add = 1 ]
    // Set Variable [ $filterFind; Value:reference::filterFind ]
    // #
    // If [ $$citationMatch ≠ "key" ]
    // Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // #
    // Else If [ $$citationMatch = "key" ]
    // Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // End If
    // #
    // Else If [ "main" ≠ FilterValues ( testlearn::filterFind ; "main" ) and Get ( LayoutTableName ) = "testlearn" ]
    // Set Variable [ $filterFind; Value:testlearn::filterFind ]
    // Set Field [ testlearn::filterFind; "main" & ¶ & $filterFind ]
    // End If
    #
    #Stop load tag record script to speed up this script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Get node and keyword tags linked to this
    #main record.
    If [ Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $nodePrimary; Value:reference::knodePrimary ]
    Set Variable [ $nodeOther; Value:reference::knodeOther ]
    Set Variable [ $keywordPrimary; Value:reference::kkeywordPrimary ]
    Set Variable [ $keywordOther; Value:reference::kkeywordOther ]
    Set Variable [ $$mainKeychain; Value:reference::kcsection ]
    Else If [ Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $nodePrimary; Value:testlearn::kNodePrimary ]
    Set Variable [ $nodeOther; Value:testlearn::kNodeOther ]
    Set Variable [ $keywordPrimary; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $keywordOther; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$mainKeychain; Value:testlearn::kcsection ]
    Else If [ Get ( LayoutTableName ) = "tagMenus" ]
    Set Variable [ $nodePrimary; Value:TEMP::kdefaultNodePrimary ]
    Set Variable [ $nodeOther; Value:TEMP::kdefaultNodeOther ]
    Else If [ Get ( LayoutTableName ) = "tempSetup" ]
    Set Variable [ $nodePrimary; Value:tempSetup::kdefaultNodePrimary ]
    Set Variable [ $nodeOther; Value:tempSetup::kdefaultNodeOther ]
    Set Variable [ $$mainKeychain; Value:tempSetup::ksection ]
    #Left this section in for setup, althought script never
    #goes to setup section, so this is here just to note
    #that I did think of this, but after testing determined
    #the setup section is not neccessary.
    End If
    #
    #Perform the rest of the script in a new window so
    #users place is not lost in current window.
    New Window [ ]
    Go to Layout [ “ltagNK1” (tagMenus) ]
    #
    #PRIMARY NODE
    #Find primary node if there is one.
    If [ $nodePrimary ≠ "" ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $nodePrimary ]
    Perform Find [ ]
    #
    #Add any section keys just added to the main record
    #that are not in this tag's section group keychain.
    If [ $nodePrimary = tagMenus::_Ltag ]
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain_addMode” ]
    End If
    End If
    #
    #OTHER NODES
    #Find other nodes if there are any.
    If [ $nodeOther ≠ "" ]
    #
    #Determine how many keys there are to find for
    #on the other nodes' keychain.
    Set Variable [ $numberOfNodes; Value:ValueCount ( $nodeOther ) ]
    #
    #Loop thru each node record, with every key
    #in the keychain.
    Loop
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfNodes = 0 ]
    #
    #Find node.
    Set Variable [ $$stopLoadCitation ]
    Go to Layout [ “ltagNK1” (tagMenus) ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; GetValue ( $nodeOther ; $numberOfNodes ) ]
    Perform Find [ ]
    #
    #Add any section keys just added to the main record
    #that are not in this tag's section group keychain.
    If [ GetValue ( $nodeOther ; $numberOfNodes ) = tagMenus::_Ltag ]
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain_addMode” ]
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfNodes; Value:$numberOfNodes - 1 ]
    End Loop
    End If
    #
    #
    #
    #
    #Find all keywords assigned if there are any.
    If [ $keywordPrimary ≠ "" ]
    #Find in a new window so user's place is not lost
    #on Tag Menus window.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $keywordPrimary ]
    Perform Find [ ]
    #
    #PRIMARY KEYWORD
    #
    #Add any section keys just added to the main record
    #that are not in this tag's section group keychain.
    If [ $keywordPrimary = tagMenus::_Ltag ]
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain_addMode” ]
    End If
    End If
    #
    #OTHER KEYWORDS
    #Find all keywords assigned if there are any.
    If [ $keywordOther ≠ "" ]
    #
    #Determine how many keys there are to find for
    #on the other keywords' keychain.
    Set Variable [ $numberOfKeywords; Value:ValueCount ( $keywordOther ) ]
    #
    #Loop thru each keyword record, with every key
    #in the keychain.
    Loop
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeywords = 0 ]
    #
    #Find keyword.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; GetValue ( $keywordOther ; $numberOfKeywords ) ]
    Perform Find [ ]
    #
    #Add any section keys just added to the main record
    #that are not in this tag's section group keychain.
    If [ GetValue ( $keywordOther ; $numberOfKeywords ) = tagMenus::_Ltag ]
    Perform Script [ “CHUNKaddMainSectionKeysToTagRecordKeychain_addMode” ]
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeywords; Value:$numberOfKeywords - 1 ]
    End Loop
    End If
    #
    #Turn top load tag record script back on.
    Set Variable [ $$stopLoadTagRecord ]
    Set Variable [ $$stopLoadCitation ]
    #
    Set Variable [ $$mainKeychain ]
    Close Window [ Current Window ]
    #

Fields used in this script

    TEMP::ksection
    reference::kcsection
    testlearn::kcsection
    reference::filterFind
    testlearn::filterFind
    reference::knodePrimary
    reference::knodeOther
    reference::kkeywordPrimary
    reference::kkeywordOther
    testlearn::kNodePrimary
    testlearn::kNodeOther
    testlearn::kKeywordPrimary
    testlearn::kcKeywordOther
    TEMP::kdefaultNodePrimary
    TEMP::kdefaultNodeOther
    tempSetup::kdefaultNodePrimary
    tempSetup::kdefaultNodeOther
    tempSetup::ksection
    tagMenus::_Ltag

Scripts used in this script

    CHUNKaddMainSectionKeysToTagRecordKeychain_addMode

Layouts used in this script

    ltagNK1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [CHUNKaddReferenceNodesAndKeywords]	Parent Folder: [reference(citation)]	Next Script: [deleteReference]
Script Name	addORremoveCitationOrReferenceRefTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    addORremoveRefTagStep1

Script Definition
Script Steps

    #
    #Get current record IDs in reference or
    #observation window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    If [ testlearn::kcitation ≠ "" ]
    Show Custom Dialog [ Message: "References can be added after the citation is removed. (Cite the source of an unchanged copy, clip, quote, etc. from one source. Reference the sources of your rewording/remixing of one or more texts, movies, etc.)"; Buttons: “OK” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Halt Script
    End If
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$ref; Value:reference::lock ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If tag user clicked has not yet been selected, then add it.
    If [ reference::_Lreference & "¶" ≠ FilterValues ( $$ref ; reference::_Lreference & "¶" ) ]
    Freeze Window
    Perform Script [ “CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain” ]
    // #
    // #Stop script if user trying to add reference or learn record
    // #that has references or citations added to it.
    // #In the future this will be possible, but for now I need
    // #to focus on other things to get the beta released.
    // If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" or reference::kcitation ≠ "" ]
    // Show Custom Dialog [ Message: "For now, you cannot use a record that has its own citation or references added to it as a citation or reference for another record. This is a known issue, and in a future release it will be resolved. "; Buttons: “OK” ]
    // Exit Script [ ]
    // End If
    #
    Set Variable [ $newRef; Value:reference::_Lreference ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    #
    #Add reference in reference or observation window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kcreference; $newRef & "¶" & $$ref ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::lock; $newRef & "¶" & $$ref ]
    Set Variable [ $$ref; Value:reference::lock ]
    Go to Field [ ]
    End If
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    // #Sort records according to users wishes.
    // If [ TEMP::sortKey = "cat" ]
    // Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    // Else If [ TEMP::sortKey = "abc" ]
    // Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    // End If
    // Set Variable [ $$stopLoadTagRecord ]
    // Go to Record/Request/Page [ First ]
    // Scroll Window [ Home ]
    Freeze Window
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    #
    #Check main checkbox if record is not already
    #a main record. This is because when going to
    #edit cite or reference records, only main records
    #are shown by default.
    If [ "main" & ¶ ≠ FilterValues ( reference::filterFind ; "main" & ¶ ) and Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "main" & ¶ & $filterFind ]
    End If
    #
    #If reference or learn record that tag was added
    #to belongs to more than one section, then
    #add these other sections to the tag's group
    #keychain so when this tag record is viewed in
    #those sections, the reference or learn record
    #just added to it will show up as well.
    Perform Script [ “CHUNKaddReferenceNodesAndKeywords” ]
    #Sort records according to users wishes.
    Freeze Window
    If [ TEMP::sortRef = "cat" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortRef = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ FilterValues ( $$ref ; reference::_Lreference ) = reference::_Lreference & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ FilterValues ( $$ref ; reference::_Lreference ) ≠ reference::_Lreference & ¶ ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ First ]
    End If
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    End If
    #
    #If tag has been selected, then remove it.
    Set Variable [ $removeRef; Value:reference::_Lreference ]
    #
    #Set record number so can return user to it when done.
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Field [ testlearn::kcreference; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$ref) ≠ ValueCount ( Substitute ( $$ref ; $removeRef & "¶" ; "" ) ) ; Substitute ( $$ref ; $removeRef & "¶" ; "" ) ; Substitute ( $$ref ; $removeRef; "" ) ) ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Set Field [ reference::lock; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used If ( ValueCount ( $$ref ) ≠ ValueCount ( Substitute ( $$ref ; $removeRef& "¶" ; "" ) ) ; Substitute ( $$ref ; $removeRef & "¶" ; "" ) ; Substitute ( $$ref ; $removeRef ; "" ) ) ]
    Set Variable [ $$ref; Value:reference::lock ]
    Go to Field [ ]
    End If
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #Sort records according to users wishes.
    If [ TEMP::sortRef = "cat" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::orderOrLock; ascending tagKeywordPrimary::tag; ascending reference::referenceShort; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortRef = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    Set Variable [ $$stopLoadTagRecord ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ $recordNumber ] [ No dialog ]
    Set Variable [ $$skipFirstPartOfScript ]

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::lock
    reference::_Lreference
    reference::kcitation
    TEMP::sortKey
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    reference::filterFind
    TEMP::sortRef
    tagKeywordPrimary::orderOrLock
    tagKeywordPrimary::tag
    reference::referenceShort

Scripts used in this script

    CHUNKaddMainRecordSectionKeysToCiteOrRefSectionKeychain
    CHUNKaddReferenceNodesAndKeywords

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addORremoveCitationOrReferenceRefTag]	Parent Folder: [reference(citation)]	Next Script: [showFileInReferenceWindow]
Script Name	deleteReference
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ tagNodeCreator::orderOrLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to delete records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Cancel find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    #Exit field so user can see red delete
    #formatting later on.
    Go to Field [ ]
    #
    #Prevent all record load scripts (they slow down
    #this script and are uneccessary).
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Set variables to conditionally format section to
    #be deleted, and its record number so if the
    #user cancels the delete, the system can return
    #to this record.
    Set Variable [ $delete; Value:reference::_Lreference ]
    Set Variable [ $deleteName; Value:reference::_Number ]
    Set Variable [ $recordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $section; Value:TEMP::ksection ]
    #
    #Because there may be no records found, stop
    #the system from informing the user of this.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Open a new window and look for record being
    #cited or used as a reference by another record.
    New Window [ ]
    #
    Loop
    #
    #Clear the inUse variable before each run thru
    #the loop. If not cleared, then last time thru
    #if this variable had a value in it, that value will
    #stay in it even if no finds are made, which then
    #tells the system that a no-find reference, has finds.
    #So the system must clear this variable before each
    #run thru the loop.
    Set Variable [ $inUse ]
    #
    #See if reference is used by any learn records as a
    #citation.
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcitation; $delete ]
    Set Field [ testlearn::kcsection; $section ]
    Perform Find [ ]
    #
    If [ Get (LastError) ≠ 401 ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " learn (cite tag)" ]
    End If
    #
    #See if reference is used by any learn records as a
    #reference.
    Go to Layout [ “tableTestLearn” (testlearn) ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcreference; $delete ]
    Set Field [ testlearn::kcsection; $section ]
    Perform Find [ ]
    #
    If [ Get (LastError) ≠ 401 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " learn (reference tag)" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " learn (reference tag)" ]
    End If
    End If
    #
    #See if reference is used by any reference records as a
    #citation.
    Go to Layout [ “Reference” (reference) ]
    Enter Find Mode [ ]
    Set Field [ reference::kcitation; $delete ]
    Set Field [ reference::kcsection; "==" & $section ]
    Perform Find [ ]
    #
    If [ Get (LastError) ≠ 401 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & Get (FoundCount) & " reference (cite tag)" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:Get (FoundCount) & " reference (cite tag)" ]
    End If
    End If
    #
    #See if reference record is used by any tag records as a
    #picture.
    Go to Layout [ “tableTag” (tagTable) ]
    #picture1
    Enter Find Mode [ ]
    Set Field [ tagTable::Kpicture1; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound1; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #picture2
    Enter Find Mode [ ]
    Set Field [ tagTable::Kpicture2; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound2; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #picture3
    Enter Find Mode [ ]
    Set Field [ tagTable::Kpicture3; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound3; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    If [ $tagFound1 + $tagFound2 + $tagFound3 ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & ($tagFound1 + $tagFound2 + $tagFound3) & " tag menu picture(s) (" & $tagName & ")" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:($tagFound1 + $tagFound2 + $tagFound3) & " tag menu picture(s) (" & $tagName & ")" ]
    End If
    End If
    #
    Set Variable [ $tagFound1 ]
    Set Variable [ $tagFound2 ]
    Set Variable [ $tagFound3 ]
    Set Variable [ $tagNameADD ]
    Set Variable [ $tagName ]
    #
    #See if reference record is used by any tag records
    #as a web link.
    Go to Layout [ “tableTag” (tagTable) ]
    #link1
    Enter Find Mode [ ]
    Set Field [ tagTable::Ktitle1; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound1; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #link2
    Enter Find Mode [ ]
    Set Field [ tagTable::Ktitle2; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound2; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #link3
    Enter Find Mode [ ]
    Set Field [ tagTable::Ktitle3; $delete ]
    Set Field [ ruleLibrary 2::ksection; $section ]
    Perform Find [ ]
    Set Variable [ $tagFound3; Value:Get (FoundCount) ]
    If [ Get (FoundCount) > 0 ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $tagNameADD; Value:$tagName ]
    Set Variable [ $tagName; Value:Case ( $tagNameAdd = "" ; tagTable::tag ; $tagNameAdd & "; " & tagTable::tag ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If
    #
    If [ $tagFound1 + $tagFound2 + $tagFound3 ≠ 0 ]
    If [ $inUse ≠ "" ]
    Set Variable [ $addToInUse; Value:$inUse ]
    Set Variable [ $inUse; Value:$addToInUse & ", " & ($tagFound1 + $tagFound2 + $tagFound3) & " tag menu link(s) (" & $tagName & ")" ]
    Else If [ $inUse = "" ]
    Set Variable [ $inUse; Value:($tagFound1 + $tagFound2 + $tagFound3) & " tag menu link(s) (" & $tagName & ")" ]
    End If
    End If
    #
    Set Variable [ $tagFound1 ]
    Set Variable [ $tagFound2 ]
    Set Variable [ $tagFound3 ]
    Set Variable [ $tagNameADD ]
    Set Variable [ $tagName ]
    #
    #If the current record is in use in the section of
    #the database from which the delete was requested,
    #inform the user of this, and skip the next
    #steps of this loop and the next loop, which.
    #is for checking if record is in use in other sections.
    If [ $section = TEMP::ksection and $inUse ≠ "" ]
    #
    #If the record was in use in the current section
    #then do not look for it in other sections.
    Set Variable [ $checkSection; Value:$section ]
    Set Variable [ $section ]
    Exit Loop If [ $checkSection = TEMP::ksection and $inUse ≠ "" ]
    End If
    #
    #If the current record is not in use in the section
    #of the database from which this delete was started,
    #capture this information.
    If [ $section = TEMP::ksection and $inUse = "" ]
    Set Variable [ $deleteNotInUse; Value:"not in use" ]
    End If
    #
    #Exit the loop if there is only 1 section key for this record
    #or if the system just checked for the record
    #in all sections of the database, which
    #is why the section variable would be blank.
    #In the latter case, the loop would be coming round
    #after checking all sections in the database.
    #At first the loop is confined to looking at all records
    #in this section. Once it has done that, a script
    #step below exits the loop only to enter a loop
    #that clears the section variable and causes the
    #system to re-enter this loop, only with a blank
    #section variable so it will look in all sections of the
    #database. When it reaches this step, that blank
    #section variable will force it out of this loop and
    #a similar script step in the outer loop will do the
    #same thereby allowing the system to follow the
    #remainder of this script to report on the findings
    #made during these discovery loops.
    Exit Loop If [ ValueCount ( reference::kcsection ) = 1 or $section = "" ]
    #
    #If the current record is not in use in the section
    #of the database where the delete was started,
    #make sure it is not in use in any other section.
    Set Variable [ $section ]
    #
    End Loop
    #
    Close Window [ Current Window ]
    #
    #
    #
    #
    #Report on findings and if none delete record.
    #
    #
    #
    #
    #If the record in question was not found in the
    #section the user is deleting it from...
    If [ $deleteNotInUse ≠ "" ]
    #
    #But this record is in use in other sections...
    If [ $inUse ≠ "" ]
    #
    Refresh Window
    Show Custom Dialog [ Message: "This record cannot be deleted as it in use in other sections of the database. You can remove it from this section though as it is not being used in this section."; Buttons: “cancel”, “remove” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    #
    #If the user chooses not to remove the record
    #everything goes back to the way it was.
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Refresh Window
    Exit Script [ ]
    Else If [ Get ( LastMessageChoice ) = 2 ]
    #
    Set Variable [ $delete ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #If the user choses to proceed with the removal,
    #the section key is removed from the record's
    #key chain. ( paragraph mark is added to section in
    # case the key has no paragraph mark after it and so
    # would not be found. )
    Set Field [ reference::kcsection; Substitute ( reference::kcsection & ¶ ; TEMP::ksection & ¶ ; "" ) ]
    #
    #Omit the record as it no longer is part of this section.
    Omit Record
    #
    End If
    Exit Script [ ]
    End If
    End If
    #
    #
    #
    #If record was found in current section tell user.
    If [ $inUse ≠ "" ]
    Set Variable [ $delete ]
    Refresh Window
    Show Custom Dialog [ Message: "Record cannot be deleted as it in use in these windows: " & $inUse & "."; Buttons: “OK” ]
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    End If
    #
    #
    #
    #
    #If the record being deleted was not found in
    #use in any sections of the database then before
    #deleting it make sure the user really wants it deleted.
    Set Variable [ $group ]
    Refresh Window
    Show Custom Dialog [ Message: "Delete current record?"; Buttons: “cancel”, “delete” ]
    Set Variable [ $group; Value:tagMenus::kGroupOrTest ]
    Set Variable [ $deleteGroup; Value:ruleTagMenuGroups::name ]
    #
    #If the user cancels, stop the delete.
    If [ Get ( LastMessageChoice ) = 1 ]
    Go to Field [ ]
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Exit Script [ ]
    #
    #If the user says yes, then delete the record.
    Else If [ Get ( LastMessageChoice ) = 2 ]
    Delete Record/Request [ No dialog ]
    #
    End If
    Set Variable [ $delete ]
    Set Variable [ $group ]
    Refresh Window
    Set Variable [ $$addTagToCitation ]
    Set Variable [ $$stopLoadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadCitation” ]
    #

Fields used in this script

    tagNodeCreator::orderOrLock
    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    reference::_Lreference
    reference::_Number
    TEMP::ksection
    testlearn::kcitation
    testlearn::kcsection
    testlearn::kcreference
    reference::kcitation
    reference::kcsection
    tagTable::Kpicture1
    ruleLibrary 2::ksection
    tagTable::tag
    tagTable::Kpicture2
    tagTable::Kpicture3
    tagTable::Ktitle1
    tagTable::Ktitle2
    tagTable::Ktitle3
    tagMenus::kGroupOrTest
    ruleTagMenuGroups::name

Scripts used in this script

    loadCitation

Layouts used in this script

    tableTestLearn
    Reference
    tableTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [deleteReference]	Parent Folder: [reference(citation)]	Next Script: [showReference1]
Script Name	showFileInReferenceWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Show reference file.
    If [ FilterValues ( citationTitle1::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute (Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationTitle1::fileName ; " " ; "%20" ) ] [ No dialog ]
    Else If [ FilterValues ( citationTitle1::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationTitle1::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationTitle1::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    If [ Right (citationTitle1::fileName ; 3) = "mp4" or Right (citationTitle1::fileName ; 3) = "mov" ]
    Open URL [ Substitute ( tagFolderPathForFile::tag & citationTitle1::fileName ; " " ; "%20" ) ] [ No dialog ]
    Else
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagFolderPathForFile::tag ; " " ; "%20" ) & Case ( Left ( citationTitle1::fileName ; 1 ) = "/" ; Substitute ( citationTitle1::fileName ; " " ; "%20" ) ; "/" & Substitute ( citationTitle1::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    End If
    Else If [ citationTitle1::URL ≠ "" ]
    Open URL [ citationTitle1::URL ] [ No dialog ]
    End If
    #
    #Show testlearn file.
    If [ FilterValues ( TLTitle1::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLTitle1::filename ; " " ; "%20" ) ] [ No dialog ]
    Else If [ FilterValues ( TLTitle1::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLTitle1::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLTitle1::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagTLFolderPathForFile1::tag & TLTitle1::filename ; " " ; "%20" ) ] [ No dialog ]
    Else If [ TLTitle1::URL ≠ "" ]
    Open URL [ TLTitle1::URL ] [ No dialog ]
    End If
    #
    #Show path folder.
    If [ tagMenus::tag ≠ "" and $$citationMatch = "path" ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagMenus::tag ; " " ; "%20" ) ] [ No dialog ]
    End If

Fields used in this script

    citationTitle1::kfileLocation
    citationTitle1::fileName
    tagFolderPathForFile::tag
    citationTitle1::URL
    TLTitle1::kfileLocation
    TLTitle1::filename
    tagTLFolderPathForFile1::tag
    TLTitle1::URL
    tagMenus::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showFileInReferenceWindow]	Parent Folder: [reference(citation)]	Next Script: [showReference2]
Script Name	showReference1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have choose not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    If [ $$add = "" ]
    Show Custom Dialog [ Message: "Click the 'add' button above and then click this button to see citation for this item. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the field is blank then stop the script.
    #No poin in looking for a record where there isn't one.
    If [ tagMenus::Ktitle1 = "" ]
    Exit Script [ ]
    End If
    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:tagMenus::Ktitle1 ]
    #
    #Determine if the key comes from the testlearn
    #table, and if so perform these script steps.
    If [ TLTitle1::_Ltestlearn ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ <unknown> ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Determine if the key comes from the reference
    #table, and if so perform these script steps.
    Else If [ citationTitle1::_Lreference ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If

Fields used in this script

    tagMenus::Ktitle1
    TLTitle1::_Ltestlearn
    testlearn::_Ltestlearn
    citationTitle1::_Lreference
    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showReference1]	Parent Folder: [reference(citation)]	Next Script: [showReference3]
Script Name	showReference2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have choose not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    If [ $$add = "" ]
    Show Custom Dialog [ Message: "Click the 'add' button above and then click this button to see citation for this item. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the field is blank then stop the script.
    #No poin in looking for a record where there isn't one.
    If [ tagMenus::Ktitle2 = "" ]
    Exit Script [ ]
    End If
    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:tagMenus::Ktitle2 ]
    #
    #Determine if the key comes from the testlearn
    #table, and if so perform these script steps.
    If [ TLTitle2::_Ltestlearn ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ <unknown> ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Determine if the key comes from the reference
    #table, and if so perform these script steps.
    Else If [ citationTitle2::_Lreference ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If

Fields used in this script

    tagMenus::Ktitle2
    TLTitle2::_Ltestlearn
    testlearn::_Ltestlearn
    citationTitle2::_Lreference
    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showReference2]	Parent Folder: [reference(citation)]	Next Script: [internalReferences]
Script Name	showReference3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is not in add mode then inform user they
    #must be before the database will show them reference
    #data. The reason for this is because the layout
    #in the reference or learn window changes to the
    #add tag from these windows to the Tag Menu
    #item selected. So instead of having the system
    #automatically go into add mode, the user must
    #decide they want to do this and thus be expecting
    #a change in the layouts. Otherwise this change
    #could confuse a user. So at the cost of minor
    #inconvience I have choose not to have the system
    #guess the user wants to go into add mode and is
    #expecting the system to do that when they click
    #one of these numbered buttons on the showEvenMore
    #layouts.
    If [ $$add = "" ]
    Show Custom Dialog [ Message: "Click the 'add' button above and then click this button to see citation for this item. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If the field is blank then stop the script.
    #No poin in looking for a record where there isn't one.
    If [ tagMenus::Ktitle3 = "" ]
    Exit Script [ ]
    End If
    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:tagMenus::Ktitle3 ]
    #
    #Determine if the key comes from the testlearn
    #table, and if so perform these script steps.
    If [ TLTitle3::_Ltestlearn ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "Learn" ]
    Go to Layout [ <unknown> ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    #Determine if the key comes from the reference
    #table, and if so perform these script steps.
    Else If [ citationTitle3::_Lreference ≠ "" ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    End If

Fields used in this script

    tagMenus::Ktitle3
    TLTitle3::_Ltestlearn
    testlearn::_Ltestlearn
    citationTitle3::_Lreference
    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showReference3]	Parent Folder: [reference(citation)]	Next Script: [externalReferences]
Script Name	internalReferences
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ $$findmode ≠ 1 ]
    #Set testlearn internal reference field conditional
    #formatting to green if there are any.
    Set Variable [ $$internal; Value:1 ]
    #
    #Show all internal reference possibilities.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenu4STUFFRefCite” (testlearn) ]
    Else
    Go to Layout [ “learnMenu4RefCite” (testlearn) ]
    End If
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Set Field [ testlearn::sampleCasePoint; "1" ]
    End If
    Set Field [ testlearn::filterFind; "main" ]
    Perform Find [ ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Sort Records [ Specified Sort Order: testlearn::Caption; ascending testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Else
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    End If
    #
    #If the user has yet to create any Learn or internal records
    #let them know, and return user to outside reference records.
    If [ Get (LastError) = 401 ]
    Perform Script [ “externalReferences” ]
    Show Custom Dialog [ Message: "No inside (Learn) records have been created."; Buttons: “OK” ]
    End If
    #
    #Continue with show all internal reference possibilities...
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ testlearn::_Ltestlearn = $$cite and $$citationMatch = "cite" or testlearn::_Ltestlearn & "¶" = FilterValues ( $$ref ; testlearn::_Ltestlearn & "¶" ) and $$citationMatch = "ref" ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Decided below was too much help. User can look
    #on main screen to see where cite or reference is located.
    // #Capture information about location of ref and cite records.
    // #Because it can be in four possible locations, conditonal
    // #formatting is essential to help user remember.
    // If [ testlearn::_Ltestlearn = $$citationitem and $$citationMatch = "cite" ]
    // #
    // #Turn on cite location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$citeIsLearnRecord; Value:1 ]
    // #
    // Else If [ testlearn::_Ltestlearn & "¶" = FilterValues ( $$ref ; testlearn::_Ltestlearn & "¶" ) and $$citationMatch = "ref" ]
    // #
    // #Turn on reference location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$refIsLearnRecord; Value:1 ]
    // End If
    #
    #If no records are used as a cite or ref, go to first record.
    If [ Get (LastError) = 101 ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    #
    // #Turn on reference location variable that conditionally
    // #formatts buttons to tell user where reference is located.
    // Set Variable [ $$refIsLearnRecord ]
    End If
    #
    #Update conditional formatting in main window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #If in find mode ...
    Else If [ $$findmode = 1 ]
    #Set testlearn internal reference field conditional
    #formatting to green if there are any.
    Set Variable [ $$internal; Value:1 ]
    #
    #Show all internal reference possibilities.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenu4RefStuffCiteFindTL” (testlearn) ]
    Else
    Go to Layout [ “learnMenu4RefCiteFindTL” (testlearn) ]
    End If
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Set Field [ testlearn::sampleCasePoint; "1" ]
    End If
    Perform Find [ ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Sort Records [ Specified Sort Order: testlearn::Caption; ascending testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    End If
    End If

Fields used in this script

    TEMP::InventoryLibaryYN
    TEMP::ksection
    testlearn::kcsection
    testlearn::sampleCasePoint
    testlearn::filterFind
    testlearn::Caption
    testlearn::date
    testlearn::timestamp
    testlearn::_Ltestlearn

Scripts used in this script

    externalReferences

Layouts used in this script

    learnMenu4STUFFRefCite
    learnMenu4RefCite
    learnMenu4RefStuffCiteFindTL
    learnMenu4RefCiteFindTL

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [internalReferences]	Parent Folder: [reference(citation)]	Next Script: [changeSpellingOfReferenceNodes]
Script Name	externalReferences
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuReference
    TgotoCitationMenu
    internalReferences

Script Definition
Script Steps

    #
    #
    #
    #Use this bit of code to make the default reference
    #point to the internal (Learn) records instead of
    #the external references. Other scripts with code
    #that needs to be turned on: menuReference,
    // #If library is for inventory then go to container menu.
    // If [ TEMP::InventoryLibaryYN ≠ "" ]
    // Perform Script [ “menuReference” ]
    // Exit Script [ ]
    // End If
    #
    #If current mode is citation then use cite menu scirpt.
    If [ $$citationMatch = "cite" ]
    Perform Script [ “menuRefAddKeyWords” ]
    Exit Script [ ]
    End If
    #
    If [ $$findmode ≠ 1 ]
    #Set testlearn internal reference field conditional
    #formatting to transparent.
    Set Variable [ $$internal ]
    #
    #Show all internal reference possibilities.
    #
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “learnMenuRefStuff” (reference) ]
    Else
    Go to Layout [ “learnMenu3Cite” (reference) ]
    End If
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Go to citation record's current selection or to first record.
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ FilterValues ( $$ref ; reference::_Lreference ) = reference::_Lreference & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ FilterValues ( $$ref ; reference::_Lreference ) ≠ reference::_Lreference & ¶ ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    End If
    Set Variable [ $$stoploadCitation ]
    Set Variable [ $$stopLoadTagRecord ]
    #
    #Update conditional formatting in main window.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Else If [ $$findmode = 1 ]
    #Set testlearn internal reference field conditional
    #formatting to transparent.
    Set Variable [ $$internal ]
    #
    #Show all internal reference possibilities.
    Go to Layout [ “learnFindCite” (reference) ]
    End If

Fields used in this script

    TEMP::InventoryLibaryYN
    reference::_Lreference

Scripts used in this script

    menuReference
    menuRefAddKeyWords

Layouts used in this script

    learnMenuRefStuff
    learnMenu3Cite
    learnFindCite

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [externalReferences]	Parent Folder: [reference(citation)]	Next Script: [duplicateReferenceRecord]
Script Name	changeSpellingOfReferenceNodes
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $key; Value:reference::referenceNodes ]
    Set Variable [ $keyOLD; Value:reference::referenceNodesOLD ]
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #
    If [ $keyOLD & "¶" = FilterValues ( $keychain ; $keyOLD & "¶" ) and $key = "" ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $keyOLD & "¶" ; "" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    Else If [ $keyOLD & "¶" = FilterValues ( $keychain ; $keyOLD & "¶" ) ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $keyOLD & "¶" ; $key & "¶" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    End If
    Set Field [ reference::referenceNodesOLD; $key ]

Fields used in this script

    reference::referenceNodes
    reference::referenceNodesOLD
    reference::kcopyrightHolder

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [changeSpellingOfReferenceNodes]	Parent Folder: [reference(citation)]	Next Script: [addModeReferenceLearnToggle]
Script Name	duplicateReferenceRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ TEMP::nodeLock ≠ "" ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to create new records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit script.
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Cancel find mode, then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If in find mode, exit find mode.
    If [ $$findMode= 1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Set Variable [ $$findMode ]
    Set Variable [ $$firstFind ]
    Set Variable [ $$firstFindOther ]
    Set Variable [ $$found ]
    Set Variable [ $$foundOther ]
    Go to Layout [ $$findLayout ]
    Set Variable [ $$stoploadCitation ]
    Select Window [ Name: "References"; Current file ]
    End If
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    Set Variable [ $type; Value:reference::kmediaType ]
    Set Variable [ $media; Value:reference::kmedia ]
    Set Variable [ $typeOther; Value:reference::TypeOfMediumOther ]
    #
    Set Variable [ $P; Value:reference::kkeywordPrimary ]
    Set Variable [ $O; Value:reference::kkeywordOther ]
    Set Variable [ $Owords; Value:reference::OtherKeyWords ]
    #$$nodeprimary is already known by the system.
    Set Variable [ $NodeOthers; Value:reference::NodeOthers ]
    Set Variable [ $authorList; Value:reference::referenceNodes ]
    Set Variable [ $authorListOLD; Value:reference::referenceNodesOLD ]
    Set Variable [ $title; Value:reference::Title ]
    #
    Set Variable [ $picture; Value:reference::picture ]
    #
    Set Variable [ $chapter; Value:reference::bookChapter ]
    Set Variable [ $dissertation; Value:reference::dissertationThesisUniversity ]
    Set Variable [ $govt; Value:reference::governmentAuthor ]
    Set Variable [ $govtDoc; Value:reference::GovernmentDocInfo ]
    Set Variable [ $letter; Value:reference::letterDate ]
    Set Variable [ $email; Value:reference::emailRecipient ]
    Set Variable [ $ctitle; Value:reference::compilationTitle ]
    Set Variable [ $ceditor; Value:reference::compilationEditors ]
    Set Variable [ $cnumber; Value:reference::compilationNumberOfEditors ]
    Set Variable [ $cAbbr; Value:reference::compilationAbbr ]
    Set Variable [ $conIntro; Value:reference::conferenceIntroWords ]
    Set Variable [ $conTitle; Value:reference::conferenceTitle ]
    Set Variable [ $conSubTitle; Value:reference::conferenceSubTitle ]
    Set Variable [ $conGname; Value:reference::conferenceGroupName ]
    Set Variable [ $conLocation; Value:reference::conferenceLocation ]
    Set Variable [ $conDate; Value:reference::conferenceDate ]
    #
    Set Variable [ $volumeNumber; Value:reference::volumeNumber ]
    Set Variable [ $issueNumber; Value:reference::issueNumber ]
    Set Variable [ $pageNumberRange; Value:reference::pageNumberRange ]
    #
    Set Variable [ $noPP; Value:reference::pageNumberOther ]
    #
    Set Variable [ $TimeRange; Value:reference::TimeRange ]
    Set Variable [ $copyrightHolder; Value:reference::kcopyrightHolder ]
    #
    Set Variable [ $notPub; Value:reference::publisherTypeAlternative ]
    Set Variable [ $notPubOther; Value:reference::publisherTypeOther ]
    Set Variable [ $pubLocation; Value:reference::publisherLocation ]
    #
    Set Variable [ $pubYear; Value:reference::pubYear ]
    #
    Set Variable [ $pubDate; Value:reference::PubDate ]
    Set Variable [ $pubDateOther; Value:reference::pubDateOther ]
    #
    Set Variable [ $copyrightYear; Value:reference::CopyrightYear ]
    #
    Set Variable [ $copyrightOtherHolder; Value:reference::copyrightOtherHolder ]
    #
    Set Variable [ $URL; Value:reference::URL ]
    Set Variable [ $URLdate; Value:reference::URLdate ]
    #
    Set Variable [ $library; Value:reference::library only ]
    Set Variable [ $isbn; Value:reference::ISBN ]
    Set Variable [ $doi; Value:reference::URLdoi ]
    Set Variable [ $issn; Value:reference::ISSN ]
    #
    Set Variable [ $fileName; Value:reference::fileName ]
    Set Variable [ $InFolder; Value:reference::kfileLocation ]
    Set Variable [ $citation; Value:reference::kcitation ]
    Set Variable [ $notes; Value:reference::thoughtsNotesEtc ]
    Set Variable [ $refDump; Value:reference::referenceDump ]
    #
    Set Variable [ $rights; Value:reference::rights ]
    Go to Field [ ]
    New Record/Request
    #
    #
    Set Field [ reference::kmediaType; $type ]
    Set Field [ reference::kmedia; $media ]
    Set Field [ reference::TypeOfMediumOther; $typeOther ]
    #
    Set Field [ reference::kkeywordPrimary; $P ]
    Set Field [ reference::kkeywordOther; $O ]
    Set Field [ reference::OtherKeyWords; $Owords ]
    Set Field [ reference::knodePrimary; $$primaryNode ]
    Set Field [ reference::knodeOther; $$node ]
    Set Field [ reference::NodeOthers; $NodeOthers ]
    Set Field [ reference::referenceNodes; $authorList ]
    Set Field [ reference::referenceNodesOLD; $authorListOLD ]
    Set Field [ reference::Title; $title ]
    #
    Set Field [ reference::picture; $picture ]
    #
    Set Field [ reference::bookChapter; $chapter ]
    Set Field [ reference::dissertationThesisUniversity; $dissertation ]
    Set Field [ reference::governmentAuthor; $govt ]
    Set Field [ reference::GovernmentDocInfo; $govtDoc ]
    Set Field [ reference::letterDate; $letter ]
    Set Field [ reference::emailRecipient; $email ]
    Set Field [ reference::compilationTitle; $ctitle ]
    Set Field [ reference::compilationEditors; $ceditor ]
    Set Field [ reference::compilationNumberOfEditors; $cnumber ]
    Set Field [ reference::compilationAbbr; $cAbbr ]
    Set Field [ reference::conferenceIntroWords; $conIntro ]
    Set Field [ reference::conferenceTitle; $conTitle ]
    Set Field [ reference::conferenceSubTitle; $conSubTitle ]
    Set Field [ reference::conferenceGroupName; $conGname ]
    Set Field [ reference::conferenceLocation; $conLocation ]
    Set Field [ reference::conferenceDate; $conDate ]
    #
    Set Field [ reference::korgan; $$organ ]
    Set Field [ reference::volumeNumber; $volumeNumber ]
    Set Field [ reference::issueNumber; $issueNumber ]
    Set Field [ reference::pageNumberRange; $pageNumberRange ]
    #
    Set Field [ reference::pageNumberOther; $noPP ]
    #
    Set Field [ reference::kcopyrightHolder; $copyrightHolder ]
    Set Field [ reference::TimeRange; $TimeRange ]
    #
    Set Field [ reference::kcopyist; $$copyist ]
    #
    Set Field [ reference::publisherTypeAlternative; $notPub ]
    Set Field [ reference::publisherTypeOther; $notPubOther ]
    Set Field [ reference::publisherLocation; $pubLocation ]
    #
    Set Field [ reference::pubYear; $pubYear ]
    #
    Set Field [ reference::PubDate; $pubDate ]
    Set Field [ reference::pubDateOther; $pubDateOther ]
    #
    Set Field [ reference::kHealth; $$health ]
    Set Field [ reference::CopyrightYear; $copyrightYear ]
    #
    Set Field [ reference::copyrightOtherHolder; $copyrightOtherHolder ]
    #
    Set Field [ reference::URL; $URL ]
    Set Field [ reference::URLdate; $URLdate ]
    #
    Set Field [ reference::library only; $library ]
    Set Field [ reference::ISBN; $isbn ]
    Set Field [ reference::URLdoi; $doi ]
    Set Field [ reference::ISSN; $issn ]
    #
    Set Field [ reference::fileName; $fileName ]
    Set Field [ reference::kfileLocation; $InFolder ]
    Set Field [ reference::kfolderpath; $$Path ]
    Set Field [ reference::kcitation; $citation ]
    Set Field [ reference::thoughtsNotesEtc; $notes ]
    Set Field [ reference::referenceDump; $refDump ]
    #
    Set Field [ reference::rights; $rights ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::ktest; TEMP::ktest ]
    Set Field [ reference::incomplete; "incomplete" & ¶ ]
    #
    Set Field [ reference::kcopyrightType; $$copyrightType ]
    Set Field [ reference::lock; $$Ref ]
    If [ Get ( LayoutName ) = "Reference" or Get ( LayoutName ) = "ReferenceStuff" ]
    Set Field [ reference::filterFind; "main" & ¶ ]
    Set Variable [ $$stoploadCitation ]
    #
    #Note that citation is for either the node or keyword depending on the citation match.
    Else If [ Right ( Get ( LayoutName ) ; 3 ) = "TAG" ]
    Set Field [ reference::filterFind; $$addToTag & ¶ ]
    End If
    Sort Records [ ] [ No dialog ]
    Set Variable [ $record; Value:Get (RecordNumber) ]
    Go to Record/Request/Page [ $record ] [ No dialog ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Go to edit layout for this record.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceEDITstuff” (reference) ]
    Else
    Go to Layout [ “ReferenceEDIT” (reference) ]
    End If
    #
    #Prevent add mode.
    Set Variable [ $$stopAdd; Value:1 ]

Fields used in this script

    TEMP::nodeLock
    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    reference::kmediaType
    reference::kmedia
    reference::TypeOfMediumOther
    reference::kkeywordPrimary
    reference::kkeywordOther
    reference::OtherKeyWords
    reference::NodeOthers
    reference::referenceNodes
    reference::referenceNodesOLD
    reference::Title
    reference::picture
    reference::bookChapter
    reference::dissertationThesisUniversity
    reference::governmentAuthor
    reference::GovernmentDocInfo
    reference::letterDate
    reference::emailRecipient
    reference::compilationTitle
    reference::compilationEditors
    reference::compilationNumberOfEditors
    reference::compilationAbbr
    reference::conferenceIntroWords
    reference::conferenceTitle
    reference::conferenceSubTitle
    reference::conferenceGroupName
    reference::conferenceLocation
    reference::conferenceDate
    reference::volumeNumber
    reference::issueNumber
    reference::pageNumberRange
    reference::pageNumberOther
    reference::TimeRange
    reference::kcopyrightHolder
    reference::publisherTypeAlternative
    reference::publisherTypeOther
    reference::publisherLocation
    reference::pubYear
    reference::PubDate
    reference::pubDateOther
    reference::CopyrightYear
    reference::copyrightOtherHolder
    reference::URL
    reference::URLdate
    reference::library only
    reference::ISBN
    reference::URLdoi
    reference::ISSN
    reference::fileName
    reference::kfileLocation
    reference::kcitation
    reference::thoughtsNotesEtc
    reference::referenceDump
    reference::rights
    reference::knodePrimary
    reference::knodeOther
    reference::korgan
    reference::kcopyist
    reference::kHealth
    reference::kfolderpath
    TEMP::ksection
    reference::kcsection
    TEMP::ktest
    reference::ktest
    reference::incomplete
    reference::kcopyrightType
    reference::lock
    reference::filterFind
    TEMP::InventoryLibaryYN

Scripts used in this script

    loadCitation

Layouts used in this script

    <Missing Layout>
    ReferenceEDITstuff
    ReferenceEDIT

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [duplicateReferenceRecord]	Parent Folder: [reference(citation)]	Next Script: [findReferenceRecord]
Script Name	addModeReferenceLearnToggle
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ Get (WindowName) = "References" ]
    Go to Layout [ <unknown> ]
    Set Window Title [ Current Window; New Title: "Learn" ]
    Else If [ Get (WindowName) = "Learn" ]
    Go to Layout [ “ReferenceAddToTag” (reference) ]
    Set Window Title [ Current Window; New Title: "References" ]
    End If

Fields used in this script

Scripts used in this script

Layouts used in this script

    <Missing Layout>
    ReferenceAddToTag

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addModeReferenceLearnToggle]	Parent Folder: [reference(citation)]	Next Script: [sortReferences]
Script Name	findReferenceRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Cancel find in Tag Menus window then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    #Capture errors and tell user about them in custom
    #dialogue box.
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #If the user clicks the find button and the system is already
    #in find mode, capture the user's current find request
    #and then perform the requested find.
    #This capture is done in case nothing is found and the
    #user is asked if they want to modify their request.
    #The system puts in the captured request so that the
    #user can see the failed request.
    If [ Get (WindowMode) = 1 ]
    Set Variable [ $r0; Value:reference::createDate ]
    Set Variable [ $r1; Value:reference::modifyDate ]
    Set Variable [ $r2; Value:reference::show ]
    Set Variable [ $r3; Value:reference::incomplete ]
    Set Variable [ $r4; Value:reference::referenceForReferenceWindow ]
    Set Variable [ $r5; Value:reference::kmediaType ]
    Set Variable [ $r6; Value:reference::kmedia ]
    Set Variable [ $r7; Value:reference::TypeOfMediumOther ]
    Set Variable [ $r8; Value:reference::referenceNodes ]
    Set Variable [ $r9; Value:reference::Title ]
    Set Variable [ $r10; Value:reference::bookChapter ]
    Set Variable [ $r11; Value:reference::governmentAuthor ]
    Set Variable [ $r12; Value:reference::GovernmentDocInfo ]
    Set Variable [ $r13; Value:reference::letterDate ]
    Set Variable [ $r14; Value:reference::emailRecipient ]
    Set Variable [ $r15; Value:reference::compilationTitle ]
    Set Variable [ $r16; Value:reference::compilationEditors ]
    Set Variable [ $r17; Value:reference::compilationNumberOfEditors ]
    Set Variable [ $r18; Value:reference::conferenceIntroWords ]
    Set Variable [ $r19; Value:reference::conferenceTitle ]
    Set Variable [ $r20; Value:reference::conferenceSubTitle ]
    Set Variable [ $r21; Value:reference::conferenceGroupName ]
    Set Variable [ $r22; Value:reference::conferenceLocation ]
    Set Variable [ $r23; Value:reference::conferenceDate ]
    Set Variable [ $r24; Value:reference::volumeNumber ]
    Set Variable [ $r25; Value:reference::issueNumber ]
    Set Variable [ $r26; Value:reference::pageNumberRange ]
    Set Variable [ $r27; Value:reference::TimeRange ]
    Set Variable [ $r28; Value:reference::publisherTypeAlternative ]
    Set Variable [ $r29; Value:reference::publisherLocation ]
    Set Variable [ $r30; Value:reference::pubYear ]
    Set Variable [ $r31; Value:reference::PubDate ]
    Set Variable [ $r32; Value:reference::pubDateOther ]
    Set Variable [ $r33; Value:reference::CopyrightYear ]
    Set Variable [ $r34; Value:reference::copyrightOtherHolder ]
    Set Variable [ $r35; Value:reference::URL ]
    Set Variable [ $r36; Value:reference::URLdate ]
    Set Variable [ $r37; Value:reference::library only ]
    Set Variable [ $r38; Value:reference::ISBN ]
    Set Variable [ $r39; Value:reference::URLdoi ]
    Set Variable [ $r40; Value:reference::ISSN ]
    Set Variable [ $r41; Value:reference::fileName ]
    Set Variable [ $r42; Value:reference::kfileLocation ]
    Set Variable [ $r43; Value:reference::thoughtsNotesEtc ]
    Set Variable [ $r44; Value:reference::referenceDump ]
    Perform Find [ ]
    #
    #If the system is not in find mode and the find button
    #is clicked then capture the current layout name
    #(to return user to it after find), enter find mode,
    #go to the find layout, and await the user's find request.
    Else
    Set Variable [ $$findReferenceLayout; Value:Get (LayoutName) ]
    Enter Find Mode [ ]
    Go to Layout [ “ReferenceFIND” (reference) ]
    Show/Hide Status Area [ Hide ]
    Show/Hide Text Ruler [ Hide ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Go to Field [ reference::referenceForReferenceWindow ]
    Pause/Resume Script [ Indefinitely ]
    Set Variable [ $r0; Value:reference::createDate ]
    Set Variable [ $r1; Value:reference::modifyDate ]
    Set Variable [ $r2; Value:reference::show ]
    Set Variable [ $r3; Value:reference::incomplete ]
    Set Variable [ $r4; Value:reference::referenceForReferenceWindow ]
    Set Variable [ $r5; Value:reference::kmediaType ]
    Set Variable [ $r6; Value:reference::kmedia ]
    Set Variable [ $r7; Value:reference::TypeOfMediumOther ]
    Set Variable [ $r8; Value:reference::referenceNodes ]
    Set Variable [ $r9; Value:reference::Title ]
    Set Variable [ $r10; Value:reference::bookChapter ]
    Set Variable [ $r11; Value:reference::governmentAuthor ]
    Set Variable [ $r12; Value:reference::GovernmentDocInfo ]
    Set Variable [ $r13; Value:reference::letterDate ]
    Set Variable [ $r14; Value:reference::emailRecipient ]
    Set Variable [ $r15; Value:reference::compilationTitle ]
    Set Variable [ $r16; Value:reference::compilationEditors ]
    Set Variable [ $r17; Value:reference::compilationNumberOfEditors ]
    Set Variable [ $r18; Value:reference::conferenceIntroWords ]
    Set Variable [ $r19; Value:reference::conferenceTitle ]
    Set Variable [ $r20; Value:reference::conferenceSubTitle ]
    Set Variable [ $r21; Value:reference::conferenceGroupName ]
    Set Variable [ $r22; Value:reference::conferenceLocation ]
    Set Variable [ $r23; Value:reference::conferenceDate ]
    Set Variable [ $r24; Value:reference::volumeNumber ]
    Set Variable [ $r25; Value:reference::issueNumber ]
    Set Variable [ $r26; Value:reference::pageNumberRange ]
    Set Variable [ $r27; Value:reference::TimeRange ]
    Set Variable [ $r28; Value:reference::publisherTypeAlternative ]
    Set Variable [ $r29; Value:reference::publisherLocation ]
    Set Variable [ $r30; Value:reference::pubYear ]
    Set Variable [ $r31; Value:reference::PubDate ]
    Set Variable [ $r32; Value:reference::pubDateOther ]
    Set Variable [ $r33; Value:reference::CopyrightYear ]
    Set Variable [ $r34; Value:reference::copyrightOtherHolder ]
    Set Variable [ $r35; Value:reference::URL ]
    Set Variable [ $r36; Value:reference::URLdate ]
    Set Variable [ $r37; Value:reference::library only ]
    Set Variable [ $r38; Value:reference::ISBN ]
    Set Variable [ $r39; Value:reference::URLdoi ]
    Set Variable [ $r40; Value:reference::ISSN ]
    Set Variable [ $r41; Value:reference::fileName ]
    Set Variable [ $r42; Value:reference::kfileLocation ]
    Set Variable [ $r43; Value:reference::thoughtsNotesEtc ]
    Set Variable [ $r44; Value:reference::referenceDump ]
    Perform Find [ ]
    End If
    #
    #If the find fails tell the user it failed and give them
    #option to modify their request or cancel the find.
    Loop
    If [ Get (LastError) = 401 ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Set Field [ reference::createDate; $r0 ]
    Set Field [ reference::modifyDate; $r1 ]
    Set Field [ reference::show; $r2 ]
    Set Field [ reference::incomplete; $r3 ]
    Set Field [ reference::referenceForReferenceWindow; $r4 ]
    Set Field [ reference::kmediaType; $r5 ]
    Set Field [ reference::kmedia; $r6 ]
    Set Field [ reference::TypeOfMediumOther; $r7 ]
    Set Field [ reference::referenceNodes; $r8 ]
    Set Field [ reference::Title; $r9 ]
    Set Field [ reference::bookChapter; $r10 ]
    Set Field [ reference::governmentAuthor; $r11 ]
    Set Field [ reference::GovernmentDocInfo; $r12 ]
    Set Field [ reference::letterDate; $r13 ]
    Set Field [ reference::emailRecipient; $r14 ]
    Set Field [ reference::compilationTitle; $r15 ]
    Set Field [ reference::compilationEditors; $r16 ]
    Set Field [ reference::compilationNumberOfEditors; $r17 ]
    Set Field [ reference::conferenceIntroWords; $r18 ]
    Set Field [ reference::conferenceTitle; $r19 ]
    Set Field [ reference::conferenceSubTitle; $r20 ]
    Set Field [ reference::conferenceGroupName; $r21 ]
    Set Field [ reference::conferenceLocation; $r22 ]
    Set Field [ reference::conferenceDate; $r23 ]
    Set Field [ reference::volumeNumber; $r24 ]
    Set Field [ reference::issueNumber; $r25 ]
    Set Field [ reference::pageNumberRange; $r26 ]
    Set Field [ reference::TimeRange; $r27 ]
    Set Field [ reference::publisherTypeAlternative; $r28 ]
    Set Field [ reference::publisherLocation; $r29 ]
    Set Field [ reference::pubYear; $r30 ]
    Set Field [ reference::PubDate; $r31 ]
    Set Field [ reference::pubDateOther; $r32 ]
    Set Field [ reference::CopyrightYear; $r33 ]
    Set Field [ reference::copyrightOtherHolder; $r34 ]
    Set Field [ reference::URL; $r35 ]
    Set Field [ reference::URLdate; $r36 ]
    Set Field [ reference::library only; $r37 ]
    Set Field [ reference::ISBN; $r38 ]
    Set Field [ reference::URLdoi; $r39 ]
    Set Field [ reference::ISSN; $r40 ]
    Set Field [ reference::fileName; $r41 ]
    Set Field [ reference::kfileLocation; $r42 ]
    Set Field [ reference::thoughtsNotesEtc; $r43 ]
    Set Field [ reference::referenceDump; $r44 ]
    #
    Go to Field [ reference::referenceForReferenceWindow ]
    Show Custom Dialog [ Message: "No records match this request."; Buttons: “cancel”, “modify find” ]
    #
    #If the user decides to modify their request then stay
    #in find mode and await the users new request.
    If [ Get ( LastMessageChoice ) = 2 ]
    Pause/Resume Script [ Indefinitely ]
    Set Variable [ $r0; Value:reference::createDate ]
    Set Variable [ $r1; Value:reference::modifyDate ]
    Set Variable [ $r2; Value:reference::show ]
    Set Variable [ $r3; Value:reference::incomplete ]
    Set Variable [ $r4; Value:reference::referenceForReferenceWindow ]
    Set Variable [ $r5; Value:reference::kmediaType ]
    Set Variable [ $r6; Value:reference::kmedia ]
    Set Variable [ $r7; Value:reference::TypeOfMediumOther ]
    Set Variable [ $r8; Value:reference::referenceNodes ]
    Set Variable [ $r9; Value:reference::Title ]
    Set Variable [ $r10; Value:reference::bookChapter ]
    Set Variable [ $r11; Value:reference::governmentAuthor ]
    Set Variable [ $r12; Value:reference::GovernmentDocInfo ]
    Set Variable [ $r13; Value:reference::letterDate ]
    Set Variable [ $r14; Value:reference::emailRecipient ]
    Set Variable [ $r15; Value:reference::compilationTitle ]
    Set Variable [ $r16; Value:reference::compilationEditors ]
    Set Variable [ $r17; Value:reference::compilationNumberOfEditors ]
    Set Variable [ $r18; Value:reference::conferenceIntroWords ]
    Set Variable [ $r19; Value:reference::conferenceTitle ]
    Set Variable [ $r20; Value:reference::conferenceSubTitle ]
    Set Variable [ $r21; Value:reference::conferenceGroupName ]
    Set Variable [ $r22; Value:reference::conferenceLocation ]
    Set Variable [ $r23; Value:reference::conferenceDate ]
    Set Variable [ $r24; Value:reference::volumeNumber ]
    Set Variable [ $r25; Value:reference::issueNumber ]
    Set Variable [ $r26; Value:reference::pageNumberRange ]
    Set Variable [ $r27; Value:reference::TimeRange ]
    Set Variable [ $r28; Value:reference::publisherTypeAlternative ]
    Set Variable [ $r29; Value:reference::publisherLocation ]
    Set Variable [ $r30; Value:reference::pubYear ]
    Set Variable [ $r31; Value:reference::PubDate ]
    Set Variable [ $r32; Value:reference::pubDateOther ]
    Set Variable [ $r33; Value:reference::CopyrightYear ]
    Set Variable [ $r34; Value:reference::copyrightOtherHolder ]
    Set Variable [ $r35; Value:reference::URL ]
    Set Variable [ $r36; Value:reference::URLdate ]
    Set Variable [ $r37; Value:reference::library only ]
    Set Variable [ $r38; Value:reference::ISBN ]
    Set Variable [ $r39; Value:reference::URLdoi ]
    Set Variable [ $r40; Value:reference::ISSN ]
    Set Variable [ $r41; Value:reference::fileName ]
    Set Variable [ $r42; Value:reference::kfileLocation ]
    Set Variable [ $r43; Value:reference::thoughtsNotesEtc ]
    Set Variable [ $r44; Value:reference::referenceDump ]
    #
    #If the user decides to cancel their the find, then return
    #to the main record window and show all records.
    Else If [ Get ( LastMessageChoice ) = 1 ]
    Go to Layout [ $$findReferenceLayout ]
    Show/Hide Status Area [ Hide ]
    Show/Hide Text Ruler [ Hide ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    Perform Find [ ]
    Sort Records [ ] [ No dialog ]
    Go to Record/Request/Page [ First ]
    Set Variable [ $$findReferenceLayout ]
    Exit Script [ ]
    End If
    Perform Find [ ]
    End If
    #
    #If the find is successful then show the user the found
    #records on the main records layout.
    Exit Loop If [ Get (LastError) = 0 ]
    End Loop
    Go to Layout [ $$findReferenceLayout ]
    Go to Layout [ $$findLearnLayout ]
    Set Variable [ $$findReferenceLayout ]
    Sort Records [ ] [ No dialog ]
    Go to Record/Request/Page [ First ]

Fields used in this script

    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate
    reference::show
    reference::incomplete
    reference::referenceForReferenceWindow
    reference::kmediaType
    reference::kmedia
    reference::TypeOfMediumOther
    reference::referenceNodes
    reference::Title
    reference::bookChapter
    reference::governmentAuthor
    reference::GovernmentDocInfo
    reference::letterDate
    reference::emailRecipient
    reference::compilationTitle
    reference::compilationEditors
    reference::compilationNumberOfEditors
    reference::conferenceIntroWords
    reference::conferenceTitle
    reference::conferenceSubTitle
    reference::conferenceGroupName
    reference::conferenceLocation
    reference::conferenceDate
    reference::volumeNumber
    reference::issueNumber
    reference::pageNumberRange
    reference::TimeRange
    reference::publisherTypeAlternative
    reference::publisherLocation
    reference::pubYear
    reference::PubDate
    reference::pubDateOther
    reference::CopyrightYear
    reference::copyrightOtherHolder
    reference::URL
    reference::URLdate
    reference::library only
    reference::ISBN
    reference::URLdoi
    reference::ISSN
    reference::fileName
    reference::kfileLocation
    reference::thoughtsNotesEtc
    reference::referenceDump
    TEMP::ksection
    reference::kcsection

Scripts used in this script

Layouts used in this script

    ReferenceFIND
    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [findReferenceRecord]	Parent Folder: [reference(citation)]	Next Script: [extractCreateDateFromReferenceRecords]
Script Name	sortReferences
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Set Variable [ $$referenceSort ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Set Variable [ $$referenceSort; Value:1 ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Set Variable [ $$referenceSort; Value:2 ]
    End If

Fields used in this script

    tagKeywordPrimary::tag
    reference::referenceForReferenceSort
    reference::createDate
    reference::modifyDate

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [sortReferences]	Parent Folder: [reference(citation)]	Next Script: [REFERENCE LOOP]
Script Name	extractCreateDateFromReferenceRecords
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Loop
    Set Variable [ $number; Value:reference::_Lreference ]
    If [ Middle ( $number ; 5 ; 2 ) ≠ 20 ]
    Set Variable [ $number; Value:0 & reference::_Lreference ]
    End If
    Set Field [ reference::createDate; Left ( $number ; 2 ) & "/" & Middle ( $number ; 3 ; 2 ) & "/" & Middle ( $number ; 5 ; 4 ) & " " & Middle ( $number ; 9 ; 2 ) & ":" & Middle ( $number ; 11 ; 2 ) & ":" & Middle ( $number ; 13 ; 2 ) ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop

Fields used in this script

    reference::_Lreference
    reference::createDate

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [extractCreateDateFromReferenceRecords]	Parent Folder: [reference(citation)]	Next Script: [finishReferenceEdit]
Script Name	REFERENCE LOOP
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Use this script to change some information in all
    #records currently found. Useful for when you make
    #an error covering many records to correct the error.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Go to Record/Request/Page [ First ]
    Loop
    // Set Field [ reference::kkeywordOther; 6152012170316227 & ¶ & 426201211190634 & ¶ & 6202012153813240 & ¶ & 6202012165313251 & ¶ & 10212011022440584 & ¶ & 6092012194220193 & ¶ & 8312012200828513 & ¶ & 8112011135327306 & ¶ & 5262013013530620 & ¶ & 120420111059441036 & ¶ & 9132011003103394 & ¶ ]
    // Set Field [ reference::kkeywordPrimary; 10142013154511774 ]
    // Set Field [ reference::OtherKeyWords; "brain and military, brain and the law, causes and conditions, cognitive control, epidemics, evolution, illusion (rational), mental illness, neuropsychiatry, suicide, volition" ]
    // Set Field [ reference::kfileLocation; 8162011225605315 ]
    // Set Field [ reference::kfolderpath; 5312012152200119 ]
    // Set Field [ reference::kmediaType; 420201300192711 ]
    // Set Field [ reference::kmedia; 424201321462777 ]
    // Set Field [ reference::kcopyrightHolder; 6022012160448133 ]
    // Set Field [ reference::referenceNodes; "Cold Spring Harbor Laboratory" ]
    // Set Field [ reference::korgan; "" ]
    // Set Field [ reference::kcopyist; 5102013023502585 ]
    // Set Field [ reference::GovernmentDocInfo; "Series speakers are from the UCSF Center for Obesity Assessment, Study and Treatment" ]
    // Set Field [ reference::korgan; 6032012182212144 ]
    // Set Field [ reference::CopyrightYear; "" ]
    // Set Field [ reference::pubYear; "" ]
    // Set Field [ reference::incomplete; "" ]
    // Set Field [ testlearn::kcitation; "" ]
    Set Field [ reference::kHealth; "8102011220941282" ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadCitation ]

Fields used in this script

    reference::kkeywordOther
    reference::kkeywordPrimary
    reference::OtherKeyWords
    reference::kfileLocation
    reference::kfolderpath
    reference::kmediaType
    reference::kmedia
    reference::kcopyrightHolder
    reference::referenceNodes
    reference::korgan
    reference::kcopyist
    reference::GovernmentDocInfo
    reference::CopyrightYear
    reference::pubYear
    reference::incomplete
    testlearn::kcitation
    reference::kHealth

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [REFERENCE LOOP]	Parent Folder: [reference(citation)]	Next Script: [editCitation]
Script Name	finishReferenceEdit
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    #
    #If the media and media type have not been selected then tell user these fields are required before exiting the reference record.
    If [ reference::kmedia = "" and TEMP::InventoryLibaryYN = "" or reference::kmediaType = "" and TEMP::InventoryLibaryYN = "" ]
    Show Custom Dialog [ Message: "REQUIRED: media (book, journal article, etc.) and media type (web, CD, paper, etc.) identification."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Continue with going back to reference layout.
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    #Go to reference record layout.
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceStuff” (reference) ]
    Else
    Go to Layout [ “Reference” (reference) ]
    End If
    #
    #Allow add mode.
    Set Variable [ $$stopAdd ]
    #
    #Close reference help window if open.
    Close Window [ Name: "Reference Field Help"; Current file ]
    Set Variable [ $$turnOffThisScript ]

Fields used in this script

    reference::kmedia
    TEMP::InventoryLibaryYN
    reference::kmediaType
    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate

Scripts used in this script

Layouts used in this script

    ReferenceStuff
    Reference

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [finishReferenceEdit]	Parent Folder: [reference(citation)]	Next Script: [showLongCitation]
Script Name	editCitation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    If [ TEMP::ksection = "" ]
    Show Custom Dialog [ Message: "Select a section from the Tag Menus window for records that you create to be placed into."; Buttons: “OK” ]
    Halt Script
    Else If [ tempSetup::kdefaultHealth = "" ]
    Show Custom Dialog [ Message: "Select the default copyright for any new records that you create by clicking the copyright button (you can always change your mind)."; Buttons: “OK” ]
    Halt Script
    Else If [ tempSetup::kdefaultNodePrimary = "" ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible for creating new records) by clicking the node button."; Buttons: “OK” ]
    Halt Script
    End If
    #
    #Make sure creator node's group is part of section group.
    Perform Script [ “addBackSectionCreatorNode” ]
    #
    #Determine if user wants to edit an external citation.
    If [ Get (LayoutTableName) = "reference" ]
    #
    #Capture record ID so system can return user
    #after editing is complete.
    Set Variable [ $$tagEdit; Value:reference::_Lreference ]
    Set Variable [ $$learnTagLayout; Value:Get (LayoutName) ]
    Set Variable [ $$citeORref; Value:$$citationMatch ]
    #
    #Go to reference tag menu so load citation script
    #below will work properly.
    Set Variable [ $$stoploadTagRecord; Value:1 ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Set Variable [ $$stoploadTagRecord ]
    #
    #Capture record ID so system can return user
    #after editing is complete.
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$LearnEdit; Value:testlearn::_Ltestlearn ]
    #
    #Take user to citation edit layout.
    Set Variable [ $$stoploadCitation; Value:1 ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceStuff” (reference) ]
    Else
    Go to Layout [ “Reference” (reference) ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    #
    #Find main records.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    // Set Field [ reference::filterFind; "main" ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceWindow; ascending ] [ Restore; No dialog ]
    #
    #Loop to record to be edited.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$tagEdit = reference::_Lreference ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “menuKey” ]
    Perform Script [ “loadCitation” ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Set Variable [ $refRecordNumber; Value:Get ( RecordNumber ) ]
    Scroll Window [ Home ]
    Go to Record/Request/Page [ Last ]
    Go to Record/Request/Page [ $refRecordNumber ] [ No dialog ]
    #
    Else If [ Left ( Get (LayoutName) ; 1 ) = "d" ]
    #
    #
    #Capture record ID so system can return user
    #after editing is complete.
    Set Variable [ $$defaultRecordNumber; Value:Get (RecordNumber) ]
    Set Variable [ $$defaultTagLayout; Value:Get (LayoutName) ]
    #
    #Go to reference tag menu so load citation script
    #below will work properly.
    Set Variable [ $$stoploadTagRecord; Value:1 ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    Set Variable [ $$stoploadTagRecord ]
    #
    #Capture record ID so system can return user
    #after editing is complete.
    Select Window [ Name: "Setup"; Current file ]
    #
    #Take user to citation edit layout.
    Set Variable [ $$stoploadCitation; Value:1 ]
    If [ TEMP::InventoryLibaryYN ≠ "" ]
    Go to Layout [ “ReferenceStuff” (reference) ]
    Else
    Go to Layout [ “Reference” (reference) ]
    End If
    Set Window Title [ Current Window; New Title: "References" ]
    #
    #Find main records.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ reference::kcsection; TEMP::ksection ]
    // Set Field [ reference::filterFind; "main" ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    #
    #Loop to record to be edited.
    Go to Record/Request/Page [ First ]
    Set Variable [ $$stoploadCitation ]
    Go to Field [ reference::knodePrimary ]
    Perform Script [ “menuKey” ]
    Perform Script [ “loadCitation” ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Scroll Window [ Home ]
    #
    #
    End If

Fields used in this script

    TEMP::ksection
    tempSetup::kdefaultHealth
    tempSetup::kdefaultNodePrimary
    reference::_Lreference
    testlearn::_Ltestlearn
    TEMP::InventoryLibaryYN
    reference::kcsection
    reference::filterFind
    tagKeywordPrimary::tag
    reference::referenceForReferenceWindow
    reference::referenceForReferenceSort
    reference::knodePrimary

Scripts used in this script

    addBackSectionCreatorNode
    menuKey
    loadCitation

Layouts used in this script

    ReferenceMenu2keywordOrNode1
    ReferenceStuff
    Reference

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [editCitation]	Parent Folder: [reference(citation)]	Next Script: [showCitation]
Script Name	showLongCitation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    New Window [ Name: "Citation Note" ]
    Go to Layout [ “longReferenceView” (reference) ]
    Pause/Resume Script [ Indefinitely ]
    Close Window [ Current Window ]
    Exit Script [ ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    longReferenceView

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showLongCitation]	Parent Folder: [reference(citation)]	Next Script: [loadCitation]
Script Name	showCitation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Capture the key to unlock the record it belongs to.
    Set Variable [ $key; Value:reference::_Lreference ]
    #
    #Select the correct window and then change its
    #name if neccessary to match the table the
    #records are coming from.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    End If
    Set Variable [ $$cited; Value:reference::_Lreference ]
    Set Variable [ $$citeLayout; Value:Get (LayoutName) ]
    Set Window Title [ Current Window; New Title: "References" ]
    Go to Layout [ “Reference” (reference) ]
    #
    #Prevent record loading script during loops to
    #find wanted record, which would slow down system.
    Set Variable [ $$stoploadCitation; Value:1 ]
    #
    #Now loop thru all the records until the record
    #that fits the key is found.
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ reference::_Lreference = $key ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Allow the record load script to run and run it.
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]
    #
    #Put focus back on Tag Menus window and conditionally
    #format any items that may be linked to record
    #in the other window.
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window

Fields used in this script

    reference::_Lreference

Scripts used in this script

    loadCitation

Layouts used in this script

    Reference

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showCitation]	Parent Folder: [reference(citation)]	Next Script: [clearCitationMatch]
Script Name	loadCitation
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    showCited
    findPrimaryTL
    findKeyOtherTL
    findPrimaryRef
    findKeyOtherRef
    findReferernce
    addLinksPicturesToTagsMode
    showReferencePicture1
    showReferencePicture2
    showReferencePicture3
    deleteLearnMainRecord
    editLearn
    duplicateLearnRecord
    newLearn
    newReference
    deleteReference
    showReference1
    showReference2
    showReference3
    duplicateReferenceRecord
    editCitation
    showCitation
    backToLearnOrDefaultSetup
    learn

Script Definition
Script Steps

    #
    #This first section is key to stopping this script
    #when another script for example loops thru
    #many records each of which would trigger this
    #script and really slow down the program and
    #create strobe effect that is really irritating to
    #look at.
    If [ $$stoploadCitation = 1 ]
    Exit Script [ ]
    End If
    #
    #These steps effect the button action where when the
    #use clicks on the actual text box of a learn record
    #a new window opens just displaying the text. This
    #stops this when the user was clicking on it to select
    #this record instead of adding text to it.
    If [ Get (LayoutName) = "learn1" or Get (LayoutName) = "learn2" or Get (LayoutName) = "learn3" or Get (LayoutName) = "learn4" ]
    Set Variable [ $$stopOpenNewTextWindow; Value:1 ]
    End If
    #
    #
    #SEE WHAT WAS REMOVED IN OLD VERSION.
    #THE CODE REMOVED WAS DISABLED IN OLD VERSION.
    #
    #This key effects the conditional formatting
    #of any records in the Tag Menus window
    #that are related to the citation record that triggered
    #this script (by the user click on it, of course).
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$citation; Value:testlearn::_Ltestlearn ]
    If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "medium" ]
    Set Variable [ $$citationItem; Value:testlearn::kmedium ]
    Else If [ $$citationMatch = "Path" ]
    Set Variable [ $$citationItem; Value:testlearn::kfolderPath ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "key" ]
    Set Variable [ $$citationItem; Value:testlearn::kKeywordPrimary ]
    Else If [ $$citationMatch = "health" ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$citationItem; Value:testlearn::kHealth ]
    Else If [ $$citationMatch = "cite" ]
    Set Variable [ $$citationItem; Value:testlearn::kcitation ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "ref" ]
    Set Variable [ $$citationItem; Value:testlearn::kcreference ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "test" ]
    Set Variable [ $$citationItem; Value:testlearn::kctest ]
    Else If [ $$citationMatch = "sample" ]
    Set Variable [ $$citationItem; Value:testlearn::kcsample ]
    End If
    #
    #capture keys of related tag menu items to
    #to allow the citationMenu scripts to loop to the
    #primary record of interest when the user navigates
    #to a item on the Tag Menu window
    #whose list of tags like node, keyword, medium, etc.
    #might contain an item related to the current
    #citation record, but which one, which is why all
    #the keys have to be readied. Mmm... now that
    #I write this out, I'm thinking I could have the
    #citationMenu scripts select the citation window
    #to grab the key if any in the current current
    #record that applies the the menu item.
    Set Variable [ $$citationRecord; Value:testlearn::_Ltestlearn ]
    Set Variable [ $$node; Value:testlearn::kNodeOther ]
    Set Variable [ $$primaryNode; Value:testlearn::kNodePrimary ]
    Set Variable [ $$medium; Value:testlearn::kmedium ]
    Set Variable [ $$health; Value:testlearn::kHealth ]
    Set Variable [ $$Path; Value:testlearn::kfolderPath ]
    Set Variable [ $$cite; Value:testlearn::kcitation ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Set Variable [ $$PrimaryKey; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $$Key; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$OtherKey; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$Section; Value:testlearn::kcsection ]
    Set Variable [ $$test; Value:testlearn::kctest ]
    Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Variable [ $$RecordID; Value:Get (RecordID) ]
    Set Variable [ $windowName; Value:Get (WindowName) ]
    Commit Records/Requests
    #
    If [ $$add = "" ]
    #Match any records in tag window and go to
    #primary tag record or to first record if none.
    #And don't run LoadTagRecord until matching is
    #done to prevent flashing and slowing down script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    If [ Get (LastError) = 112 ]
    Perform Script [ “TgotoCitationMenu” ]
    End If
    Refresh Window
    // If [ $$citationMatch = "sample" ]
    // #SEE WHAT WAS REMOVED IN OLD VERSION.
    // #THE CODE REMOVED WAS DISABLED IN OLD VERSION.
    // Else If [ $$citationMatch = "test" ]
    // Go to Record/Request/Page [ First ]
    // Loop
    // Set Variable [ $number; Value:1 ]
    // Go to Field [ ]
    // Loop
    // Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" = test::_Ltest & ¶ ]
    // Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) = "" ]
    // Set Variable [ $add; Value:$number ]
    // Set Variable [ $number; Value:$add + 1 ]
    // End Loop
    // Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" = test::_Ltest & ¶ ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" ≠ test::_Ltest & ¶ ]
    // Go to Record/Request/Page [ First ]
    // End If
    // Else If [ $$citationMatch ≠ "sample" or $$citationMatch ≠ "test" ]
    // Freeze Window
    // Set Variable [ $$stopLoadTagRecord; Value:1 ]
    // Go to Record/Request/Page [ First ]
    // Scroll Window [ Home ]
    // Loop
    // Exit Loop If [ tagMenus::_Ltag = $$citationItem or FilterValues ( $$sample ; tagMenus::_Ltag & "¶" ) = tagMenus::_Ltag & ¶ or FilterValues ( $$test ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or reference::_Lreference = $$citationitem and $$citationMatch = "cite" or reference::_Lreference & "¶" = FilterValues ( $$ref ; reference::_Lreference & "¶" ) and $$citationMatch = "ref" or testlearn::_Ltestlearn = $$citationitem and $$citationMatch = "cite"or testlearn::_Ltestlearn & "¶" = FilterValues ( $$ref ; testlearn::_Ltestlearn & "¶" ) and $$citationMatch = "ref" or tagMenus::_Ltag = $$citationitem and $$citationMatch = "node" or tagMenus::_Ltag = $$citationitem and $$citationMatch = "key" ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // If [ Get (LastError) = 101 ]
    // Go to Record/Request/Page [ First ]
    // Scroll Window [ Home ]
    // End If
    // End If
    // #
    // Set Variable [ $$stopLoadTagRecord ]
    // If [ Right (Get (LayoutName) ; 1 ) = "r" ]
    // Perform Script [ “loadTagRecord” ]
    // Else If [ $$citationMatch = "sample" ]
    // #SEE WHAT WAS REMOVED IN OLD VERSION.
    // #THE CODE REMOVED WAS DISABLED IN OLD VERSION.
    // Else If [ $$citationMatch = "test" ]
    // If [ testlearn::kctest ≠ "" ]
    // Perform Script [ “loadItemRecordForTestTagMenu” ]
    // End If
    // End If
    End If
    #
    #
    #
    #
    #
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$citation; Value:reference::_Lreference ]
    If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:reference::knodePrimary ]
    Else If [ $$citationMatch = "medium" ]
    Set Variable [ $$citationItem; Value:reference::kmedium ]
    Else If [ $$citationMatch = "Path" ]
    Set Variable [ $$citationItem; Value:reference::kfolderpath ]
    Else If [ $$citationMatch = "key" ]
    Set Variable [ $$citationItem; Value:reference::kkeywordPrimary ]
    Else If [ $$citationMatch = "organ" ]
    Set Variable [ $$citationItem; Value:reference::korgan ]
    Else If [ $$citationMatch = "copyist" ]
    Set Variable [ $$citationItem; Value:reference::kcopyist ]
    Else If [ $$citationMatch = "health" ]
    Set Variable [ $$citationItem; Value:reference::kHealth ]
    Else If [ $$citationMatch = "cite" ]
    Set Variable [ $$citationItem; Value:reference::kcitation ]
    Else If [ $$citationMatch = "ref" ]
    Set Variable [ $$citationItem; Value:testlearn::kcreference ]
    End If
    #
    #capture keys of related tag menu items to
    #to allow the citationMenu scripts to loop to the
    #primary record of interest when the user navigates
    #to a item on the Tag Menu window
    #whose list of tags like node, keyword, medium, etc.
    #might contain an item related to the current
    #citation record, but which one, which is why all
    #the keys have to be readied. Mmm... now that
    #I write this out, I'm thinking I could have the
    #citationMenu scripts select the citation window
    #to grab the key if any in the current current
    #record that applies the the menu item.
    Set Variable [ $$citationRecord; Value:reference::_Lreference ]
    Set Variable [ $$node; Value:reference::knodeOther ]
    Set Variable [ $$primaryNode; Value:reference::knodePrimary ]
    Set Variable [ $$organ; Value:reference::korgan ]
    Set Variable [ $$copyist; Value:reference::kcopyist ]
    Set Variable [ $$medium; Value:reference::kmedium ]
    Set Variable [ $$health; Value:reference::kHealth ]
    Set Variable [ $$CopyrightType; Value:reference::kcopyrightType ]
    Set Variable [ $$Path; Value:reference::kfolderpath ]
    Set Variable [ $$cite; Value:reference::kcitation ]
    Set Variable [ $$ref; Value:reference::lock ]
    Set Variable [ $$PrimaryKey; Value:reference::kkeywordPrimary ]
    Set Variable [ $$Key; Value:reference::kkeywordOther ]
    Set Variable [ $$OtherKey; Value:reference::kkeywordOther ]
    Set Variable [ $$RecordID; Value:Get (RecordID) ]
    Set Variable [ $windowName; Value:Get (WindowName) ]
    Commit Records/Requests
    #
    If [ $$add = "" ]
    #Match any records in tag window and go to
    #primary tag record or to first record if none.
    #And don't run LoadTagRecord until matching is
    #done to prevent flashing and slowing down script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    Perform Script [ “TgotoCitationMenu” ]
    End If
    Refresh Window
    // Go to Record/Request/Page [ First ]
    // #SEE WHAT WAS REMOVED IN OLD VERSION.
    // #THE CODE REMOVED WAS DISABLED IN OLD VERSION.
    // Loop
    // Exit Loop If [ tagMenus::_Ltag = $$citationItem or FilterValues ( $$sample ; tagMenus::_Ltag & "¶" ) = tagMenus::_Ltag & ¶ or FilterValues ( $$test ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or tagMenus::_Ltag = $$citationitem and $$citationMatch = "node" or tagMenus::_Ltag = $$citationitem and $$citationMatch = "key" ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // If [ Get (LastError) = 101 ]
    // Go to Record/Request/Page [ First ]
    // End If
    // Set Variable [ $$stopLoadTagRecord ]
    // Perform Script [ “loadTagRecord” ]
    End If
    End If
    #
    #Return to observation or reference window.
    Set Variable [ $$stopLoadTagRecord ]
    Select Window [ Name: $windowName; Current file ]
    Refresh Window

Fields used in this script

    testlearn::_Ltestlearn
    testlearn::kNodePrimary
    testlearn::kmedium
    testlearn::kfolderPath
    testlearn::kKeywordPrimary
    testlearn::kHealth
    testlearn::kcitation
    testlearn::kcreference
    testlearn::kctest
    testlearn::kcsample
    testlearn::kNodeOther
    testlearn::kcKeywordOther
    testlearn::kcsection
    test::_Ltest
    tagMenus::_Ltag
    reference::_Lreference
    reference::knodePrimary
    reference::kmedium
    reference::kfolderpath
    reference::kkeywordPrimary
    reference::korgan
    reference::kcopyist
    reference::kHealth
    reference::kcitation
    reference::knodeOther
    reference::kcopyrightType
    reference::lock
    reference::kkeywordOther

Scripts used in this script

    TgotoCitationMenu
    loadTagRecord
    loadItemRecordForTestTagMenu

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadCitation]	Parent Folder: [reference(citation)]	Next Script: [copyrightHolder]
Script Name	clearCitationMatch
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    menuReferenceNodesOrEditors
    insertTimeInRefTimeField

Script Definition
Script Steps

    #
    #If node is currenlty locked then stop script, inform user.
    If [ tagNodeCreator::orderOrLock ≠ "" ]
    Go to Field [ ]
    Show Custom Dialog [ Message: "The default node selected is locked. Select this node in the setup window and enter the password to unlock it, then you will able to edit records assigned to this node."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #In order to reset the conditional formatting
    #it is neccessary at the end of this script to go
    #and refresh the other window, which makes
    #the popout calendar go away, so to make it
    #come back the system goes to the next field
    #and back to the current field which triggers
    #this script and why this next step is neccessary
    #to prevent an infinite logic loop.
    If [ $$turnOffThisScript = 1 ]
    Set Variable [ $$turnOffThisScript ]
    Exit Script [ ]
    Else If [ $$turnOffThisScript = 2 ]
    Set Variable [ $$turnOffThisScript ]
    Go to Field [ ]
    // Exit Script [ ]
    // Halt Script
    End If
    Set Variable [ $$turnOffThisScript; Value:1 ]
    If [ $$add = 1 ]
    Go to Field [ ]
    Exit Script [ ]
    End If
    #
    #Clear any conditional formatting tied to the
    #citation match variable in both windows.
    Set Variable [ $$citationMatch ]
    Set Variable [ $$stopFileNameCheck; Value:1 ]
    Set Variable [ $table; Value:Get ( LayoutTableName ) ]
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    New Window [ Name: "Tag Menus"; Height: Get (ScreenHeight); Width: Get (ScreenWidth) / 2; Top: 0; Left: Get (ScreenWidth) / 2 ]
    End If
    If [ $table = "reference" ]
    Go to Layout [ “ReferenceMenuNoTags” (tagMenus) ]
    Else
    Go to Layout [ “learnTagWindowNoTags” (tagMenus) ]
    End If
    #
    #Return user to field user clicked into to start this script.
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Next Field
    Set Variable [ $$turnOffThisScript; Value:1 ]
    Go to Previous Field
    Set Variable [ $$turnOffThisScript; Value:1 ]
    Set Variable [ $$stopFileNameCheck ]

Fields used in this script

    tagNodeCreator::orderOrLock

Scripts used in this script

Layouts used in this script

    ReferenceMenuNoTags
    learnTagWindowNoTags

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [clearCitationMatch]	Parent Folder: [reference(citation)]	Next Script: [copyrightHolderDeleteEditor]
Script Name	copyrightHolder
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #If user is on copyright holder field perform script.
    If [ $$citationMatch = "node" or $$citationMatch = "copyist" or $$citationMatch = "organ" or $$citationMatch = "referenceNodes" or $$citationMatch = "editors" or $$citationMatch = "governmentAuthor" ]
    #
    #Get the keys currently unlocking who is a
    #copyright holder.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #Figure out what field the user wants to designate
    #as a copyright holder for this citation.
    If [ $$citationMatch = "node" ]
    Set Variable [ $key; Value:"node738fds8ef" ]
    #
    #If the field is blank exit the script.
    If [ reference::knodePrimary = "" and reference::knodeOther = "" ]
    Show Custom Dialog [ Message: "Select a node first and then click on this button. A yellow line will appear above the copyright holder's name."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "copyist" ]
    Set Variable [ $key; Value:reference::kcopyist ]
    #
    #If the field is blank exit the script.
    If [ reference::kcopyist = "" ]
    Show Custom Dialog [ Message: "Select a copyist first and then click on this button. A yellow line will appear above the copyright holder's name."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "organ" ]
    Set Variable [ $key; Value:reference::korgan ]
    #
    #If the field is blank exit the script.
    If [ reference::korgan = "" ]
    Show Custom Dialog [ Message: "Select an organ first and then click on this button. A yellow line will appear above the copyright holder's name."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "editors" ]
    Go to Field [ ]
    Set Variable [ $key; Value:"editors857398f839" ]
    #
    #If the field is blank exit the script.
    If [ reference::compilationEditors = "" ]
    Show Custom Dialog [ Message: "Type in one or more editors' names first and then click on this button. A yellow line will appear above the copyright holders' names."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "governmentAuthor" ]
    Go to Field [ ]
    Set Variable [ $key; Value:"governmentAuthor6767767676" ]
    #
    #If the field is blank exit the script.
    If [ reference::governmentAuthor = "" ]
    Show Custom Dialog [ Message: "Type in gov't or corp. author name first and then click on this button. A yellow line will appear above the copyright holders' names."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    Else If [ $$citationMatch = "referenceNodes" ]
    Go to Field [ ]
    Set Variable [ $key; Value:reference::referenceNodes ]
    #
    #If the field is blank exit the script.
    If [ reference::referenceNodes = "" ]
    Show Custom Dialog [ Message: "Type in one or more nodes first and then click on this button. A yellow line will appear above the copyright holder's name."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If reference nodes are already designated as copyright
    #holders, and user clicks in this field and changes
    #the spelling and then clicks the copyright holder
    #button to indicate that the user does not want these
    #to be copyright holders, remove them
    #from the copyright holder keychain. In this case
    #the text of their names is the key.
    Set Variable [ $keyOLD; Value:reference::referenceNodesOLD ]
    If [ $keyOLD & "¶" = FilterValues ( $keychain ; $keyOLD & "¶" ) ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $keyOLD & "¶" ; "" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    Exit Script [ ]
    End If
    #
    #Because citation nodes use the text in the field
    #as the key, the user needs to be exited from that
    #text box so they can see the highlight appear
    #when the copyright owner button is clicked.
    Go to Field [ ]
    End If
    #
    #Remove key from keychain if it is on
    #the copyright holder keychain.
    If [ $key & "¶" = FilterValues ( $keychain ; $key & "¶" ) ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $key & "¶" ; "" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    Exit Script [ ]
    End If
    #
    #Add key to keychain if it is currenlty not on the
    #the copyright holder keychain.
    Set Field [ reference::kcopyrightHolder; $key & "¶" & $keyChain ]
    #
    Exit Script [ ]
    End If
    #
    #If no copyright holder field is selected ...
    Show Custom Dialog [ Message: "Click into the field with the copyright holder's name and then click on this button. A yellow line will appear above the copyright holder's name."; Buttons: “OK” ]

Fields used in this script

    reference::kcopyrightHolder
    reference::knodePrimary
    reference::knodeOther
    reference::kcopyist
    reference::korgan
    reference::compilationEditors
    reference::governmentAuthor
    reference::referenceNodes
    reference::referenceNodesOLD

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [copyrightHolder]	Parent Folder: [reference(citation)]	Next Script: [URLcheck]
Script Name	copyrightHolderDeleteEditor
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Get the keys currently unlocking who is a
    #copyright holder.
    Set Variable [ $keyChain; Value:reference::kcopyrightHolder ]
    #
    #If user has deleted all editors then start process
    #of removing editor copyright key if it is on the keychain.
    Go to Field [ ]
    If [ $$citationMatch = "editors" and reference::compilationEditors = "" ]
    Set Variable [ $key; Value:"editors857398f839" ]
    End If
    #
    #If user has deleted all government authors then start process
    #of removing governmentAuthor copyright key if it is on the keychain.
    Go to Field [ ]
    If [ $$citationMatch = "governmentAuthor" and reference::governmentAuthor = "" ]
    Set Variable [ $key; Value:"governmentAuthor6767767676" ]
    End If
    #
    #Remove key from keychain
    If [ $key & "¶" = FilterValues ( $keychain ; $key & "¶" ) ]
    Set Field [ reference::kcopyrightHolder; //last item in list has no paragraph mark, so a valuecount test needs to be done and if item is not removed, then the removal calc without the paragraph mark is used //If ( ValueCount ( $keyChain ) ≠ ValueCount ( Substitute ( $keyChain ; $key & "¶" ; "" ) ) ; Substitute ( $keyChain ; $key & "¶" ; "" ) //; //Substitute ( $keyChain ; $key ; "" ) //) ]
    Exit Script [ ]
    End If
    #

Fields used in this script

    reference::kcopyrightHolder
    reference::compilationEditors
    reference::governmentAuthor

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [copyrightHolderDeleteEditor]	Parent Folder: [reference(citation)]	Next Script: [removeTextFormatting]
Script Name	URLcheck
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ $$stopFileNameCheck = 1 ]
    Exit Script [ ]
    End If
    If [ Filter ( reference::fileName ; "?" ) = "?" or Filter ( reference::fileName ; "#" ) = "#" or Filter ( reference::fileName ; ";" ) = ";" or Filter ( reference::fileName ; "/" ) = "/" or Filter ( reference::fileName ; ":" ) = ":" ]
    Show Custom Dialog [ Message: "These special characters ? # / ; : prevent the system from opening files. Remove them from your filename and then test the 'file' button above to insure it opens your file."; Buttons: “OK” ]
    Go to Field [ reference::fileName ]
    End If

Fields used in this script

    reference::fileName

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [URLcheck]	Parent Folder: [reference(citation)]	Next Script: [removeTextFormattingAndCommas]
Script Name	removeTextFormatting
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Field [ TextFontRemove ( (Get ( ActiveFieldContents )) ) ]
    Set Field [ TextFormatRemove ( (Get ( ActiveFieldContents )) ) ]
    Set Field [ TextSizeRemove ( (Get ( ActiveFieldContents )) ) ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [removeTextFormatting]	Parent Folder: [reference(citation)]	Next Script: [formatTitle]
Script Name	removeTextFormattingAndCommas
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    changeSpellingOfKeywordOrNodeTag

Script Definition
Script Steps

    Commit Records/Requests
    Set Field [ tagMenus::tag; TextFontRemove ( tagMenus::tag ) ]
    Set Field [ tagMenus::tag; TextFormatRemove ( tagMenus::tag ) ]
    Set Field [ tagMenus::tag; TextSizeRemove ( tagMenus::tag ) ]
    Set Variable [ $tag; Value:tagMenus::tag ]
    If [ Filter ( tagMenus::tag ; "," ) = "," and $$citationMatch = "key" ]
    Show Custom Dialog [ Message: "commas prevent system from keeping track of this item and have been removed"; Buttons: “OK” ]
    Set Field [ tagMenus::tag; Substitute ( $tag ; "," ; "" ) ]
    Else If [ Filter ( tagMenus::tag ; ";" ) = ";" and $$citationMatch = "node" ]
    Show Custom Dialog [ Message: "semicolons prevent system from keeping track of this item and have been removed"; Buttons: “OK” ]
    Set Field [ tagMenus::tag; Substitute ( $tag ; ";" ; "" ) ]
    End If
    Set Field [ tagMenus::tag; Trim ( tagMenus::tag ) ]
    If [ $$citationmatch = "health" or $$citationmatch = "sample" ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    End If

Fields used in this script

    tagMenus::tag

Scripts used in this script

    insureEqualityOfSpellFields

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [removeTextFormattingAndCommas]	Parent Folder: [reference(citation)]	Next Script: [showFile2]
Script Name	formatTitle
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Field [ TextFontRemove ( (Get ( ActiveFieldContents )) ) ]
    Set Field [ TextFormatRemove ( (Get ( ActiveFieldContents )) ) ]
    Set Field [ TextSizeRemove ( (Get ( ActiveFieldContents )) ) ]
    Set Field [ TextStyleAdd ( Get ( ActiveFieldContents ) ; Titlecase ) ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [formatTitle]	Parent Folder: [reference(citation)]	Next Script: [showFile3]
Script Name	showFile2
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Show reference file.
    If [ FilterValues ( citationTitle2::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationTitle2::fileName ; " " ; "%20" ) ] [ No dialog ]
    Else If [ FilterValues ( citationTitle2::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationTitle2::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationTitle2::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagFolderPathForFile::tag & citationTitle2::fileName ; " " ; "%20" ) ] [ No dialog ]
    Else If [ citationTitle2::URL ≠ "" ]
    Open URL [ citationTitle2::URL ] [ No dialog ]
    End If
    #
    #Show testlearn file.
    If [ FilterValues ( TLTitle2::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLTitle2::filename ; " " ; "%20" ) ] [ No dialog ]
    Else If [ FilterValues ( TLTitle2::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLTitle2::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLTitle2::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagTLFolderPathForFile2::tag & TLTitle2::filename ; " " ; "%20" ) ] [ No dialog ]
    Else If [ TLTitle2::URL ≠ "" ]
    Open URL [ TLTitle2::URL ] [ No dialog ]
    End If

Fields used in this script

    citationTitle2::kfileLocation
    citationTitle2::fileName
    tagFolderPathForFile::tag
    citationTitle2::URL
    TLTitle2::kfileLocation
    TLTitle2::filename
    tagTLFolderPathForFile2::tag
    TLTitle2::URL

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showFile2]	Parent Folder: [reference(citation)]	Next Script: [addFileLink4ToTag]
Script Name	showFile3
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Show reference file.
    If [ FilterValues ( citationTitle3::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & citationTitle3::fileName ; " " ; "%20" ) ] [ No dialog ]
    Else If [ FilterValues ( citationTitle3::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & citationTitle3::fileName ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citationTitle3::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagFolderPathForFile3::tag & citationTitle3::fileName ; " " ; "%20" ) ] [ No dialog ]
    Else If [ citationTitle3::URL ≠ "" ]
    Open URL [ citationTitle3::URL ] [ No dialog ]
    End If
    #
    #Show testlearn file.
    If [ FilterValues ( TLTitle3::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" & TLTitle3::filename ; " " ; "%20" ) ] [ No dialog ]
    Else If [ FilterValues ( TLTitle3::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Open URL [ Substitute (Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & TLTitle3::filename ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( TLTitle3::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Open URL [ Substitute ( tagTLFolderPathForFile3::tag & TLTitle3::filename ; " " ; "%20" ) ] [ No dialog ]
    Else If [ TLTitle3::URL ≠ "" ]
    Open URL [ TLTitle3::URL ] [ No dialog ]
    End If

Fields used in this script

    citationTitle3::kfileLocation
    citationTitle3::fileName
    tagFolderPathForFile3::tag
    citationTitle3::URL
    TLTitle3::kfileLocation
    TLTitle3::filename
    tagTLFolderPathForFile3::tag
    TLTitle3::URL

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showFile3]	Parent Folder: [reference(citation)]	Next Script: [addFileLink5ToTag]
Script Name	addFileLink4ToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Clear fields and then determine if there something
    #to link.
    Go to Field [ ]
    If [ reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ and reference::fileName ≠ "" or reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ and reference::fileName ≠ "" or reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagRefFolderPath::tag ≠ "" and reference::fileName ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ and testlearn::filename ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ and testlearn::filename ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagTLFolderPath::tag ≠ "" and testlearn::filename ≠ "" or testlearn::URL ≠ "" or reference::URL ≠ "" ]
    #
    #Set variables to passed on to linking script.
    Set Variable [ $$name; Value:"title" ]
    Set Variable [ $$number; Value:1 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( reference::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddLinkToTag” ]
    Exit Script [ ]
    End If
    #
    #If the conditions for adding the tag are not met
    #tell the user which ones needs to be met before
    #the tag can be added.
    If [ reference::fileName = "" and Get ( LayoutTableName ) = "reference" or testlearn::filename = "" and Get ( LayoutTableName ) = "testlearn" ]
    Show Custom Dialog [ Message: "A file name is required including the file's extension: .jpg , .gif , .pdf , .mov , etc. OR a URL is required to add a link."; Buttons: “OK” ]
    Else If [ reference::kfileLocation = "" and reference::fileName ≠ "" and Get ( LayoutTableName ) = "reference" or testlearn::kfileLocation = "" and testlearn::filename ≠ "" and Get ( LayoutTableName ) = "testlearn" ]
    Show Custom Dialog [ Message: "Check the box next the location of your file: main, other, or x."; Buttons: “OK” ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagRefFolderPath::tag = "" or FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and testlearn::kfolderPath = "" ]
    Show Custom Dialog [ Message: "Select a file path from the Tag Menus window. If there are none then add one by opening the file with a browser (Firefox, Explore, etc.) and dragging/pasting the address into a new tag's text box."; Buttons: “OK” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “menuPath” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::Title
    reference::kfileLocation
    reference::fileName
    tagRefFolderPath::tag
    testlearn::kfileLocation
    testlearn::filename
    tagTLFolderPath::tag
    testlearn::URL
    reference::URL
    testlearn::filterFind
    reference::filterFind
    testlearn::kfolderPath

Scripts used in this script

    CHUNKaddLinkToTag
    menuPath

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addFileLink4ToTag]	Parent Folder: [reference(citation)]	Next Script: [addFileLink6ToTag]
Script Name	addFileLink5ToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Clear fields and then determine if there something
    #to link.
    Go to Field [ ]
    If [ reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ and reference::fileName ≠ "" or reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ and reference::fileName ≠ "" or reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagRefFolderPath::tag ≠ "" and reference::fileName ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ and testlearn::filename ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ and testlearn::filename ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagTLFolderPath::tag ≠ "" and testlearn::filename ≠ "" or testlearn::URL ≠ "" or reference::URL ≠ "" ]
    #
    #Set variables to passed on to linking script.
    Set Variable [ $$name; Value:"title" ]
    Set Variable [ $$number; Value:2 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( reference::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddLinkToTag” ]
    Exit Script [ ]
    End If
    #
    #If the conditions for adding the tag are not met
    #tell the user which ones needs to be met before
    #the tag can be added.
    If [ reference::fileName = "" and Get ( LayoutTableName ) = "reference" or testlearn::filename = "" and Get ( LayoutTableName ) = "testlearn" ]
    Show Custom Dialog [ Message: "A file name is required including the file's extension: .jpg , .gif , .pdf , .mov , etc. OR a URL is required to add a link."; Buttons: “OK” ]
    Else If [ reference::kfileLocation = "" and reference::fileName ≠ "" and Get ( LayoutTableName ) = "reference" or testlearn::kfileLocation = "" and testlearn::filename ≠ "" and Get ( LayoutTableName ) = "testlearn" ]
    Show Custom Dialog [ Message: "Check the box next the location of your file: main, other, or x."; Buttons: “OK” ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagRefFolderPath::tag = "" or FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and testlearn::kfolderPath = "" ]
    Show Custom Dialog [ Message: "Select a file path from the Tag Menus window. If there are none then add one by opening the file with a browser (Firefox, Explore, etc.) and dragging/pasting the address into a new tag's text box."; Buttons: “OK” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “menuPath” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::Title
    reference::kfileLocation
    reference::fileName
    tagRefFolderPath::tag
    testlearn::kfileLocation
    testlearn::filename
    tagTLFolderPath::tag
    testlearn::URL
    reference::URL
    testlearn::filterFind
    reference::filterFind
    testlearn::kfolderPath

Scripts used in this script

    CHUNKaddLinkToTag
    menuPath

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addFileLink5ToTag]	Parent Folder: [reference(citation)]	Next Script: [showFolder]
Script Name	addFileLink6ToTag
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Do not allow learn records to be added to tags as
    #that would require insuring all that Learn record's
    #reference records tagged onto it were also
    #brought into the new section along with all
    #their tags, and their tags' tags. THUS only allow
    #Learn records to be added to tags that have a picture
    #or link (thus provide value) and have none of the
    #above mentioned tags: reference, cite.
    #AND once such a tag is added no reference,
    #or cite tags can be added to it.
    If [ testlearn::kcitation ≠ "" or testlearn::kcreference ≠ "" ]
    Show Custom Dialog [ Message: "Learn records with references or a citation cannot be added to tags. Doing so would require adding all these reference and cite records' references and cite records, and then all of theirs, and so on. "; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #Add file link to Tag Menu item.
    Go to Field [ ]
    If [ reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ and reference::fileName ≠ "" or reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ and reference::fileName ≠ "" or reference::Title ≠ "" and FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagRefFolderPath::tag ≠ "" and reference::fileName ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ and testlearn::filename ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ and testlearn::filename ≠ "" or FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagTLFolderPath::tag ≠ "" and testlearn::filename ≠ "" or testlearn::URL ≠ "" or reference::URL ≠ "" ]
    Set Variable [ $$name; Value:"title" ]
    Set Variable [ $$number; Value:3 ]
    #
    #If the filterFind checkbox is not checked for the
    #the current $$CitationMatch variable, then
    #these next scripts will identify that problem,
    #fix it, and inform the user of what it did.
    If [ Get ( LayoutTableName ) = "testlearn" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( testlearn::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( testlearn::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this learn record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    #
    Else If [ Get ( LayoutTableName ) = "reference" ]
    If [ $$citationMatch = "key" and "keyword" & ¶ ≠ FilterValues ( reference::filterFind ; "keyword" ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    Else If [ $$citationMatch & ¶ ≠ FilterValues ( reference::filterFind ; $$citationMatch ) ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    // Show Custom Dialog [ Message: "The system has added this reference record to the " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " citation record set. You will not have to click the 'all' button anymore to find it for " & If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags." //Next time you click on the add button, this record will be found as part of the records supplying pictures, file and web links to " & //If ( $$citationMatch = "key" ; "keyword (key)" ; $$citationMatch ) & " tags."; Buttons: “OK” ]
    End If
    End If
    #
    #Now perform the script that adds the tag.
    Perform Script [ “CHUNKaddLinkToTag” ]
    Exit Script [ ]
    End If
    #
    If [ reference::fileName = "" and Get ( LayoutTableName ) = "reference" or testlearn::filename = "" and Get ( LayoutTableName ) = "testlearn" ]
    Show Custom Dialog [ Message: "A file name is required including the file's extension: .jpg , .gif , .pdf , .mov , etc. OR a URL is required to add a link."; Buttons: “OK” ]
    Else If [ reference::kfileLocation = "" and reference::fileName ≠ "" and Get ( LayoutTableName ) = "reference" or testlearn::kfileLocation = "" and testlearn::filename ≠ "" and Get ( LayoutTableName ) = "testlearn" ]
    Show Custom Dialog [ Message: "Check the box next the location of your file: main, other, or x."; Buttons: “OK” ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and tagRefFolderPath::tag = "" or FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ and testlearn::kfolderPath = "" ]
    Show Custom Dialog [ Message: "Select a file path from the Tag Menus window. If there are none then add one by opening the file with a browser (Firefox, Explore, etc.) and dragging/pasting the address into a new tag's text box."; Buttons: “OK” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “menuPath” ]
    End If

Fields used in this script

    testlearn::kcitation
    testlearn::kcreference
    reference::Title
    reference::kfileLocation
    reference::fileName
    tagRefFolderPath::tag
    testlearn::kfileLocation
    testlearn::filename
    tagTLFolderPath::tag
    testlearn::URL
    reference::URL
    testlearn::filterFind
    reference::filterFind
    testlearn::kfolderPath

Scripts used in this script

    CHUNKaddLinkToTag
    menuPath

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addFileLink6ToTag]	Parent Folder: [reference(citation)]	Next Script: [openCitationURL]
Script Name	showFolder
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Show folder file is in Reference.
    If [ FilterValues ( reference::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Show Custom Dialog [ Message: reference::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Show Custom Dialog [ Message: reference::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( reference::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Show Custom Dialog [ Message: reference::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & tagRefFolderPath::tag ; " " ; "%20" ) ] [ No dialog ]
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The folder has been moved, deleted, or the external drive this folder is on is not plugged in. The folder path on file is " & tagRefFolderPath::tag; Buttons: “OK” ]
    End If
    End If
    #
    #Show folder for cite file in Learn.
    If [ FilterValues ( citeCite::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Show Custom Dialog [ Message: citeCite::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citeCite::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Show Custom Dialog [ Message: citeCite::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citeCite::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Show Custom Dialog [ Message: citeCite::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & TLciteFolderPath::tag ; " " ; "%20" ) & Case ( Left ( citeCite::fileName ; 1 ) = "/" ; Substitute ( citeCite::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The folder has been moved, deleted, or the external drive this folder is on is not plugged in. The folder path on file is " & TLciteFolderPath::tag; Buttons: “OK” ]
    End If
    End If
    #
    #Show folder for 1st ref file in Learn.
    If [ FilterValues ( refTest::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Show Custom Dialog [ Message: refTest::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( refTest::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Show Custom Dialog [ Message: refTest::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( refTest::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Show Custom Dialog [ Message: refTest::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & refTestFolderPath::tag ; " " ; "%20" ) & Case ( Left ( refTest::fileName ; 1 ) = "/" ; Substitute ( refTest::fileName ; " " ; "%20" ) ) ] [ No dialog ]
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The folder has been moved, deleted, or the external drive this folder is on is not plugged in. The folder path on file is " & refTestFolderPath::tag; Buttons: “OK” ]
    End If
    End If
    #
    #Show folder cite file is in Test.
    If [ FilterValues ( citeTest::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    Show Custom Dialog [ Message: citeTest::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citeTest::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    Show Custom Dialog [ Message: citeTest::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) ; " " ; "%20" ) ] [ No dialog ]
    Exit Script [ ]
    Else If [ FilterValues ( citeTest::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    Show Custom Dialog [ Message: citeTest::fileName; Buttons: “OK” ]
    Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:/" ; "file:///" ) & citeTestFolderPath::tag ; " " ; "%20" ) ] [ No dialog ]
    If [ Get (LastError) = 5 ]
    Show Custom Dialog [ Message: "The folder has been moved, deleted, or the external drive this folder is on is not plugged in. The folder path on file is " & citeTestFolderPath::tag; Buttons: “OK” ]
    End If
    End If
    #
    // #
    // #Show folder file is in.
    // If [ FilterValues ( testlearn::kfileLocation ; "8162011225532313" ) = "8162011225532313" & ¶ ]
    // Show Custom Dialog [ Message: testlearn::filename; Buttons: “OK” ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) & "x/" ; " " ; "%20" ) ] [ No dialog ]
    // Exit Script [ ]
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225558314" ) = "8162011225558314" & ¶ ]
    // Show Custom Dialog [ Message: testlearn::filename; Buttons: “OK” ]
    // Open URL [ Substitute ( Case ( Get ( SystemPlatform ) = - 2 ; "file:" ; "file:/" ) & Middle ( Get ( FilePath ) ; 6 ; Length ( Get (FilePath ) ) - Length ( Get (FileName ) ) - 9) ; " " ; "%20" ) ] [ No dialog ]
    // Exit Script [ ]
    // Else If [ FilterValues ( testlearn::kfileLocation ; "8162011225605315" ) = "8162011225605315" & ¶ ]
    // Show Custom Dialog [ Message: testlearn::filename; Buttons: “OK” ]
    // Open URL [ Substitute ( tagTLFolderPath::tag ; " " ; "%20" ) ] [ No dialog ]
    // End If

Fields used in this script

    reference::kfileLocation
    reference::fileName
    tagRefFolderPath::tag
    citeCite::kfileLocation
    citeCite::fileName
    TLciteFolderPath::tag
    refTest::kfileLocation
    testlearnReportTags::kcreference
    refTest::fileName
    refTestFolderPath::tag
    citeTest::kfileLocation
    citeTest::fileName
    citeTestFolderPath::tag
    testlearn::kfileLocation
    testlearn::filename
    tagTLFolderPath::tag

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [showFolder]	Parent Folder: [reference(citation)]	Next Script: [setCitationMatchForAuthors]
Script Name	openCitationURL
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Show folder file is in.
    If [ refReference::URL ≠ "" or refReference::ISBN ≠ "" or refReference::ISSN ≠ "" or refReference::URLdoi ≠ "" ]
    If [ ValueCount ( testlearn::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'QV' button in the Learn window or the 'references' button in the Tag Menus window."; Buttons: “OK” ]
    End If
    Show Custom Dialog [ Message: "Reference's Title: " & refReference::Title; Buttons: “OK” ]
    Open URL [ Case ( refReference::URL ≠ "" ; refReference::URL ; refReference::ISBN ≠ "" ; "http://www.worldcat.org/search?q=bn%3A" & refReference::ISBN ; refReference::ISSN ≠ "" ; "http://www.worldcat.org/ISSN/" & refReference::ISSN ; refReference::URLdoi ≠ "" ; "http://dx.doi.org/" & refReference::URLdoi ; "") ] [ No dialog ]
    End If
    #
    #Show folder file is in.
    If [ citeCite::URL ≠ "" or citeCite::ISBN ≠ "" or citeCite::ISSN ≠ "" or citeCite::URLdoi ≠ "" ]
    Show Custom Dialog [ Message: "Reference's Title: " & citeCite::Title; Buttons: “OK” ]
    Open URL [ Case ( citeCite::URL ≠ "" ; citeCite::URL ; citeCite::ISBN ≠ "" ; "http://www.worldcat.org/search?q=bn%3A" & citeCite::ISBN ; citeCite::ISSN ≠ "" ; "http://www.worldcat.org/ISSN/" & citeCite::ISSN ; citeCite::URLdoi ≠ "" ; "http://dx.doi.org/" & citeCite::URLdoi ; "") ] [ No dialog ]
    End If
    #
    #Show folder file is in.
    If [ citeTest::URL ≠ "" or citeTest::ISBN ≠ "" or citeTest::ISSN ≠ "" or citeTest::URLdoi ≠ "" ]
    Show Custom Dialog [ Message: "Reference's Title: " & citeTest::Title; Buttons: “OK” ]
    Open URL [ Case ( citeTest::URL ≠ "" ; citeTest::URL ; citeTest::ISBN ≠ "" ; "http://www.worldcat.org/search?q=bn%3A" & citeTest::ISBN ; citeTest::ISSN ≠ "" ; "http://www.worldcat.org/ISSN/" & citeTest::ISSN ; citeTest::URLdoi ≠ "" ; "http://dx.doi.org/" & citeTest::URLdoi ; "") ] [ No dialog ]
    End If
    #
    #Show folder file is in.
    If [ refTest::URL ≠ "" or refTest::ISBN ≠ "" or refTest::ISSN ≠ "" or refTest::URLdoi ≠ "" ]
    If [ ValueCount ( testlearnReportTags::kcreference ) > 1 ]
    Show Custom Dialog [ Message: "This is the first reference attached to this record. To see all references, click the 'edit/new' button in the main list view window, and once you are in the Learn module, click the 'QV' button in the Learn window or the 'references' button in the Learn Tag Menus window."; Buttons: “OK” ]
    End If
    Show Custom Dialog [ Message: "Reference's Title: " & refTest::Title; Buttons: “OK” ]
    Open URL [ Case ( refTest::URL ≠ "" ; refTest::URL ; refTest::ISBN ≠ "" ; "http://www.worldcat.org/search?q=bn%3A" & refTest::ISBN ; refTest::ISSN ≠ "" ; "http://www.worldcat.org/ISSN/" & refTest::ISSN ; refTest::URLdoi ≠ "" ; "http://dx.doi.org/" & refTest::URLdoi ; "") ] [ No dialog ]
    End If

Fields used in this script

    refReference::URL
    refReference::ISBN
    refReference::ISSN
    refReference::URLdoi
    testlearn::kcreference
    refReference::Title
    citeCite::URL
    citeCite::ISBN
    citeCite::ISSN
    citeCite::URLdoi
    citeCite::Title
    citeTest::URL
    citeTest::ISBN
    citeTest::ISSN
    citeTest::URLdoi
    citeTest::Title
    refTest::URL
    refTest::ISBN
    refTest::ISSN
    refTest::URLdoi
    testlearnReportTags::kcreference
    refTest::Title

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [openCitationURL]	Parent Folder: [reference(citation)]	Next Script: [publisherCheckboxRadioButtonActionPart1]
Script Name	setCitationMatchForAuthors
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $$citationMatch; Value:reference::referenceNodes ]

Fields used in this script

    reference::referenceNodes

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [setCitationMatchForAuthors]	Parent Folder: [reference(citation)]	Next Script: [insertTimeInRefTimeField]
Script Name	publisherCheckboxRadioButtonActionPart1
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ ValueCount ( reference::publisherTypeAlternative ) = 2 ]
    Set Field [ reference::publisherTypeAlternative; Substitute ( reference::publisherTypeAlternative ; GetValue (reference::publisherTypeAlternative;1 ) & "¶" ; "" ) ]
    End If
    Go to Field [ ]

Fields used in this script

    reference::publisherTypeAlternative

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [publisherCheckboxRadioButtonActionPart1]	Parent Folder: [reference(citation)]	Next Script: [goToRefRecord]
Script Name	insertTimeInRefTimeField
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ reference::TimeRange = "" ]
    Set Field [ reference::TimeRange; "0:00:00" ]
    End If
    Perform Script [ “clearCitationMatch” ]

Fields used in this script

    reference::TimeRange

Scripts used in this script

    clearCitationMatch

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [insertTimeInRefTimeField]	Parent Folder: [reference(citation)]	Next Script: [helpReferenceFields]
Script Name	goToRefRecord
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $refRecordNumber; Value:Get ( RecordNumber ) ]
    Go to Record/Request/Page [ Last ]
    Go to Record/Request/Page [ $refRecordNumber ] [ No dialog ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [goToRefRecord]	Parent Folder: [reference(citation)]
Script Name	helpReferenceFields
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Variable [ $objectName; Value:Middle ( Get ( ActiveLayoutObjectName ) ; 2 ; 2 ) ]
    Set Field [ TEMP::Help; TEMP::Help [$objectName] ]
    Go to Field [ ]
    Select Window [ Name: "Reference Field Help"; Current file ]
    If [ Get ( LastError ) ≠ 0 ]
    New Window [ Name: "Reference Field Help"; Left: Get ( WindowWidth ) ]
    End If
    Go to Layout [ “ReferenceHelp” (reference) ]
    Select Window [ Name: "Reference Field Help"; Current file ]

Fields used in this script

    TEMP::Help

Scripts used in this script

Layouts used in this script

    ReferenceHelp

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


probablyNotInUse
	Parent Folder: [probablyNotInUse]	Next Script: [DELETE???loadRecordIDcitationlistlalyout]
Script Name	addReferenceNodesAndKeywords Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    #
    #Add current section key to reference record's
    #section keychain if it is not on it already.
    If [ TEMP::ksection & "¶" ≠ FilterValues ( reference::kcsection ; TEMP::ksection & "¶" ) and Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $sectionKeychain; Value:reference::kcsection ]
    Set Field [ reference::kcsection; TEMP::ksection & ¶ & $sectionKeychain ]
    End If
    #
    #Add current section key to learn record's
    #section keychain if it is not on it already.
    If [ TEMP::ksection & "¶" ≠ FilterValues ( testlearn::kcsection ; TEMP::ksection & "¶" ) and Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $sectionKeychain; Value:testlearn::kcsection ]
    Set Field [ testlearn::kcsection; TEMP::ksection & ¶ & $sectionKeychain ]
    End If
    #
    #Check main checkbox if record is not already
    #a main record. This is because when going to
    #edit cite or reference records, only main records
    #are shown by default.
    If [ "main" & "¶" ≠ FilterValues ( reference::filterFind ; "main" & "¶" ) and Get ( LayoutTableName ) = "reference" and $$add ≠ 1 ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    Set Field [ reference::filterFind; "main" & ¶ & $filterFind ]
    #
    Else If [ $$citationMatch & "¶" ≠ FilterValues ( reference::filterFind ; $$citationMatch & "¶" ) and Get ( LayoutTableName ) = "reference" and $$add = 1 ]
    Set Variable [ $filterFind; Value:reference::filterFind ]
    #
    If [ $$citationMatch ≠ "key" ]
    Set Field [ reference::filterFind; $$citationMatch & ¶ & $filterFind ]
    #
    Else If [ $$citationMatch = "key" ]
    Set Field [ reference::filterFind; "keyword" & ¶ & $filterFind ]
    End If
    #
    Else If [ "main" & "¶" ≠ FilterValues ( testlearn::filterFind ; "main" & "¶" ) and Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $filterFind; Value:testlearn::filterFind ]
    Set Field [ testlearn::filterFind; "main" & ¶ & $filterFind ]
    End If
    #
    #Stop load tag record script to speed up this script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Variable [ $$stopLoadCitation; Value:1 ]
    #
    #Remove focus from field so can see
    #conditional formatting.
    Go to Field [ ]
    #
    #Check if nodes and keywords linked to this
    #reference record are in the current section
    #or if the node is being used as a default.
    If [ Get ( LayoutTableName ) = "reference" ]
    Set Variable [ $nodePrimary; Value:reference::knodePrimary ]
    Set Variable [ $nodeOther; Value:reference::knodeOther ]
    Set Variable [ $keywordPrimary; Value:reference::kkeywordPrimary ]
    Set Variable [ $keywordOther; Value:reference::kkeywordOther ]
    Else If [ Get ( LayoutTableName ) = "testlearn" ]
    Set Variable [ $nodePrimary; Value:testlearn::kNodePrimary ]
    Set Variable [ $nodeOther; Value:testlearn::kNodeOther ]
    Set Variable [ $keywordPrimary; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $keywordOther; Value:testlearn::kcKeywordOther ]
    Else If [ Get ( LayoutTableName ) = "tagMenus" ]
    Set Variable [ $nodePrimary; Value:TEMP::kdefaultNodePrimary ]
    Set Variable [ $nodeOther; Value:TEMP::kdefaultNodeOther ]
    End If
    #
    #Find all nodes assigned to this section.
    #Find in a new window so user's place is not lost
    #on Tag Menus window.
    New Window [ ]
    Set Variable [ $$stopLoadCitation ]
    Go to Layout [ “ltagNK1” (tagMenus) ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #PRIMARY NODE
    #Loop thru records to find primary node.
    Go to Record/Request/Page [ First ]
    #
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    Exit Loop If [ $nodePrimary = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the primary key being tested, then add its
    #group to the current section. ( Node groups are
    # are assigned to sections, not individual nodes.
    # So if the user wants one node to be assigned
    # to a new section, its group and all nodes in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # nodes by catergory requires that each group
    # have a unique name and that each node belong
    # to a group. For the node to be the same node
    # The group key it holds has to be the same as
    # well, which means the group has to appear
    # with the node, and with the group comes
    # all the nodes assigned to it. )
    If [ $nodePrimary ≠ tagMenus::_Ltag ]
    #
    #Find the node to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $nodePrimary ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all nodes, which now includes the
    #node just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    End If
    #
    #OTHER NODES
    #Determine how many keys there are to find for
    #on the other nodes' keychain.
    Set Variable [ $numberOfNodes; Value:ValueCount ( $nodeOther ) ]
    #
    #Loop thru each node record, with every key
    #in the keychain.
    Loop
    Go to Record/Request/Page [ First ]
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfNodes = 0 ]
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    #( The get value calculation works by going to the
    # key in the list specified by the numberOfNodes
    # variable, set before entering the loops.
    # The system starts with the last key and with each
    # loop moves to the next key up, until there are
    # no more keys to check. )
    Exit Loop If [ GetValue ( $nodeOther ; $numberOfNodes ) = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the other node key being tested, then add its
    #group to the current section. ( Node groups are
    # are assigned to sections, not individual nodes.
    # So if the user wants one node to be assigned
    # to a new section, its group and all nodes in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # nodes by catergory requires that each group
    # have a unique name and that each node belong
    # to a group. For the node to be the same node
    # The group key it holds has to be the same as
    # well, which means the group has to appear
    # with the node, and with the group comes
    # all the nodes assigned to it. )
    If [ GetValue ( $nodeOther ; $numberOfNodes ) ≠ tagMenus::_Ltag ]
    #
    #Find the node to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; GetValue ( $nodeOther ; $numberOfNodes ) ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all nodes, which now includes the
    #node just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "node" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfNodes; Value:$numberOfNodes - 1 ]
    End Loop
    #
    #
    #
    #
    #Find all keywords assigned to this section.
    #Find in a new window so user's place is not lost
    #on Tag Menus window.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "key" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #PRIMARY KEYWORD
    #Loop thru records to find primary keyword.
    Go to Record/Request/Page [ First ]
    #
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    Exit Loop If [ $keywordPrimary = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the primary keyword being tested, then add its
    #group to the current section. ( Keyword groups are
    # are assigned to sections, not individual keywords.
    # So if the user wants one keyword to be assigned
    # to a new section, its group and all keywords in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # keywords by group requires that each group
    # have a unique name and that each keyword belong
    # to a group. For the keyword to be the same
    # keyword, the group key it holds has to be
    # the same as well, which means the group
    # has to appear with the keyword, and with
    # the group comes all the keywords assigned to it. )
    If [ $keywordPrimary ≠ tagMenus::_Ltag ]
    #
    #Find the keyword to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; $keywordPrimary ]
    Perform Find [ ]
    #
    #Next, add the current section key to this node's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all keywords, which now includes the
    #keyword just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "key" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    End If
    #
    #OTHER KEYWORDS
    #Determine how many keys there are to find for
    #on the other keywords' keychain.
    Set Variable [ $numberOfKeywords; Value:ValueCount ( $keywordOther ) ]
    #
    #Loop thru each keyword record, with every key
    #in the keychain.
    Loop
    Go to Record/Request/Page [ First ]
    #
    #Exit the loop when there are no more keys to check.
    Exit Loop If [ $numberOfKeywords = 0 ]
    Loop
    #
    #If the key matches a lock or no locks exit the loop.
    #( The get value calculation works by going to the
    # key in the list specified by the numberOfKeywords
    # variable, set before entering the loops.
    # The system starts with the last key and with each
    # loop moves to the next key up, until there are
    # no more keys to check. )
    Exit Loop If [ GetValue ( $keywordOther ; $numberOfKeywords ) = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #If the record the loop ended up on does not accept
    #the primary keyword being tested, then add its
    #group to the current section. ( Keyword groups are
    # are assigned to sections, not individual keywords.
    # So if the user wants one keyword to be assigned
    # to a new section, its group and all keywords in
    # its group must be assigned to the new section.
    # The reason for this is because the display of
    # keywords by group requires that each group
    # have a unique name and that each keyword belong
    # to a group. For the keyword to be the same
    # keyword, the group key it holds has to be
    # the same as well, which means the group
    # has to appear with the keyword, and with
    # the group comes all the keywords assigned to it. )
    If [ GetValue ( $keywordOther ; $numberOfKeywords ) ≠ tagMenus::_Ltag ]
    #
    #Find the keyword to be added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::_Ltag; GetValue ( $keywordOther ; $numberOfKeywords ) ]
    Perform Find [ ]
    #
    #Next, add the current section key to this keyword's
    #group's keychain.
    Set Variable [ $groupSectionKeychain; Value:ruleTagMenuGroups::ksection ]
    Set Field [ ruleTagMenuGroups::ksection; TEMP::ksection & ¶ & $groupSectionKeychain ]
    #
    #Finally, refind all keywords, which now includes the
    #keyword just added.
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; "key" ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    End If
    #
    #Go the next key up from the bottom of the list
    #of keys on this section's keychain.
    Set Variable [ $numberOfKeywords; Value:$numberOfKeywords - 1 ]
    End Loop
    #
    #Turn top load tag record script back on.
    Set Variable [ $$stopLoadTagRecord ]
    #
    Close Window [ Current Window ]
    #

Fields used in this script

    TEMP::ksection
    reference::kcsection
    testlearn::kcsection
    reference::filterFind
    testlearn::filterFind
    reference::knodePrimary
    reference::knodeOther
    reference::kkeywordPrimary
    reference::kkeywordOther
    testlearn::kNodePrimary
    testlearn::kNodeOther
    testlearn::kKeywordPrimary
    testlearn::kcKeywordOther
    TEMP::kdefaultNodePrimary
    TEMP::kdefaultNodeOther
    tagMenus::match
    ruleTagMenuGroups::ksection
    tagMenus::_Ltag

Scripts used in this script

Layouts used in this script

    ltagNK1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [addReferenceNodesAndKeywords Copy]	Parent Folder: [probablyNotInUse]	Next Script: [loadCitation OLD]
Script Name	DELETE???loadRecordIDcitationlistlalyout
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #REMOVED it from use after it kept resetting ID number and messing up text formatting on main TL window. It does not seem to be needed for an calc, but not sure entirely so have not deleted it yet.
    #This first section is key to stopping this script
    #when another script for example loops thru
    #many records each of which would trigger this
    #script and really slow down the program and
    #create strobe effect that is really irritating to
    #look at.
    If [ $$stoploadCitation = 1 ]
    Exit Script [ ]
    End If
    Set Variable [ $$recordID; Value:Get (RecordID) ]
    Refresh Window

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [DELETE???loadRecordIDcitationlistlalyout]	Parent Folder: [probablyNotInUse]	Next Script: [findReferenceRecord Copy]
Script Name	loadCitation OLD
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #THIS OLD VERSION SCROLLS THE TAG MENU WINDOW
    #TO THE TAG LISTED IN THE LEARN WINDOW IF ANY.
    #
    #This first section is key to stopping this script
    #when another script for example loops thru
    #many records each of which would trigger this
    #script and really slow down the program and
    #create strobe effect that is really irritating to
    #look at.
    If [ $$stoploadCitation = 1 ]
    Exit Script [ ]
    End If
    #
    #These steps effect the button action where when the
    #use clicks on the actual text box of a learn record
    #a new window opens just displaying the text. This
    #stops this when the user was clicking on it to select
    #this record instead of adding text to it.
    If [ Get (LayoutName) = "learn1" or Get (LayoutName) = "learn2" or Get (LayoutName) = "learn3" or Get (LayoutName) = "learn4" ]
    Set Variable [ $$stopOpenNewTextWindow; Value:1 ]
    End If
    #
    // #Because I keep forgetting to press find mode, this
    // #bit of script is to confirm that the user really wants
    // #to add or change the tag of the first record instead of
    // #finding records with selected tag in the reference section.
    // Select Window [ Name: "References"; Current file ]
    // If [ Get (LayoutName) = "reference" and Get (RecordNumber) = 1 ]
    // Set Variable [ $$referenceRecordOne; Value:1 ]
    // Else
    // Set Variable [ $$referenceRecordOne ]
    // End If
    #
    #
    #This key effects the conditional formatting
    #of any records in the Tag Menus window
    #that are related to the citation record that triggered
    #this script (by the user click on it, of course).
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$citation; Value:testlearn::_Ltestlearn ]
    If [ $$citationMatch = "node" ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "medium" ]
    Set Variable [ $$citationItem; Value:testlearn::kmedium ]
    Else If [ $$citationMatch = "Path" ]
    Set Variable [ $$citationItem; Value:testlearn::kfolderPath ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "key" ]
    Set Variable [ $$citationItem; Value:testlearn::kKeywordPrimary ]
    Else If [ $$citationMatch = "health" ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Set Variable [ $$citationItem; Value:testlearn::kHealth ]
    Else If [ $$citationMatch = "cite" ]
    Set Variable [ $$citationItem; Value:testlearn::kcitation ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "ref" ]
    Set Variable [ $$citationItem; Value:testlearn::kcreference ]
    Set Variable [ $$tagTest ]
    Set Variable [ $$tagSample ]
    Else If [ $$citationMatch = "test" ]
    Set Variable [ $$citationItem; Value:testlearn::kctest ]
    Else If [ $$citationMatch = "sample" ]
    Set Variable [ $$citationItem; Value:testlearn::kcsample ]
    End If
    #
    #capture keys of related tag menu items to
    #to allow the citationMenu scripts to loop to the
    #primary record of interest when the user navigates
    #to a item on the Tag Menu window
    #whose list of tags like node, keyword, medium, etc.
    #might contain an item related to the current
    #citation record, but which one, which is why all
    #the keys have to be readied. Mmm... now that
    #I write this out, I'm thinking I could have the
    #citationMenu scripts select the citation window
    #to grab the key if any in the current current
    #record that applies the the menu item.
    Set Variable [ $$citationRecord; Value:testlearn::_Ltestlearn ]
    Set Variable [ $$node; Value:testlearn::kNodeOther ]
    Set Variable [ $$primaryNode; Value:testlearn::kNodePrimary ]
    Set Variable [ $$medium; Value:testlearn::kmedium ]
    Set Variable [ $$health; Value:testlearn::kHealth ]
    Set Variable [ $$Path; Value:testlearn::kfolderPath ]
    Set Variable [ $$cite; Value:testlearn::kcitation ]
    Set Variable [ $$ref; Value:testlearn::kcreference ]
    Set Variable [ $$PrimaryKey; Value:testlearn::kKeywordPrimary ]
    Set Variable [ $$Key; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$OtherKey; Value:testlearn::kcKeywordOther ]
    Set Variable [ $$Section; Value:testlearn::kcsection ]
    Set Variable [ $$test; Value:testlearn::kctest ]
    Set Variable [ $$sample; Value:testlearn::kcsample ]
    Set Variable [ $$RecordID; Value:Get (RecordID) ]
    Set Variable [ $windowName; Value:Get (WindowName) ]
    Commit Records/Requests
    #
    If [ $$add = "" ]
    #Match any records in tag window and go to
    #primary tag record or to first record if none.
    #And don't run LoadTagRecord until matching is
    #done to prevent flashing and slowing down script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    If [ Get (LastError) = 112 ]
    Perform Script [ “TgotoCitationMenu” ]
    End If
    Refresh Window
    If [ $$citationMatch = "sample" ]
    // Go to Record/Request/Page [ First ]
    // Loop
    // Set Variable [ $number; Value:1 ]
    // Go to Field [ ]
    // Loop
    // Exit Loop If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) & "¶" = tagMenus::_Ltag & ¶ ]
    // Exit Loop If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) = "" ]
    // Set Variable [ $add; Value:$number ]
    // Set Variable [ $number; Value:$add + 1 ]
    // End Loop
    // Exit Loop If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) & "¶" = tagMenus::_Ltag & ¶ ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End Loop
    // If [ Middle ( GetValue ( $$sample ; $number ) ; 4 ; 42 ) & "¶" ≠ tagMenus::_Ltag & ¶ ]
    // Go to Record/Request/Page [ First ]
    // End If
    Else If [ $$citationMatch = "test" ]
    Go to Record/Request/Page [ First ]
    Loop
    Set Variable [ $number; Value:1 ]
    Go to Field [ ]
    Loop
    Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" = test::_Ltest & ¶ ]
    Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) = "" ]
    Set Variable [ $add; Value:$number ]
    Set Variable [ $number; Value:$add + 1 ]
    End Loop
    Exit Loop If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" = test::_Ltest & ¶ ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ Middle ( GetValue ( $$test ; $number ) ; 4 ; 42 ) & "¶" ≠ test::_Ltest & ¶ ]
    Go to Record/Request/Page [ First ]
    End If
    Else If [ $$citationMatch ≠ "sample" or $$citationMatch ≠ "test" ]
    Freeze Window
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Loop
    Exit Loop If [ tagMenus::_Ltag = $$citationItem or FilterValues ( $$sample ; tagMenus::_Ltag & "¶" ) = tagMenus::_Ltag & ¶ or FilterValues ( $$test ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or reference::_Lreference = $$citationitem and $$citationMatch = "cite" or reference::_Lreference & "¶" = FilterValues ( $$ref ; reference::_Lreference & "¶" ) and $$citationMatch = "ref" or testlearn::_Ltestlearn = $$citationitem and $$citationMatch = "cite"or testlearn::_Ltestlearn & "¶" = FilterValues ( $$ref ; testlearn::_Ltestlearn & "¶" ) and $$citationMatch = "ref" or tagMenus::_Ltag = $$citationitem and $$citationMatch = "node" or tagMenus::_Ltag = $$citationitem and $$citationMatch = "key" ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ Get (LastError) = 101 ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    End If
    End If
    #
    Set Variable [ $$stopLoadTagRecord ]
    If [ Right (Get (LayoutName) ; 1 ) = "r" ]
    Perform Script [ “loadTagRecord” ]
    Else If [ $$citationMatch = "sample" ]
    // Perform Script [ “loadItemRecordForLearnTagMenuDELETE!!!” ]
    Else If [ $$citationMatch = "test" ]
    If [ testlearn::kctest ≠ "" ]
    Perform Script [ “loadItemRecordForTestTagMenu” ]
    End If
    End If
    End If
    #
    #
    #
    #
    #
    Else If [ Get (LastError) ≠ 112 ]
    Set Variable [ $$citation; Value:reference::_Lreference ]
    If [ $$citationMatch = "node" ]
    Set Variable [ $$citationItem; Value:reference::knodePrimary ]
    Else If [ $$citationMatch = "medium" ]
    Set Variable [ $$citationItem; Value:reference::kmedium ]
    Else If [ $$citationMatch = "Path" ]
    Set Variable [ $$citationItem; Value:reference::kfolderpath ]
    Else If [ $$citationMatch = "key" ]
    Set Variable [ $$citationItem; Value:reference::kkeywordPrimary ]
    Else If [ $$citationMatch = "organ" ]
    Set Variable [ $$citationItem; Value:reference::korgan ]
    Else If [ $$citationMatch = "copyist" ]
    Set Variable [ $$citationItem; Value:reference::kcopyist ]
    Else If [ $$citationMatch = "health" ]
    Set Variable [ $$citationItem; Value:reference::kHealth ]
    Else If [ $$citationMatch = "cite" ]
    Set Variable [ $$citationItem; Value:reference::kcitation ]
    Else If [ $$citationMatch = "ref" ]
    Set Variable [ $$citationItem; Value:testlearn::kcreference ]
    End If
    #
    #capture keys of related tag menu items to
    #to allow the citationMenu scripts to loop to the
    #primary record of interest when the user navigates
    #to a item on the Tag Menu window
    #whose list of tags like node, keyword, medium, etc.
    #might contain an item related to the current
    #citation record, but which one, which is why all
    #the keys have to be readied. Mmm... now that
    #I write this out, I'm thinking I could have the
    #citationMenu scripts select the citation window
    #to grab the key if any in the current current
    #record that applies the the menu item.
    Set Variable [ $$citationRecord; Value:reference::_Lreference ]
    Set Variable [ $$node; Value:reference::knodeOther ]
    Set Variable [ $$primaryNode; Value:reference::knodePrimary ]
    Set Variable [ $$organ; Value:reference::korgan ]
    Set Variable [ $$copyist; Value:reference::kcopyist ]
    Set Variable [ $$medium; Value:reference::kmedium ]
    Set Variable [ $$health; Value:reference::kHealth ]
    Set Variable [ $$CopyrightType; Value:reference::kcopyrightType ]
    Set Variable [ $$Path; Value:reference::kfolderpath ]
    Set Variable [ $$cite; Value:reference::kcitation ]
    Set Variable [ $$ref; Value:reference::lock ]
    Set Variable [ $$PrimaryKey; Value:reference::kkeywordPrimary ]
    Set Variable [ $$Key; Value:reference::kkeywordOther ]
    Set Variable [ $$OtherKey; Value:reference::kkeywordOther ]
    Set Variable [ $$RecordID; Value:Get (RecordID) ]
    Set Variable [ $windowName; Value:Get (WindowName) ]
    Commit Records/Requests
    #
    If [ $$add = "" ]
    #Match any records in tag window and go to
    #primary tag record or to first record if none.
    #And don't run LoadTagRecord until matching is
    #done to prevent flashing and slowing down script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Select Window [ Name: "Tag Menus"; Current file ]
    If [ Get (LastError) = 112 ]
    Perform Script [ “TgotoCitationMenu” ]
    End If
    Refresh Window
    Go to Record/Request/Page [ First ]
    // Loop
    // If [ Right ( Get (LayoutName) ; 5 ) = "menu1" ]
    // Exit Loop If [ $$citationItem = tagMenus::_Ltag ]
    // Go to Record/Request/Page [ Next; Exit after last ]
    // End If
    // End Loop
    // If [ Right ( Get (LayoutName) ; 4 ) = "cite" ]
    // Exit Loop If [ $$citationItem = reference::_Lreference ]
    // Perform Script [ “menuRefAddKeyWords” ]
    // End If
    // #
    // If [ Right ( Get (LayoutName) ; 4 ) ≠ "cite" and $$citationItem ≠ tagMenus::_Ltag ]
    // Go to Record/Request/Page [ First ]
    // Else If [ Right ( Get (LayoutName) ; 4 ) = "cite" and $$citationItem ≠ reference::_Lreference ]
    // Go to Record/Request/Page [ First ]
    // End If
    Loop
    Exit Loop If [ tagMenus::_Ltag = $$citationItem or FilterValues ( $$sample ; tagMenus::_Ltag & "¶" ) = tagMenus::_Ltag & ¶ or FilterValues ( $$test ; test::_Ltest & "¶" ) = test::_Ltest & ¶ or tagMenus::_Ltag = $$citationitem and $$citationMatch = "node" or tagMenus::_Ltag = $$citationitem and $$citationMatch = "key" ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    If [ Get (LastError) = 101 ]
    Go to Record/Request/Page [ First ]
    End If
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadTagRecord” ]
    End If
    End If
    #
    #Return to observation or reference window.
    Select Window [ Name: $windowName; Current file ]
    Refresh Window

Fields used in this script

    testlearn::_Ltestlearn
    testlearn::kmedium
    testlearn::kfolderPath
    testlearn::kKeywordPrimary
    testlearn::kHealth
    testlearn::kcitation
    testlearn::kcreference
    testlearn::kctest
    testlearn::kcsample
    testlearn::kNodeOther
    testlearn::kNodePrimary
    testlearn::kcKeywordOther
    testlearn::kcsection
    tagMenus::_Ltag
    test::_Ltest
    reference::_Lreference
    reference::knodePrimary
    reference::kmedium
    reference::kfolderpath
    reference::kkeywordPrimary
    reference::korgan
    reference::kcopyist
    reference::kHealth
    reference::kcitation
    reference::knodeOther
    reference::kcopyrightType
    reference::lock
    reference::kkeywordOther

Scripts used in this script

    TgotoCitationMenu
    loadTagRecord
    loadItemRecordForLearnTagMenuDELETE!!!
    loadItemRecordForTestTagMenu
    menuRefAddKeyWords

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [loadCitation OLD]	Parent Folder: [probablyNotInUse]
Script Name	findReferenceRecord Copy
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    If [ $$findMode ≠ "" ]
    Show Custom Dialog [ Message: "Cancel find in Tag Menus window then click this button."; Buttons: “OK” ]
    Exit Script [ ]
    End If
    #
    #If user is in tag field and has changed spelling
    #exit this tag record, otherwise current reference record
    #will get deleted by the spelling check script.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Field [ ]
    Select Window [ Name: "References"; Current file ]
    If [ $$referenceSort = 2 ]
    Sort Records [ Specified Sort Order: reference::modifyDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = "" ]
    Sort Records [ Specified Sort Order: tagKeywordPrimary::tag; ascending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    Else If [ $$referenceSort = 1 ]
    Sort Records [ Specified Sort Order: reference::createDate; descending reference::referenceForReferenceSort; ascending ] [ Restore; No dialog ]
    End If
    #
    If [ Get (WindowMode) = 1 ]
    Perform Find [ ]
    Else
    // Close Window [ Name: "Find References"; Current file ]
    // Set Variable [ $$stoploadCitation; Value:1 ]
    // New Window [ Name: "Find References" ]
    Set Variable [ $$findReferenceLayout; Value:Get (LayoutName) ]
    Show/Hide Status Area [ Hide ]
    Enter Find Mode [ ]
    Go to Layout [ “ReferenceFIND” (reference) ]
    // Set Variable [ $$stoploadCitation ]
    Go to Field [ reference::referenceForReferenceSort ]
    Pause/Resume Script [ Indefinitely ]
    Perform Find [ ]
    Exit Script [ ]
    End If
    Sort Records [ ] [ No dialog ]

Fields used in this script

    reference::modifyDate
    reference::referenceForReferenceSort
    tagKeywordPrimary::tag
    reference::createDate

Scripts used in this script

Layouts used in this script

    ReferenceFIND

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


sharedMainLayoutScripts
	Parent Folder: [sharedMainLayoutScripts]	Next Script: [backToLearnOrDefaultSetup]
Script Name	copyAndpastTags
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #
    #This is a script I'm developing and is not on any
    #layout yet. Its purpose is to copy tags from a
    #learn or reference record and then paste them
    #in a different record.
    If [ $$copyAndpastTagsPrimaryID = "" ]
    Set Variable [ $$copyAndpastTagsPrimaryID; Value:reference::kkeywordPrimary ]
    Set Variable [ $$copyAndpastTagsOtherID; Value:reference::kkeywordOther ]
    Set Variable [ $$copyAndpastTagsOther; Value:reference::OtherKeyWords ]
    Else
    Set Field [ reference::kkeywordPrimary; $$copyAndpastTagsPrimaryID ]
    Set Field [ reference::kkeywordOther; $$copyAndpastTagsOtherID ]
    Set Field [ reference::OtherKeyWords; $$copyAndpastTagsOther ]
    Set Variable [ $$copyAndpastTagsPrimaryID ]
    Set Variable [ $$copyAndpastTagsOtherID ]
    Set Variable [ $$copyAndpastTagsOther ]
    End If

Fields used in this script

    reference::kkeywordPrimary
    reference::kkeywordOther
    reference::OtherKeyWords

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [copyAndpastTags]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [backFromSetup]
Script Name	backToLearnOrDefaultSetup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    backFromSetup

Script Definition
Script Steps

    Allow User Abort [ Off ]
    Set Error Capture [ On ]
    Set Variable [ $$referenceRecordOne ]
    Set Variable [ $$referenceSort ]
    Set Variable [ $$findMode ]
    If [ Left ( $$defaultTagLayout ; 1 ) = "d" ]
    #
    #Go to testlearn layout and loop back to record.
    Set Window Title [ Current Window; New Title: "Setup" ]
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show All Records
    Delete All Records [ No dialog ]
    New Record/Request
    Go to Field [ ]
    #
    #Check for any dragged changes to tag spellings.
    Select Window [ Name: "Tag Menus"; Current file ]
    #organ
    Perform Find [ Specified Find Requests: Find Records; Criteria: tagMenus::match: “organ” ] [ Restore ]
    #copyist
    Extend Found Set [ Specified Find Requests: Find Records; Criteria: tagMenus::match: “copyist” ] [ Restore ]
    #heatlh
    Extend Found Set [ Specified Find Requests: Find Records; Criteria: tagMenus::match: “health” ] [ Restore ]
    #node
    Extend Found Set [ Specified Find Requests: Find Records; Criteria: tagMenus::match: “node” ] [ Restore ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    #
    #Go to Learn tag menu layout and loop back to record.
    Set Variable [ $$stopAddTagToCitation; Value:1 ]
    Go to Layout [ “defaultSections” (ruleSection) ]
    Go to Record/Request/Page [ $$defaultRecordNumber ] [ No dialog ]
    Set Variable [ $$stopAddTagToCitation ]
    Set Variable [ $$defaultRecordNumber ]
    Set Variable [ $$defaultTagLayout ]
    Set Variable [ $$citationMatch; Value:"section" ]
    Perform Script [ “defaultSectionMenu” ]
    Exit Script [ ]
    End If
    #
    #Go to testlearn layout and loop back to record.
    Set Variable [ $$stoploadCitation; Value:1 ]
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    Set Window Title [ Current Window; New Title: "Learn" ]
    If [ tempSetup::layoutLmain = "" ]
    Go to Layout [ “learn1” (testlearn) ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    Else If [ tempSetup::layoutLmain ≠ "" ]
    Go to Layout [ Middle ( tempSetup::layoutLmain ; 5 ; 42 ) ]
    End If
    Enter Find Mode [ ]
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$LearnEdit = testlearn::_Ltestlearn ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    Set Variable [ $$stoploadCitation ]
    #
    #Go to Learn tag menu layout and loop back to record.
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    Go to Layout [ $$learnTagLayout ]
    Set Variable [ $$learnTagLayout ]
    Set Variable [ $$stopLoadTagRecord ]
    If [ $$citeORref = "ref" ]
    Perform Script [ “menuReference” ]
    Else
    Perform Script [ “menuRefAddKeyWords” ]
    End If
    #
    If [ $$citeORref = "cite" ]
    Set Variable [ $$citationMatch; Value:"cite" ]
    Else If [ $$citeORref = "ref" ]
    Set Variable [ $$citationMatch; Value:"ref" ]
    End If
    Select Window [ Name: "Learn"; Current file ]
    #
    #Perform Load Citation script to restore conditional
    #formatting.
    Perform Script [ “loadCitation” ]

Fields used in this script

    tagMenus::match
    tempSetup::layoutLmain
    TEMP::layoutLmain
    TEMP::ksection
    testlearn::kcsection
    testlearn::date
    testlearn::timestamp
    testlearn::_Ltestlearn

Scripts used in this script

    insureEqualityOfSpellFields
    defaultSectionMenu
    menuReference
    menuRefAddKeyWords
    loadCitation

Layouts used in this script

    defaultSetup
    defaultSections
    learn1
    <Missing Layout>

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [backToLearnOrDefaultSetup]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [toggleMainWindowView]
Script Name	backFromSetup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    #Insure that all locked fields are revereted back if changed.
    Select Window [ Name: "Tag Menus"; Current file ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    Select Window [ Name: "Setup"; Current file ]
    Perform Script [ “insureEqualityOfSpellFields” ]
    #
    #Return to default setup module from...
    If [ Left ( $$module ; 1 ) = "l" ]
    Perform Script [ “backToLearnOrDefaultSetup” ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “learnMenu1” (tagMenus) ]
    Perform Script [ “menuTest” ]
    Set Variable [ $$module ]
    Exit Script [ ]
    Else If [ Left ( $$module ; 1 ) = "d" ]
    #
    #For returning from the test setup module, find
    #and delete all temp records that may have been
    #created while setuping up or deleting tests and
    #then create one new temp record to show the user
    #the default selections from the global fields whose
    #contents cannot be deleted even when all records
    #containing them are deleted. With a new record
    #any info in their global fields will go into a
    #newly created record.
    Go to Layout [ “defaultSetup” (tempSetup) ]
    Show All Records
    Delete All Records [ No dialog ]
    New Record/Request
    Go to Field [ ]
    #
    #Return to test setup layout on the Tag Menus
    #window, and clear the global fields needed for
    #creating and deleting tests in the test setup module.
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “defaultTest” (tagTestSubjectLocation) ]
    Set Field [ TEMP::ktest; "" ]
    Set Field [ TEMP::ktestItemList; "" ]
    Set Field [ TEMP::ktestItemListOLD; "" ]
    Set Field [ TEMP::ktestListtTestName; "" ]
    Exit Script [ ]
    End If
    Perform Script [ “returnToSetup” ]

Fields used in this script

    TEMP::ktest
    TEMP::ktestItemList
    TEMP::ktestItemListOLD
    TEMP::ktestListtTestName

Scripts used in this script

    insureEqualityOfSpellFields
    backToLearnOrDefaultSetup
    menuTest
    returnToSetup

Layouts used in this script

    learnMenu1
    defaultSetup
    defaultTest

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [backFromSetup]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [returnToAddRecordPUTONHOLD!!!!]
Script Name	toggleMainWindowView
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #Reveal more or fewer pictures and links for tag.
    #First toggle from current view to next view.
    #Turn off loadRecord script to speed up process.
    Set Variable [ $$stopLoadCitation; Value:1 ]
    #
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutLmain ; 4 ) = "more" ]
    Go to Layout [ “learn2” (testlearn) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLmain ; 4 ) = "more" ]
    Go to Layout [ “learn3” (testlearn) ]
    #from 3 to 4
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLmain ; 4 ) = "more" ]
    Go to Layout [ “learn4” (testlearn) ]
    #from 4 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 4 and Left ( TEMP::layoutLmain ; 4 ) = "less" ]
    Go to Layout [ “learn3” (testlearn) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLmain ; 4 ) = "less" ]
    Go to Layout [ “learn2” (testlearn) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLmain ; 4 ) = "less" ]
    Go to Layout [ “learn1” (testlearn) ]
    End If
    #
    #Remember layout user is on so they can be
    #returned to correct view.
    #Turn on loadRecord script needed for other scripts.
    Set Variable [ $$stopLoadCitation ]
    #
    #from 1 to 2
    If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLmain ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    #from 2 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLmain ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    #from 3 to 4
    Else If [ Right ( Get (LayoutName) ; 1) = 4 and Left ( TEMP::layoutLmain ; 4 ) = "more" ]
    Set Field [ TEMP::layoutLmain; "less" & Get (LayoutName) ]
    #from 4 to 3
    Else If [ Right ( Get (LayoutName) ; 1) = 3 and Left ( TEMP::layoutLmain ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLmain; "less" & Get (LayoutName) ]
    #from 3 to 2
    Else If [ Right ( Get (LayoutName) ; 1) = 2 and Left ( TEMP::layoutLmain ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLmain; "less" & Get (LayoutName) ]
    #from 2 to 1
    Else If [ Right ( Get (LayoutName) ; 1) = 1 and Left ( TEMP::layoutLmain ; 4 ) = "less" ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    End If
    #

Fields used in this script

    TEMP::layoutLmain

Scripts used in this script

Layouts used in this script

    learn2
    learn3
    learn4
    learn1

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [toggleMainWindowView]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [gotoTimeLogMainWindow]
Script Name	returnToAddRecordPUTONHOLD!!!!
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #I've decided to not continue finishing this script.
    #The idea was if the user navigated away from
    #the record they came into add mode to add to
    #this script would focus back on that record.
    #Part of the reason for this was that in add mode
    #The database was set to just keyword or node
    #in terms of noting the FilterFind field. But that
    #has now been made by dynamic by tying this noting
    #to the citation match field. If later on this seems
    #useful this script can be polished for use. Right
    #now it just seems like giving the user too much
    #help, which looks like to many buttons on the layout!
    #
    If [ $$addCitationMatch = "node" and $$addCitationMatch ≠ $$CitationMatch ]
    #
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"node" ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    If [ TEMP::layoutRtagN = "" or TEMP::layoutLtagN = "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    End If
    #
    Else If [ TEMP::layoutRtagN ≠ "" or TEMP::layoutLtagN ≠ "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ TEMP::layoutLtagN ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ TEMP::layoutRtagN ]
    End If
    End If
    #
    #Find node tags.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #If no records exist then create one.
    If [ Get (FoundCount)=0 ]
    Perform Script [ “newCitationMenuGroup” ]
    End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortNode = "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortNode = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$addRecord = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Inform user of items use on both screens.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadTagRecord” ]
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kNodePrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:reference::knodePrimary ]
    End If
    Refresh Window
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    #
    Else If [ $$addCitationMatch = "key" and $$addCitationMatch ≠ $$CitationMatch ]
    #
    #Set citationMatch to color menu button with inUse color.
    Set Variable [ $$citationMatch; Value:"key" ]
    #
    #Do not load tag records until the end of script
    #to prevent flashing of window and to speed up
    #script.
    Set Variable [ $$stopLoadTagRecord; Value:1 ]
    #
    #Goto correct layout.
    If [ TEMP::layoutRtagK = "" or TEMP::layoutLtagK = "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ “ReferenceMenu2keywordOrNode1” (tagMenus) ]
    End If
    #
    Else If [ TEMP::layoutRtagK ≠ "" or TEMP::layoutLtagK ≠ "" ]
    If [ Left (Get (LayoutName) ; 1) = "l" ]
    Go to Layout [ TEMP::layoutLtagK ]
    Else If [ Left (Get (LayoutName) ; 1) = "r" ]
    Go to Layout [ TEMP::layoutRtagK ]
    End If
    End If
    #
    #Find key tags for library section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::match; $$citationMatch ]
    Set Field [ ruleTagMenuGroups::ksection; "==" & TEMP::ksection ]
    Perform Find [ ]
    #
    #If no records exist then create one.
    If [ Get (FoundCount)=0 ]
    Perform Script [ “newCitationMenuGroup” ]
    End If
    #
    #Sort according to current users wishes. By default
    #the sort will be by category which is set by editCitation script.
    If [ TEMP::sortKey = "cat" ]
    Sort Records [ Specified Sort Order: ruleTagMenuGroups::order; based on value list: “order” ruleTagMenuGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    Else If [ TEMP::sortKey = "abc" ]
    Sort Records [ Specified Sort Order: tagMenus::tag; ascending ] [ Restore; No dialog ]
    End If
    #
    #
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$addRecord = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    #
    #Inform user of items use on both screens.
    Set Variable [ $$stopLoadTagRecord ]
    Perform Script [ “loadTagRecord” ]
    #
    #Just in case user was in nonTag field on this
    #window when user clicked a menu button on
    #the other window, exit all fields.
    Select Window [ Name: "References"; Current file ]
    If [ Get (LastError) = 112 ]
    Select Window [ Name: "Learn"; Current file ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:testlearn::kKeywordPrimary ]
    Else If [ Get (LastError) ≠ 112 ]
    Go to Field [ ]
    Set Variable [ $$citationItem; Value:reference::kkeywordPrimary ]
    End If
    Refresh Window
    #
    Select Window [ Name: "Tag Menus"; Current file ]
    Refresh Window
    Else If [ $$addCitationMatch = "testItem" and $$addCitationMatch ≠ $$CitationMatch ]
    #
    #Goto correct layout.
    If [ TEMP::DetailmoreORLessLayout = "" ]
    Go to Layout [ “setupTestItem” (tagMenus) ]
    Else If [ TEMP::DetailmoreORLessLayout ≠ "" ]
    Go to Layout [ TEMP::DetailmoreORLessLayout ]
    End If
    Set Variable [ $$citationMatch; Value:"testItem" ]
    #
    #Find detail tags for library section.
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    Enter Find Mode [ ]
    Set Field [ tagMenus::kGroupOrTest; TEMP::ktestItemList ]
    Perform Find [ ]
    #
    #If no records exist then create one.
    If [ Get (FoundCount)=0 ]
    Perform Script [ “newCitationMenuGroup” ]
    End If
    #
    Sort Records [ Specified Sort Order: ruleTagMenuTestGroups::order; based on value list: “order” ruleTagMenuTestGroups::name; ascending tagMenus::orderOrLock; based on value list: “order” tagMenus::tag; ascending ] [ Restore; No dialog ]
    #
    Go to Record/Request/Page [ First ]
    Loop
    Exit Loop If [ $$addRecord = tagMenus::_Ltag ]
    Go to Record/Request/Page [ Next; Exit after last ]
    End Loop
    End If

Fields used in this script

    TEMP::layoutRtagN
    TEMP::layoutLtagN
    tagMenus::match
    TEMP::ksection
    ruleTagMenuGroups::ksection
    TEMP::sortNode
    ruleTagMenuGroups::order
    ruleTagMenuGroups::name
    tagMenus::orderOrLock
    tagMenus::tag
    tagMenus::_Ltag
    testlearn::kNodePrimary
    reference::knodePrimary
    TEMP::layoutRtagK
    TEMP::layoutLtagK
    TEMP::sortKey
    testlearn::kKeywordPrimary
    reference::kkeywordPrimary
    TEMP::DetailmoreORLessLayout
    TEMP::ktestItemList
    tagMenus::kGroupOrTest
    ruleTagMenuTestGroups::order
    ruleTagMenuTestGroups::name

Scripts used in this script

    newCitationMenuGroup
    loadTagRecord

Layouts used in this script

    ltagNK2
    ReferenceMenu2keywordOrNode1
    <Missing Layout>
    setupTestItem

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [returnToAddRecordPUTONHOLD!!!!]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [gotoTimeLogLogWindow]
Script Name	gotoTimeLogMainWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Set Field [ MemorySwitch::currentLibraryMainWIndow; Get ( WindowName ) ]
    Set Field [ MemorySwitch::currentLibraryPath; Get ( FilePath ) ]
    Select Window [ Name: "Tag" ]
    Select Window [ Name: "Day" ]
    Select Window [ Name: "Specific Action" ]
    Select Window [ Name: "Timer" ]
    If [ Get (LastError) = 112 ]
    Set Variable [ $timer; Value:Get (LastError) ]
    End If
    Select Window [ Name: "HelpGiveThanks Apps" ]
    If [ Get (LastError) = 112 ]
    Set Variable [ $app; Value:Get (LastError) ]
    End If
    If [ $timer + $app = 224 ]
    Open URL [ Substitute ( MemorySwitch::helpPath ; "help" ; "actionLog82" ) ] [ No dialog ]
    Open URL [ Substitute ( MemorySwitch::helpPath ; "help" ; "actionLog" ) ] [ No dialog ]
    End If

Fields used in this script

    MemorySwitch::currentLibraryMainWIndow
    MemorySwitch::currentLibraryPath
    MemorySwitch::helpPath

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoTimeLogMainWindow]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [stopScriptOniPhone]
Script Name	gotoTimeLogLogWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Select Window [ Name: "Issues Log" ]
    Select Window [ Name: "Activity Log" ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [gotoTimeLogLogWindow]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [closeWindow]
Script Name	stopScriptOniPhone
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    If [ PatternCount ( Get ( ApplicationVersion ) ; "GO" ) ]
    Go to Layout [ “defaultSetup Copy” (tempSetup) ]
    End If

Fields used in this script

Scripts used in this script

Layouts used in this script

    defaultSetup Copy

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [stopScriptOniPhone]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [closeWindowHaltScript]
Script Name	closeWindow
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]
    Show/Hide Text Ruler [ Hide ]
    Close Window [ Current Window ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [closeWindow]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [backtoSetup]
Script Name	closeWindowHaltScript
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Close Window [ Current Window ]
    Halt Script

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [closeWindowHaltScript]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [learn]
Script Name	backtoSetup
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Layout [ “testSetup” (test) ]
    Set Variable [ $$first ]
    Set Variable [ $$last ]
    Go to Field [ ]

Fields used in this script

Scripts used in this script

Layouts used in this script

    testSetup

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [backtoSetup]	Parent Folder: [sharedMainLayoutScripts]	Next Script: [Exit]
Script Name	learn
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #basic administration tasks
    Set Error Capture [ On ]
    Allow User Abort [ Off ]
    #
    If [ TEMP::ksection = "" ]
    Show Custom Dialog [ Message: "Select a section from the Tag Menus window for records that you create to be placed into."; Buttons: “OK” ]
    Halt Script
    Else If [ tempSetup::kdefaultHealth = "" ]
    Show Custom Dialog [ Message: "Select the default copyright for any new records that you create by clicking the copyright button (you can always change your mind)."; Buttons: “OK” ]
    Halt Script
    Else If [ tempSetup::kdefaultNodePrimary = "" ]
    Show Custom Dialog [ Message: "Select yourself (the node responsible for creating new records) by clicking the node button."; Buttons: “OK” ]
    Halt Script
    End If
    #
    #
    #Make sure creator node's group is part of section group.
    Perform Script [ “addBackSectionCreatorNode” ]
    #
    Select Window [ Name: "Setup"; Current file ]
    Set Window Title [ Current Window; New Title: "Learn" ]
    Set Variable [ $$stoploadCitation; Value:1 ]
    If [ tempSetup::layoutLmain = "" ]
    Go to Layout [ “learn1” (testlearn) ]
    Set Field [ TEMP::layoutLmain; "more" & Get (LayoutName) ]
    Else If [ tempSetup::layoutLmain ≠ "" ]
    Go to Layout [ Middle ( tempSetup::layoutLmain ; 5 ; 42 ) ]
    End If
    Enter Find Mode [ ]
    #
    #now find and show all canned inspection items associated with this generic canned location
    Set Field [ testlearn::kcsection; TEMP::ksection ]
    Set Field [ testlearn::filterFind; "main" & ¶ ]
    Perform Find [ ]
    Sort Records [ Specified Sort Order: testlearn::date; descending testlearn::timestamp; descending ] [ Restore; No dialog ]
    Go to Record/Request/Page [ First ]
    Scroll Window [ Home ]
    Select Window [ Name: "Tag Menus"; Current file ]
    Go to Layout [ “ltagNK2” (tagMenus) ]
    Perform Script [ “menuKey” ]
    Select Window [ Name: "Learn"; Current file ]
    Set Variable [ $$stoploadCitation ]
    Perform Script [ “loadCitation” ]

Fields used in this script

    TEMP::ksection
    tempSetup::kdefaultHealth
    tempSetup::kdefaultNodePrimary
    tempSetup::layoutLmain
    TEMP::layoutLmain
    testlearn::kcsection
    testlearn::filterFind
    testlearn::date
    testlearn::timestamp

Scripts used in this script

    addBackSectionCreatorNode
    menuKey
    loadCitation

Layouts used in this script

    learn1
    <Missing Layout>
    ltagNK2

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [learn]	Parent Folder: [sharedMainLayoutScripts]
Script Name	Exit
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    Go to Field [ ]

Fields used in this script

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


help
	Parent Folder: [help]	Next Script: [help]
Script Name	helpBack
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #This script functions like a browsers back button
    #script, taking users back thru help windows bread
    #crumb style.
    If [ ValueCount ( tempSetup::helpName ) = 1 ]
    Exit Script [ ]
    Else
    Set Variable [ $value1; Value:GetValue ( tempSetup::helpName ; ValueCount ( tempSetup::helpName ) ) ]
    Set Field [ tempSetup::helpName; Substitute ( $value1 ; tempSetup::helpName ; "" &¶ ) ]
    Set Variable [ $value1; Value:GetValue ( tempSetup::helpName ; 1 ) ]
    Go to Layout [ $value1 ]
    End If

Fields used in this script

    tempSetup::helpName

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [helpBack]	Parent Folder: [help]	Next Script: [libraryHelp]
Script Name	help
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

    libraryHelp

Script Definition
Script Steps

    #
    #
    // Close Window [ Name: "Help" ]
    #
    #Set back path from help to this solution.
    Set Field [ MemorySwitch::backToSolution; "Library" ]
    #
    #
    #Set tag menu variable to 1 if user is on tag menu, and
    #then select the main window to determin the module.
    If [ Get (WindowName) = "Tag Menus" ]
    If [ $$findMode = 1 ]
    Set Field [ MemorySwitch::helpObjectName; "find" ]
    Else
    If [ $$citationMatch = "copyist" or $$citationMatch = "path" or $$citationMatch = "organ" ]
    Set Field [ MemorySwitch::helpObjectName; "key" ]
    Else
    Set Field [ MemorySwitch::helpObjectName; $$citationMatch ]
    End If
    #
    If [ Get (LayoutName) = "testMenuTestItem" ]
    Set Field [ MemorySwitch::helpObjectName; "test item" ]
    Else If [ Get (LayoutName) = "testInfo" ]
    Set Field [ MemorySwitch::helpObjectName; "test info" ]
    Else If [ Get (LayoutName) = "reportTagDiscovery" ]
    Set Field [ MemorySwitch::helpObjectName; "result" ]
    Else If [ Get (LayoutName) = "reportTagItem" ]
    Set Field [ MemorySwitch::helpObjectName; "item" ]
    Else If [ Get (LayoutName) = "reportTagInfo" ]
    Set Field [ MemorySwitch::helpObjectName; "info" ]
    Else If [ Get (LayoutName) = "setupTestFocus" ]
    Set Field [ MemorySwitch::helpObjectName; "section" ]
    End If
    #
    End If
    Set Variable [ $tagWindow; Value:1 ]
    Select Window [ Name: "Setup"; Current file ]
    Select Window [ Name: "Learn"; Current file ]
    Select Window [ Name: "Print/Copy"; Current file ]
    Select Window [ Name: "References"; Current file ]
    Select Window [ Name: "Test"; Current file ]
    Select Window [ Name: "Report"; Current file ]
    End If
    #
    #Determin the module.
    If [ Get ( LayoutTableName ) = "tempSetup" ]
    Set Field [ MemorySwitch::helpLayoutName; "Setup" ]
    Else If [ Get ( LayoutTableName ) = "testLearn" and Get (LayoutName) ≠ "step4_InspectionFinding" ]
    Set Field [ MemorySwitch::helpLayoutName; "Learn" ]
    Else If [ Get ( LayoutTableName ) = "reference" ]
    Set Field [ MemorySwitch::helpLayoutName; "Reference" ]
    Else If [ Get ( LayoutTableName ) = "test" ]
    Set Field [ MemorySwitch::helpLayoutName; "Test" ]
    Else If [ Get ( LayoutTableName ) = "inspectItems" ]
    Set Field [ MemorySwitch::helpLayoutName; "Test" ]
    Else If [ Get ( LayoutTableName ) = "testLearn" and Get (LayoutName) = "step4_InspectionFinding" ]
    Set Field [ MemorySwitch::helpLayoutName; "Test" ]
    Else If [ Get ( LayoutTableName ) = "report" ]
    Set Field [ MemorySwitch::helpLayoutName; "Test" ]
    End If
    #
    If [ $tagWindow ≠ 1 ]
    #Help for library setup module main window.
    If [ Get (LayoutName) = "defaultSetup" ]
    Set Field [ MemorySwitch::helpObjectName; "library" ]
    End If
    #
    #Help for test setup module main window.
    If [ Get (LayoutName) = "testSetup" ]
    Set Field [ MemorySwitch::helpObjectName; "setup" ]
    End If
    #
    #Help for test select main window.
    If [ Get (LayoutName) = "step3_InspectionItems" ]
    Set Field [ MemorySwitch::helpObjectName; "test select" ]
    End If
    #
    #Help for test select main window.
    If [ Get (LayoutName) = "step4_InspectionFinding" ]
    Set Field [ MemorySwitch::helpObjectName; "test finding" ]
    End If
    #
    #Help for report main window.
    If [ Get (LayoutName) = "PrintReportEdit" ]
    Set Field [ MemorySwitch::helpObjectName; "report" ]
    End If
    #
    #Help for learn module main window.
    If [ Get (LayoutName) = "learn1" or Get (LayoutName) = "learn2" or Get (LayoutName) = "learn3" or Get (LayoutName) = "learn4" ]
    Set Field [ MemorySwitch::helpObjectName; "learn" ]
    Else If [ Get (LayoutName) = "LearnTextWindow" ]
    Set Field [ MemorySwitch::helpObjectName; "edit" ]
    Show Custom Dialog [ Message: "This edit-note window will be closed while you view help for this window. Your work will be saved! When you are finished viewing help, click on your text to re-open this window and continue editing."; Buttons: “cancel”, “OK” ]
    If [ Get ( LastMessageChoice ) = 1 ]
    Pause/Resume Script [ Indefinitely ]
    Exit Script [ ]
    Else
    Close Window [ Current Window ]
    End If
    Else If [ Get (LayoutName) = "Learn4EDIT" ]
    Set Field [ MemorySwitch::helpObjectName; "qv" ]
    Else If [ Get (LayoutName) = "learnFind" ]
    Set Field [ MemorySwitch::helpObjectName; "learnFind" ]
    Else If [ Get (LayoutName) = "learnPreviewLayout" ]
    Set Field [ MemorySwitch::helpObjectName; "print" ]
    #
    #Help for reference module main window.
    Else If [ Get (LayoutName) = "reference" ]
    Set Field [ MemorySwitch::helpObjectName; "ref" ]
    Else If [ Get (LayoutName) = "referenceEdit" ]
    Set Field [ MemorySwitch::helpObjectName; "ref edit" ]
    Else If [ Get (LayoutName) = "referenceFind" ]
    Set Field [ MemorySwitch::helpObjectName; "ref find" ]
    End If
    End If
    #
    #
    Pause/Resume Script [ Duration (seconds): .1 ]
    #
    Open URL [ MemorySwitch::helpPath ] [ No dialog ]
    Open URL [ Substitute ( MemorySwitch::helpPath ; "file://" ; "file:///Volumes/" ) ] [ No dialog ]
    #
    Select Window [ Name: "Help" ]
    Select Window [ Name: "Tutorial" ]
    #
    #

Fields used in this script

    MemorySwitch::backToSolution
    MemorySwitch::helpObjectName
    MemorySwitch::helpLayoutName
    MemorySwitch::helpPath

Scripts used in this script

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script


Previous Script: [help]	Parent Folder: [help]
Script Name	libraryHelp
Run script with full access privileges	Off
Include In Menu	No
Layouts that use this script

Scripts that use this script

Script Definition
Script Steps

    #
    #So there are two help button scripts because I changed
    #mind and used an external help module forgetting
    #I already had a help button script. So some help buttons
    #are attached to one script and some to this one and
    #rather than figure this out, I just made this script
    #reference other one. As you can see by its name this
    #used to take users to an internal library help system.
    Perform Script [ “help” ]
    #

Fields used in this script

Scripts used in this script

    help

Layouts used in this script

Tables used in this script

Table occurrences used by this script

Custom Functions used by this script

Custom menu set used by this script
